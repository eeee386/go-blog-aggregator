(undo-tree-save-format-version . 1)
"ec76af0e5e8da63f05b5382d8f77f606763b60d4"
[nil nil nil nil (25898 21639 78343 4000) 0 nil]
([nil nil ((1 . 3) (t 25898 21600 692424 902000)) nil (25898 21639 78342 73000) 0 nil])
([nil nil ((3 . 6)) nil (25898 21639 78341 341000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 14 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (1 . 14) (#("package utils" 0 13 (fontified nil)) . 1) (1 . 14) (#("packa" 0 5 (fontified nil)) . 1) (1 . 6) (#("package utils" 0 13 (fontified nil)) . -1) (1 . 14) (#("packa" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -1) (undo-tree-id23 . -5) (undo-tree-id24 . -5) 6) nil (25898 21639 78340 329000) 0 nil])
([nil nil ((14 . 16)) nil (25898 21639 78338 165000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16 . 17) (#("
" 0 1 (fontified nil)) . -554) (16 . 555)) nil (25898 21639 78337 604000) 0 nil])
([nil nil ((15 . 16)) nil (25898 21639 78336 753000) 0 nil])
([nil nil ((nil rear-nonsticky nil 16 . 17) (#("
" 0 1 (fontified nil)) . -75) (16 . 76)) nil (25898 21639 78336 352000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15 . 16) (#("
" 0 1 (fontified nil)) . -73) (15 . 74)) nil (25898 21639 78335 470000) 0 nil])
([nil nil ((#("	\"strings\"
" 0 1 (fontified t) 1 10 (fontified t face tree-sitter-hl-face:string) 10 11 (fontified t)) . 61) (undo-tree-id0 . -5) (undo-tree-id1 . -10) (undo-tree-id2 . -5) (undo-tree-id3 . -1) (undo-tree-id4 . -10) (undo-tree-id5 . -5) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . 9) (undo-tree-id14 . -9) (undo-tree-id15 . -1) (undo-tree-id16 . -10) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -11) 66) nil (25898 21639 78333 977000) 0 nil])
([nil nil ((661 . 662)) nil (25898 21639 78214 271000) 0 nil])
([nil nil ((488 . 490) (t 25898 21639 87820 824000)) nil (25898 21805 812027 818000) 0 nil])
([nil nil ((490 . 494)) nil (25898 21805 812027 17000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -492) (undo-tree-id117 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -493) (undo-tree-id118 . -1) 494) nil (25898 21805 812026 125000) 0 nil])
([nil nil ((492 . 497)) nil (25898 21805 811907 312000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 504 514 nil nil nil t nil)) nil 16 nil #s(yas--field 1 504 514 nil nil nil t nil) nil nil)) (492 . 519) (#("WriteHeader(${1:statusCode int})" 0 32 (fontified nil)) . 492) (492 . 524) (#("Write" 0 5 (fontified nil)) . 492) (492 . 497) (#("WriteHeader" 0 11 (fontified nil)) . -492) (492 . 503) (#("Write" 0 5 (fontified t face tree-sitter-hl-face:property)) . -492) (undo-tree-id115 . -5) (undo-tree-id116 . -5) 497) nil (25898 21805 811906 321000) 0 nil])
([nil nil ((505 . 510) (504 . 506) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -504) (#("statusCode int" 0 10 (fontified nil face tree-sitter-hl-face:variable) 10 11 (fontified nil) 11 14 (fontified nil face tree-sitter-hl-face:variable)) . 505) (504 . 505)) nil (25898 21805 811903 866000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -505) (undo-tree-id110 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -506) (undo-tree-id111 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -507) (undo-tree-id112 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -508) (undo-tree-id113 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -509) (undo-tree-id114 . -1) 510) nil (25898 21805 811902 523000) 0 nil])
([nil nil ((505 . 514)) nil (25898 21805 811899 338000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -513) (undo-tree-id109 . -1) 514) nil (25898 21805 811898 516000) 0 nil])
([nil nil ((apply yas--snippet-revive 492 515 #s(yas--snippet nil (#s(yas--field 1 504 514 nil nil nil t nil)) nil 16 nil #s(yas--field 1 504 514 nil nil nil t nil) nil nil))) nil (25898 21805 811897 544000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -494) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -495) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -496) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -497) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -498) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -499) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -500) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -501) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -502) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -503) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("\"" 0 1 (fontified t)) . -504) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("C" 0 1 (fontified t)) . -505) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("o" 0 1 (fontified t)) . -506) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("n" 0 1 (fontified t)) . -507) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("t" 0 1 (fontified t)) . -508) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("e" 0 1 (fontified t)) . -509) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("n" 0 1 (fontified t)) . -510) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("t" 0 1 (fontified t)) . -511) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("-" 0 1 (fontified t)) . -512) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -513) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -514) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . 1) (undo-tree-id108 . -1) 515) nil (25898 21805 811894 869000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -492) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -493) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 494) nil (25898 21805 811864 412000) 0 nil])
([nil nil ((492 . 498)) nil (25898 21805 811851 979000) 0 nil])
([nil nil ((500 . 504) (#(")" 0 1 (fontified nil)) . -499) (499 . 500) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -499) (499 . 500) (498 . 500)) nil (25898 21805 811851 468000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -505) (505 . 506) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -505) (505 . 506) (504 . 506)) nil (25898 21805 811850 706000) 0 nil])
([nil nil ((506 . 518) (505 . 507) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -505) (505 . 506)) nil (25898 21805 811849 755000) 0 nil])
([nil nil ((521 . 523) (#("\"" 0 1 (fontified nil)) . -521) (519 . 522)) nil (25898 21805 811849 3000) 0 nil])
([nil nil ((522 . 538)) nil (25898 21805 811848 382000) 0 nil])
([nil nil ((nil rear-nonsticky nil 193 . 194) (#("
" 0 1 (fontified nil)) . -244) (192 . 245) 146) nil (25898 21805 811844 685000) 0 nil])
([nil nil ((745 . 748) (t 25898 21805 813614 249000)) nil (25898 42220 708371 126000) 0 nil])
([nil nil ((748 . 757)) nil (25898 42220 708370 745000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 760 763 nil nil nil t nil)) nil 33 nil #s(yas--field 1 760 763 nil nil nil t nil) nil nil)) (752 . 769) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 752) (752 . 774) (#("Print" 0 5 (fontified nil)) . 752) (752 . 757) (#("Println" 0 7 (fontified nil)) . -752) (752 . 759) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -752) (undo-tree-id135 . -5) (undo-tree-id136 . -5) 757) nil (25898 42220 708369 513000) 0 nil])
([nil nil ((761 . 763) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 761) (undo-tree-id132 . -8) (undo-tree-id133 . -5) (undo-tree-id134 . -6) (760 . 761)) nil (25898 42220 708367 268000) 0 nil])
([nil nil ((apply yas--snippet-revive 760 763 #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 1 760 763 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 1 760 763 nil nil nil t nil) nil)) (760 . 763) (#("dat" 0 3 (fontified nil)) . 760) (undo-tree-id119 . -3) (760 . 763) (#("dat" 0 3 (fontified nil)) . 760) (undo-tree-id120 . -3) (760 . 763) (#("dat" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -760) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -1) (undo-tree-id125 . -2) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) 763) nil (25898 42220 708363 231000) 0 nil])
([nil nil ((apply yas--snippet-revive 752 764 #s(yas--snippet nil (#s(yas--field 1 760 763 nil nil nil t nil)) nil 33 nil #s(yas--field 1 760 763 nil nil nil t nil) nil nil))) nil (25898 42295 163368 344000) 0 nil])
([nil nil ((592 . 594) (t 25898 42220 807780 944000)) nil (25898 42295 163368 73000) 0 nil])
([nil nil ((594 . 596)) nil (25898 42295 163367 763000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -595) (undo-tree-id461 . -1) 596) nil (25898 42295 163367 412000) 0 nil])
([nil nil ((595 . 603)) nil (25898 42295 163366 641000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 606 613 nil nil nil t nil)) nil 35 nil #s(yas--field 1 606 613 nil nil nil t nil) nil nil)) (598 . 615) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 598) (598 . 620) (#("Print" 0 5 (fontified nil)) . 598) (598 . 603) (#("Println" 0 7 (fontified nil)) . -598) (598 . 605) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -598) (undo-tree-id459 . -5) (undo-tree-id460 . -5) 603) nil (25898 42295 163365 889000) 0 nil])
([nil nil ((607 . 613) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 607) (606 . 607)) nil (25898 42295 163364 406000) 0 nil])
([nil nil ((apply yas--snippet-revive 598 614 #s(yas--snippet nil (#s(yas--field 1 606 613 nil nil nil t nil)) nil 35 nil #s(yas--field 1 606 613 nil nil nil t nil) nil nil))) nil (25898 42295 163363 725000) 0 nil])
([nil nil ((613 . 615)) nil (25898 42295 163363 194000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -614) (undo-tree-id458 . -1) 615) nil (25898 42295 163362 873000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -594) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -595) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -596) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("." 0 1 (fontified t)) . -597) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -598) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -599) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -600) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -601) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -602) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -603) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -604) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -605) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -606) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -607) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -608) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("l" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -609) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -610) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -611) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -612) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("." 0 1 (fontified t)) . -613) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -614) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . 1) (undo-tree-id455 . -1) (undo-tree-id456 . 1) (undo-tree-id457 . -1) 615) nil (25898 42295 163357 654000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -592) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("	" 0 1 (fontified t)) . -593) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) 594) nil (25898 42295 163269 948000) 0 nil])
([nil nil ((#("		fmt.Println(dat)
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 13 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 13 14 (fontified t face (rainbow-delimiters-depth-3-face)) 14 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 19 (fontified t)) . 746) (undo-tree-id462 . -18) (undo-tree-id463 . -18) (undo-tree-id464 . -17) (undo-tree-id465 . 2) (undo-tree-id466 . -18) (undo-tree-id467 . 6) (undo-tree-id468 . -14) (undo-tree-id469 . -18) (undo-tree-id470 . -18) (undo-tree-id471 . -17) (undo-tree-id472 . -17) (undo-tree-id473 . -17) (undo-tree-id474 . -17) (undo-tree-id475 . -14) (undo-tree-id476 . -17) (undo-tree-id477 . -17) (undo-tree-id478 . -17) (undo-tree-id479 . -17) (undo-tree-id480 . -17) (undo-tree-id481 . -17) (undo-tree-id482 . -19) 763 (t 25898 42295 169521 954000)) nil (25898 42349 748485 795000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 759) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (t 25898 42349 755068 105000)) nil (25898 42353 502051 511000) 0 nil])
([nil current ((759 . 760) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -759) (759 . 760)) nil (25898 42353 502040 119000) 0 nil])
nil
