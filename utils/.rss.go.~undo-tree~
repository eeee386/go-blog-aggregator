(undo-tree-save-format-version . 1)
"553761df810cfe0a5492cad3497c165a4f57c1ff"
[nil nil nil nil (25913 14721 419771 975000) 0 nil]
([nil nil ((nil rear-nonsticky nil 661 . 662) (nil fontified nil 1 . 662) (1 . 662) (t 25913 14721 422022 671000)) nil (25913 15150 919025 697000) 0 nil])
([nil nil ((1 . 3)) nil (25913 15150 919024 996000) 0 nil])
([nil nil ((1 . 14)) nil (25913 15150 919024 495000) 0 nil])
([nil nil ((#("    \"fmt\"
    \"net/http\"
" 0 4 (fontified t) 4 9 (fontified t face tree-sitter-hl-face:string) 9 14 (fontified t) 14 24 (fontified t face tree-sitter-hl-face:string) 24 25 (fontified t)) . 44) (undo-tree-id143 . -9) (undo-tree-id144 . -23) (undo-tree-id145 . -24) (undo-tree-id146 . -24) (undo-tree-id147 . 1) (undo-tree-id148 . -23) (undo-tree-id149 . -9) (undo-tree-id150 . -9) (undo-tree-id151 . -23) 53) nil (25913 15150 919023 673000) 0 nil])
([nil nil ((652 . 654)) nil (25913 15150 919016 149000) 0 nil])
([nil nil ((653 . 655)) nil (25913 15150 919015 638000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -653) (undo-tree-id141 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -654) (undo-tree-id142 . -1) 655) nil (25913 15150 919014 997000) 0 nil])
([nil nil ((653 . 665)) nil (25913 15150 919013 975000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -658) (undo-tree-id134 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -659) (undo-tree-id135 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -660) (undo-tree-id136 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -661) (undo-tree-id137 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -662) (undo-tree-id138 . -1) (#("G" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -663) (undo-tree-id139 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -664) (undo-tree-id140 . -1) 665) nil (25913 15150 919012 693000) 0 nil])
([nil nil ((658 . 661)) nil (25913 15150 919009 387000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -673) (673 . 674) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -673) (673 . 674) (661 . 674)) nil (25913 15150 919008 745000) 0 nil])
([nil nil ((673 . 683)) nil (25913 15150 919008 335000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -686) (686 . 687) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -686) (686 . 687) (684 . 687)) nil (25913 15150 919007 944000) 0 nil])
([nil nil ((687 . 688) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 687) (687 . 688) (686 . 688)) nil (25913 15150 919007 323000) 0 nil])
([nil nil ((683 . 687)) nil (25913 15150 919006 772000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -685) (undo-tree-id132 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -686) (undo-tree-id133 . -1) 687) nil (25913 15150 919006 311000) 0 nil])
([nil nil ((685 . 689)) nil (25913 15150 919005 159000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -703) (703 . 704) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -703) (703 . 704) (689 . 704)) nil (25913 15150 919004 557000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -693) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -694) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -695) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -696) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -697) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("f" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -698) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -699) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -700) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -701) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 702) nil (25913 15150 919003 145000) 0 nil])
([nil nil ((693 . 696)) nil (25913 15150 918997 103000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -696) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . 1) (undo-tree-id110 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -697) (undo-tree-id111 . -1) (undo-tree-id112 . 1) (undo-tree-id113 . -1) 698) nil (25913 15150 918996 212000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -697) (697 . 698) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -697) (697 . 698) (696 . 698)) nil (25913 15150 918993 797000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -696) (undo-tree-id103 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -697) (undo-tree-id104 . -1) (undo-tree-id105 . 1) (undo-tree-id106 . -1) 698) nil (25913 15150 918992 725000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -697) (697 . 698) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -697) (697 . 698) (696 . 698)) nil (25913 15150 918990 842000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -602) (undo-tree-id101 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -603) (undo-tree-id102 . -1) 604) nil (25913 15150 918990 241000) 0 nil])
([nil nil ((602 . 604)) nil (25913 15150 918988 908000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -696) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . 1) (undo-tree-id97 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -697) (undo-tree-id98 . -1) (undo-tree-id99 . 1) (undo-tree-id100 . -1) 698) nil (25913 15150 918987 676000) 0 nil])
([nil nil ((701 . 704)) nil (25913 15150 918982 586000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -703) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 704) nil (25913 15150 918981 895000) 0 nil])
([nil nil ((703 . 719)) nil (25913 15150 918980 723000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 727 734 nil nil nil t nil)) nil 0 nil #s(yas--field 1 727 734 nil nil nil t nil) nil nil)) (716 . 739) (#("NewDecoder(${1:r io.Reader})" 0 28 (fontified nil)) . 716) (716 . 744) (#("New" 0 3 (fontified nil)) . 716) (716 . 719) (#("NewDecoder" 0 10 (fontified nil)) . -716) (716 . 726) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -716) (undo-tree-id90 . -3) (undo-tree-id91 . -3) 719) nil (25913 15150 918979 811000) 0 nil])
([nil nil ((#("r io.Reader" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:property)) . 728) (727 . 728)) nil (25913 15150 918978 138000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -727) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 728) nil (25913 15150 918977 607000) 0 nil])
([nil nil ((727 . 734)) nil (25913 15150 918976 615000) 0 nil])
([nil nil ((apply yas--snippet-revive 716 735 #s(yas--snippet nil (#s(yas--field 1 727 734 nil nil nil t nil)) nil 0 nil #s(yas--field 1 727 734 nil nil nil t nil) nil nil))) nil (25913 15150 918976 364000) 0 nil])
([nil nil ((695 . 696)) nil (25913 15150 918976 44000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -683) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#(" " 0 1 (fontified t)) . -684) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -685) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -686) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -687) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -688) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -689) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -690) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -691) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#(" " 0 1 (fontified t)) . -692) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -693) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:type)) . -694) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -695) (undo-tree-id86 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:type)) . -696) (undo-tree-id87 . -1) 697) nil (25913 15150 918973 669000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -715) (undo-tree-id44 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -716) (undo-tree-id45 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -717) (undo-tree-id46 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -718) (undo-tree-id47 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -719) (undo-tree-id48 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -720) (undo-tree-id49 . -1) 721) nil (25913 15150 918958 10000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -714) (undo-tree-id43 . -1) 715) nil (25913 15150 918797 859000) 0 nil])
([nil nil ((683 . 696)) nil (25913 15150 918796 827000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -697) (697 . 698) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -697) (697 . 698) (696 . 698)) nil (25913 15150 918796 106000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -696) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . 1) (undo-tree-id39 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -697) (undo-tree-id40 . -1) (undo-tree-id41 . 1) (undo-tree-id42 . -1) 698) nil (25913 15150 918794 884000) 0 nil])
([nil nil ((699 . 701)) nil (25913 15150 918790 495000) 0 nil])
([nil nil ((701 . 711)) nil (25913 15150 918789 874000) 0 nil])
([nil nil ((711 . 719)) nil (25913 15150 918789 193000) 0 nil])
([nil nil ((719 . 722)) nil (25913 15150 918788 572000) 0 nil])
([nil nil ((25 . 26) (#("    " 0 4 (fontified t)) . -25) 29 (42 . 54) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 732 735 nil nil nil t nil)) nil 1 nil #s(yas--field 1 732 735 nil nil nil t nil) nil nil)) (719 . 734) (#("Get(${1:url string})" 0 20 (fontified nil)) . 719) (719 . 739) (#("Get" 0 3 (fontified nil)) . 719) (719 . 722) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -719) (undo-tree-id34 . -3) (undo-tree-id35 . -3) 722) nil (25913 15150 918787 279000) 0 nil])
([nil nil ((732 . 734) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -732) (#("url string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 733) (732 . 733)) nil (25913 15150 918784 574000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -732) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 733)) nil (25913 15150 918782 721000) 0 nil])
([nil nil ((732 . 735)) nil (25913 15150 918781 158000) 0 nil])
([nil nil ((apply yas--snippet-revive 728 736 #s(yas--snippet nil (#s(yas--field 1 732 735 nil nil nil t nil)) nil 1 nil #s(yas--field 1 732 735 nil nil nil t nil) nil nil))) nil (25913 15150 918780 617000) 0 nil])
([nil nil ((736 . 737)) nil (25913 15150 918779 996000) 0 nil])
([nil nil ((765 . 770)) nil (25913 15150 918779 304000) 0 nil])
([nil nil ((apply yas--snippet-revive 770 774 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (770 . 774) (#("Body" 0 4 (fontified nil)) . 770) (770 . 774) (#("Body" 0 4 (fontified nil)) . -770) (770 . 774)) nil (25913 15150 918778 363000) 0 nil])
([nil nil ((775 . 777)) nil (25913 15150 918777 40000) 0 nil])
([nil nil ((737 . 739)) nil (25913 15150 918776 459000) 0 nil])
([nil nil ((nil rear-nonsticky nil 821 . 822) (nil fontified nil 739 . 822) (739 . 822) 738) nil (25913 15150 918775 748000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -739) (undo-tree-id28 . -1) (#(" " 0 1 (fontified t)) . -740) (undo-tree-id29 . -1) (#(" " 0 1 (fontified t)) . -741) (undo-tree-id30 . -1) (#(" " 0 1 (fontified t)) . -742) (undo-tree-id31 . -1) 743) nil (25913 15150 918774 285000) 0 nil])
([nil nil ((80 . 81) (#("    " 0 4 (fontified t)) . -80) 84 (115 . 116) (#("    " 0 4 (fontified t)) . -115) 119 (153 . 154) (#("    " 0 4 (fontified t)) . -153) 157 (211 . 212) (#("    " 0 4 (fontified t)) . 211) (249 . 250) (#("    " 0 4 (fontified t)) . 249) (286 . 287) (#("    " 0 4 (fontified t)) . 286) (330 . 331) (#("    " 0 4 (fontified t)) . 330) (367 . 368) (#("    " 0 4 (fontified t)) . 367) (409 . 410) (#("    " 0 4 (fontified t)) . 409) (474 . 475) (#("    " 0 4 (fontified t)) . 474) (505 . 506) (#("    " 0 4 (fontified t)) . 505) (535 . 536) (#("    " 0 4 (fontified t)) . 535) (572 . 573) (#("    " 0 4 (fontified t)) . 572) (623 . 624) (#("    " 0 4 (fontified t)) . 623) (#(";" 0 1 (fontified t)) . 736) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (755 . 757) (#("        " 0 8 (fontified t)) . 755) (undo-tree-id25 . 5) (undo-tree-id26 . -2) (#(" err)
       " 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 13 (fontified t)) . 792) 757 (806 . 813) (813 . 814) (#("    " 0 4 (fontified t)) . 813) (undo-tree-id27 . -4) (#("	" 0 1 (fontified t)) . 857) 757) nil (25913 15150 918770 187000) 0 nil])
([nil nil ((52 . 54)) nil (25913 15150 918763 665000) 0 nil])
([nil nil ((55 . 58) (54 . 56) (#("\"" 0 1 (fontified nil)) . -54) (54 . 55)) nil (25913 15150 918762 913000) 0 nil])
([nil nil ((805 . 807)) nil (25913 15150 918762 232000) 0 nil])
([nil nil ((807 . 820)) nil (25913 15150 918761 651000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -818) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -819) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 820) nil (25913 15150 918760 980000) 0 nil])
([nil nil ((818 . 828)) nil (25913 15150 918758 666000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 829 837 nil nil nil t nil)) nil 3 nil #s(yas--field 1 829 837 nil nil nil t nil) nil nil)) (822 . 835) (#("Decode(${1:v any})" 0 18 (fontified nil)) . 822) (822 . 840) (#("Decode" 0 6 (fontified nil)) . 822) (822 . 828) (#("Decode" 0 6 (fontified t face tree-sitter-hl-face:property)) . -822) (undo-tree-id17 . -6) (undo-tree-id18 . -6) 828) nil (25913 15150 918757 744000) 0 nil])
([nil nil ((830 . 831) (#("v any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:variable)) . 830) (829 . 830)) nil (25913 15150 918755 490000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -830) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 831) nil (25913 15150 918754 939000) 0 nil])
([nil nil ((830 . 837)) nil (25913 15150 918753 586000) 0 nil])
([nil nil ((apply yas--snippet-revive 822 838 #s(yas--snippet nil (#s(yas--field 1 829 837 nil nil nil t nil)) nil 3 nil #s(yas--field 1 829 837 nil nil nil t nil) nil nil))) nil (25913 15150 918753 105000) 0 nil])
([nil nil ((838 . 840)) nil (25913 15150 918752 444000) 0 nil])
([nil nil ((840 . 850)) nil (25913 15150 918751 793000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -846) (undo-tree-id11 . -1) (#(":" 0 1 (fontified t)) . -847) (undo-tree-id12 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -848) (undo-tree-id13 . -1) (#(" " 0 1 (fontified t)) . -849) (undo-tree-id14 . -1) 850) nil (25913 15150 918750 881000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -855) (855 . 856) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -855) (855 . 856) (846 . 856)) nil (25913 15150 918748 366000) 0 nil])
([nil nil ((856 . 858) (857 . 858) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 856) (856 . 858) (855 . 857)) nil (25913 15150 918747 454000) 0 nil])
([nil nil ((#("		fmt.Printf(\"Error GET: %v\\n\", err)
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 12 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 27 (fontified t face tree-sitter-hl-face:string) 27 28 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 28 29 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 29 30 (fontified t face tree-sitter-hl-face:string) 30 31 (fontified t) 31 32 (fontified t) 32 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t face (rainbow-delimiters-depth-3-face)) 36 37 (fontified t)) . 719) (undo-tree-id8 . -36) (undo-tree-id9 . -37) (undo-tree-id10 . -1) 720) nil (25913 15150 918746 923000) 0 nil])
([nil nil ((727 . 732)) nil (25913 15150 918745 120000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -731) (undo-tree-id7 . -1) 732) nil (25913 15150 918744 749000) 0 nil])
([nil nil ((825 . 835)) nil (25913 15150 918743 818000) 0 nil])
([nil nil ((671 . 677)) nil (25913 15150 918743 547000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -672) (undo-tree-id6 . -1) 673) nil (25913 15150 918743 156000) 0 nil])
([nil nil ((672 . 673)) nil (25913 15150 918742 485000) 0 nil])
([nil nil ((844 . 846)) nil (25913 15150 918742 215000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -784) (undo-tree-id5 . -1) 785) nil (25913 15150 918741 834000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -843) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("	" 0 1 (fontified t)) . -844) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("
" 0 1 (fontified t)) . -845) (undo-tree-id4 . -1) 846) nil (25913 15150 918740 582000) 0 nil])
([nil nil ((843 . 845)) nil (25913 15150 918691 559000) 0 nil])
([nil nil ((845 . 855)) nil (25913 15150 918689 215000) 0 nil])
([nil nil ((#("	\"fmt\"
" 0 1 (fontified t) 1 6 (fontified t face tree-sitter-hl-face:string) 6 7 (fontified t)) . 53) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -7) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -5) (undo-tree-id159 . -1) (undo-tree-id160 . -6) (undo-tree-id161 . -6) (undo-tree-id162 . 5) (undo-tree-id163 . -5) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -7) 58 (t 25913 15151 19522 978000)) nil (25913 15157 63046 906000) 0 nil])
([nil nil ((700 . 702) (t 25913 15157 69516 791000)) nil (25913 15390 507102 31000) 0 nil])
([nil nil ((702 . 711)) nil (25913 15390 507101 250000) 0 nil])
([nil nil ((39 . 46) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 708 708 nil nil nil t nil)) nil 7 nil #s(yas--field 1 708 708 nil nil nil t nil) nil nil)) (706 . 723) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 706) (706 . 728) (#("Print" 0 5 (fontified nil)) . 706) (706 . 711) (#("Println" 0 7 (fontified nil)) . -706) (706 . 713) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -706) (undo-tree-id235 . -5) (undo-tree-id236 . -5) (undo-tree-id237 . -2) (undo-tree-id238 . -3) (undo-tree-id239 . -4) (undo-tree-id240 . -5) (undo-tree-id241 . -5) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) 711) nil (25913 15390 507100 138000) 0 nil])
([nil nil ((721 . 723) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -721) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 722) (undo-tree-id232 . -8) (undo-tree-id233 . -5) (undo-tree-id234 . -6) (721 . 722)) nil (25913 15390 507093 686000) 0 nil])
([nil nil ((apply yas--snippet-revive 708 708 #s(yas--snippet nil (#s(yas--field 1 708 708 nil nil nil t nil)) nil 7 nil #s(yas--field 1 708 708 nil nil nil t nil) nil nil)) (#("	fmt.Println(\"\")
" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 12 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 15 (fontified t face tree-sitter-hl-face:string) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t)) . 708) (undo-tree-id173 . -16) (undo-tree-id174 . 3) (undo-tree-id175 . -14) (undo-tree-id176 . -13) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (undo-tree-id187 . -5) (undo-tree-id188 . -5) (undo-tree-id189 . -13) (undo-tree-id190 . -15) (undo-tree-id191 . -5) (undo-tree-id192 . 1) (undo-tree-id193 . -16) (undo-tree-id194 . -16) (undo-tree-id195 . 5) (undo-tree-id196 . -13) (undo-tree-id197 . 2) (undo-tree-id198 . -16) (undo-tree-id199 . -13) (undo-tree-id200 . 2) (undo-tree-id201 . -13) (undo-tree-id202 . -13) (undo-tree-id203 . -13) (undo-tree-id204 . -13) (undo-tree-id205 . -13) (undo-tree-id206 . -13) (undo-tree-id207 . -13) (undo-tree-id208 . -13) (undo-tree-id209 . -13) (undo-tree-id210 . -14) (undo-tree-id211 . -14) (undo-tree-id212 . -14) (undo-tree-id213 . -14) (undo-tree-id214 . -14) (undo-tree-id215 . -14) (undo-tree-id216 . -14) (undo-tree-id217 . -14) (undo-tree-id218 . -14) (undo-tree-id219 . -13) (undo-tree-id220 . -13) (undo-tree-id221 . -13) (undo-tree-id222 . -13) (undo-tree-id223 . -13) (undo-tree-id224 . -13) (undo-tree-id225 . -13) (undo-tree-id226 . -13) (undo-tree-id227 . -13) (undo-tree-id228 . -17) 721) nil (25913 15390 506873 923000) 0 nil])
([nil nil ((#("	\"fmt\"
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:string fontified t) 5 6 (face tree-sitter-hl-face:string fontified t) 6 7 (fontified t)) . 41) (undo-tree-id250 . -6) (undo-tree-id251 . -6) (undo-tree-id252 . -5) (undo-tree-id253 . -1) (undo-tree-id254 . -6) 46 (t 25913 15390 514099 208000)) nil (25913 15447 16414 94000) 0 nil])
([nil nil ((700 . 702) (t 25913 15447 115954 586000)) nil (25913 15496 501310 683000) 0 nil])
([nil nil ((702 . 710)) nil (25913 15496 501309 951000) 0 nil])
([nil nil ((39 . 46) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 720 724 nil nil nil t #s(yas--field 2 726 735 nil nil nil t nil)) #s(yas--field 2 726 735 nil nil nil t nil)) nil 10 nil #s(yas--field 2 726 735 nil nil nil t nil) nil nil)) (706 . 737) (#("Printf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 706) (706 . 747) (#("Prin" 0 4 (fontified nil)) . 706) (706 . 710) (#("Printf" 0 6 (fontified nil)) . -706) (706 . 712) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -706) (undo-tree-id277 . -4) (undo-tree-id278 . -4) 710) nil (25913 15496 501308 849000) 0 nil])
([nil nil ((721 . 723) (720 . 722) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -720) (undo-tree-id275 . -1) (#("format string" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 13 (fontified nil face tree-sitter-hl-face:variable)) . 721) (undo-tree-id276 . -13) (720 . 721)) nil (25913 15496 501306 174000) 0 nil])
([nil nil ((727 . 733) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 727) (undo-tree-id274 . -8) (726 . 727)) nil (25913 15496 501304 271000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -726) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -727) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -728) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -729) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("." 0 1 (fontified t)) . -730) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -731) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -732) (undo-tree-id272 . -1) (undo-tree-id273 . -1) 733) nil (25913 15496 501302 177000) 0 nil])
([nil nil ((726 . 733)) nil (25913 15496 501180 548000) 0 nil])
([nil nil ((733 . 735)) nil (25913 15496 501180 168000) 0 nil])
([nil nil ((apply yas--snippet-revive 713 736 #s(yas--snippet nil (#s(yas--field 1 720 724 nil nil nil t #s(yas--field 2 726 735 nil nil nil t nil)) #s(yas--field 2 726 735 nil nil nil t nil)) nil 10 nil #s(yas--field 2 726 735 nil nil nil t nil) nil nil))) nil (25913 15496 501177 32000) 0 nil])
([nil nil ((769 . 771) (t 25913 15496 503817 377000)) nil (25913 15521 505344 670000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -770) (undo-tree-id282 . -1) 771) nil (25913 15521 505343 838000) 0 nil])
([nil nil ((nil rear-nonsticky nil 796 . 797) (nil fontified nil 770 . 797) (770 . 797)) nil (25913 15521 505342 676000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -772) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#(" " 0 1 (fontified t)) . -773) (undo-tree-id281 . -1) 774) nil (25913 15521 505340 352000) 0 nil])
([nil nil ((#("	fmt.Printf(\"%s\", resp.Body)
" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 11 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 11 12 (fontified t face (rainbow-delimiters-depth-2-face)) 12 16 (fontified t face tree-sitter-hl-face:string) 16 18 (fontified t) 18 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t) 23 27 (fontified t face tree-sitter-hl-face:property) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t)) . 708) (undo-tree-id283 . -28) (undo-tree-id284 . -28) (undo-tree-id285 . -12) (undo-tree-id286 . 2) (undo-tree-id287 . -27) (undo-tree-id288 . -28) (undo-tree-id289 . -28) (undo-tree-id290 . -27) (undo-tree-id291 . -27) (undo-tree-id292 . 2) (undo-tree-id293 . -28) (undo-tree-id294 . 18) (undo-tree-id295 . -12) (undo-tree-id296 . -27) (undo-tree-id297 . -27) (undo-tree-id298 . -27) (undo-tree-id299 . -27) (undo-tree-id300 . -27) (undo-tree-id301 . -29) 735 (t 25913 15521 512744 305000)) nil (25913 15536 52291 321000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -783) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -784) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -785) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -786) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -787) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -788) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -789) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -790) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -791) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -792) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -793) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -794) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -795) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("s" 0 1 (fontified nil)) . -796) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("p" 0 1 (fontified nil)) . -797) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("." 0 1 (fontified t)) . -798) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -799) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -800) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -801) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -802) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -803) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . 1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) 804 (t 25913 15536 152700 471000)) nil (25913 16015 159807 801000) 0 nil])
([nil nil ((783 . 787)) nil (25913 16015 159764 39000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face tree-sitter-hl-face:property)) . -785) (undo-tree-id553 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -786) (undo-tree-id554 . -1) 787) nil (25913 16015 159763 628000) 0 nil])
([nil nil ((785 . 786)) nil (25913 16015 159762 807000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) #s(yas--field 2 806 811 nil nil nil nil nil)) nil 11 nil #s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) nil nil)) (783 . 812) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 783) (783 . 822) (#("Unm" 0 3 (fontified nil)) . 783) (783 . 786) (#("Unmarshal" 0 9 (fontified nil)) . -783) (783 . 792) (#("Unm" 0 3 (fontified t face tree-sitter-hl-face:property)) . -783) (undo-tree-id551 . -3) (undo-tree-id552 . -3) 786) nil (25913 16015 159761 885000) 0 nil])
([nil nil ((794 . 798) (#("data []byte" 0 4 (fontified nil face tree-sitter-hl-face:type) 4 5 (fontified nil) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face)) 6 7 (fontified nil face (rainbow-delimiters-depth-3-face)) 7 11 (fontified nil face tree-sitter-hl-face:type)) . 794) (793 . 794)) nil (25913 16015 159760 442000) 0 nil])
([nil nil ((798 . 802)) nil (25913 16015 159760 102000) 0 nil])
([nil nil ((apply yas--snippet-revive 805 826 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) nil)) (793 . 800) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) nil)) (798 . 819) (#("Body.Close().Error())" 0 21 (fontified nil)) . 798) (798 . 819) (#("Body" 0 4 (fontified nil)) . 798) (798 . 802) (#("Body.Close().Error" 0 18 (fontified nil)) . -798) (798 . 816) (#("Body" 0 4 (fontified t face tree-sitter-hl-face:property)) . -798) (undo-tree-id549 . -4) (undo-tree-id550 . -4) 802) nil (25913 16015 159759 350000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -805) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -806) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -807) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -808) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("." 0 1 (fontified t)) . -809) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -810) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -811) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -812) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -813) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -814) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -815) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -816) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("." 0 1 (fontified t)) . -817) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -818) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -819) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -820) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -821) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -822) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -823) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . 1) (undo-tree-id540 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -824) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . 1) (undo-tree-id544 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -825) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . 1) (undo-tree-id548 . -1) 826) nil (25913 16015 159755 613000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -793) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -794) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . 1) (undo-tree-id423 . -1) (#("b" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -795) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("y" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -796) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -797) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -798) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -799) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -800) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -801) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -802) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -803) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("." 0 1 (fontified t)) . -804) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) 805) nil (25913 16015 159731 618000) 0 nil])
([nil nil ((apply yas--snippet-revive 783 801 #s(yas--snippet nil (#s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) #s(yas--field 2 806 811 nil nil nil nil nil)) nil 11 nil #s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) nil nil))) nil (25913 16015 159591 25000) 0 nil])
([nil nil ((#("	decoder := xml.Unmarshal(, v any)
" 0 1 (fontified t) 1 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 15 (fontified t) 15 16 (fontified t) 16 25 (fontified t face tree-sitter-hl-face:type) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 28 (fontified t) 28 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t) 30 33 (fontified t face tree-sitter-hl-face:variable) 33 34 (fontified t face (rainbow-delimiters-depth-2-face)) 34 35 (fontified t)) . 767) (undo-tree-id407 . -16) (undo-tree-id408 . -34) (undo-tree-id409 . 2) (undo-tree-id410 . -16) (undo-tree-id411 . -16) (undo-tree-id412 . -8) (undo-tree-id413 . -16) (undo-tree-id414 . -26) (undo-tree-id415 . -32) (undo-tree-id416 . -16) (undo-tree-id417 . -26) 799) nil (25913 16015 159590 203000) 0 nil])
([nil nil ((766 . 768)) nil (25913 16015 159585 965000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -767) (undo-tree-id406 . -1) 768) nil (25913 16015 159585 624000) 0 nil])
([nil nil ((767 . 768)) nil (25913 16015 159585 124000) 0 nil])
([nil nil ((#("
	" 0 1 (fontified t) 1 2 (fontified t)) . 766) (undo-tree-id405 . -1)) nil (25913 16015 159584 693000) 0 nil])
([nil nil ((767 . 802)) nil (25913 16015 159584 262000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) #s(yas--field 2 806 811 nil nil nil nil nil)) nil 11 nil #s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) nil nil))) nil (25913 16015 159584 1000) 0 nil])
([nil nil ((793 . 805)) nil (25913 16015 159583 761000) 0 nil])
([nil nil ((805 . 826)) nil (25913 16015 159583 511000) 0 nil])
([nil nil ((798 . 802) (#("Body.Close().Error" 0 18 (fontified nil)) . 798) (798 . 816) (#("Body" 0 4 (fontified nil)) . 798) (798 . 802) (#("Body.Close().Error())" 0 21 (fontified nil)) . 798) (798 . 819) (#("Body.Close().Error())" 0 1 (fontified nil face tree-sitter-hl-face:property) 1 2 (fontified nil face tree-sitter-hl-face:property) 2 3 (fontified nil face tree-sitter-hl-face:property) 3 4 (fontified nil face tree-sitter-hl-face:property) 4 5 (fontified nil) 5 6 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 6 7 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 7 8 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 8 9 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 9 10 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 10 11 (fontified nil face (rainbow-delimiters-depth-4-face)) 11 12 (fontified nil face (rainbow-delimiters-depth-4-face)) 12 13 (fontified nil) 13 14 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 14 15 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 15 16 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 16 17 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 17 18 (fontified nil face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 18 19 (fontified nil face (rainbow-delimiters-depth-4-face)) 19 20 (fontified nil face (rainbow-delimiters-depth-4-face)) 20 21 (fontified nil face (rainbow-delimiters-depth-3-face))) . 798) (undo-tree-id397 . -21) (#("[]byte(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 3 (fontified t face tree-sitter-hl-face:type) 3 4 (fontified t face tree-sitter-hl-face:type) 4 5 (fontified t face tree-sitter-hl-face:type) 5 6 (fontified t face tree-sitter-hl-face:type) 6 7 (fontified t face (rainbow-delimiters-depth-3-face))) . 793) (undo-tree-id398 . 7) (undo-tree-id399 . -1) (undo-tree-id400 . 7) (undo-tree-id401 . 7) (undo-tree-id402 . -1) (undo-tree-id403 . 6) (undo-tree-id404 . -2)) nil (25913 16015 159583 10000) 0 nil])
([nil nil ((#("Body" 0 4 (fontified t face tree-sitter-hl-face:property)) . 798) (undo-tree-id396 . -4)) nil (25913 16015 159579 463000) 0 nil])
([nil nil ((#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . 793) (undo-tree-id391 . -1) (undo-tree-id392 . 1) (undo-tree-id393 . -1) (undo-tree-id394 . 1) (794 . 805) (#("esp." 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t)) . 794) (undo-tree-id395 . -4)) nil (25913 16015 159578 722000) 0 nil])
([nil nil ((783 . 786) (#("Unmarshal" 0 9 (fontified nil)) . 783) (783 . 792) (#("Unm" 0 3 (fontified nil)) . 783) (783 . 786) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 783) (783 . 822) (#("Unmarshal(data []byte, v any)" 0 9 (fontified t face tree-sitter-hl-face:type) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 14 (fontified t face tree-sitter-hl-face:type) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 21 (fontified t face tree-sitter-hl-face:type) 21 23 (fontified t) 23 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 28 (fontified t face tree-sitter-hl-face:type) 28 29 (fontified t face (rainbow-delimiters-depth-2-face))) . 783) (undo-tree-id387 . -29) (undo-tree-id388 . -10) (undo-tree-id389 . -10) (undo-tree-id390 . -10) (apply yas--snippet-revive 783 812 #s(yas--snippet nil (#s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) #s(yas--field 2 806 811 nil nil nil nil nil)) nil 11 nil #s(yas--field 1 793 793 nil nil nil t #s(yas--field 2 806 811 nil nil nil nil nil)) nil nil))) nil (25913 16015 159575 776000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . 785) (undo-tree-id386 . -1)) nil (25913 16015 159573 772000) 0 nil])
([nil nil ((785 . 787)) nil (25913 16015 159573 101000) 0 nil])
([nil nil ((#("UnMa" 0 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property)) . 783) (undo-tree-id384 . -2) (undo-tree-id385 . -3)) nil (25913 16015 159572 440000) 0 nil])
([nil nil ((783 . 804)) nil (25913 16015 159571 508000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -354) (undo-tree-id370 . 1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -355) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -356) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -357) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -358) (undo-tree-id379 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -359) (undo-tree-id380 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -360) (undo-tree-id381 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -361) (undo-tree-id382 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -362) (undo-tree-id383 . -1) 363 (t 25913 15536 152700 471000)) nil (25913 16015 159570 516000) 0 nil])
([nil nil ((354 . 361)) nil (25913 16015 159565 938000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -370) (undo-tree-id369 . -1) 371) nil (25913 16015 159565 687000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -362) (undo-tree-id361 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -363) (undo-tree-id362 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -364) (undo-tree-id363 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -365) (undo-tree-id364 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -366) (undo-tree-id365 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -367) (undo-tree-id366 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -368) (undo-tree-id367 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -369) (undo-tree-id368 . -1) 370) nil (25913 16015 159564 365000) 0 nil])
([nil nil ((362 . 370)) nil (25913 16015 159561 589000) 0 nil])
([nil nil ((370 . 372)) nil (25913 16015 159560 838000) 0 nil])
([nil nil ((apply yas--snippet-revive 381 389 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (44 . 57) (45 . 48) (46 . 47) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (364 . 372) (#("template" 0 8 (fontified nil)) . 364) (364 . 372) (#("template" 0 8 (fontified nil)) . 364) (364 . 372) (#("template" 0 8 (fontified t face tree-sitter-hl-face:type)) . -364) (undo-tree-id359 . -8) (undo-tree-id360 . -8) 372) nil (25913 16015 159559 736000) 0 nil])
([nil nil ((389 . 390)) nil (25913 16015 159557 652000) 0 nil])
([nil nil ((390 . 391)) nil (25913 16015 159557 402000) 0 nil])
([nil nil ((391 . 394)) nil (25913 16015 159557 111000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:type)) . -392) (undo-tree-id358 . -1) 393) nil (25913 16015 159556 740000) 0 nil])
([nil nil ((392 . 393)) nil (25913 16015 159556 229000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -401) (undo-tree-id349 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -402) (undo-tree-id350 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:string)) . -403) (undo-tree-id351 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -404) (undo-tree-id352 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -405) (undo-tree-id353 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -406) (undo-tree-id354 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:string)) . -407) (undo-tree-id355 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -408) (undo-tree-id356 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -409) (undo-tree-id357 . -1) 410) nil (25913 16015 159555 37000) 0 nil])
([nil nil ((401 . 408)) nil (25913 16015 159551 871000) 0 nil])
([nil nil ((447 . 449)) nil (25913 16015 159551 330000) 0 nil])
([nil nil ((449 . 459)) nil (25913 16015 159551 110000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -449) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -450) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -451) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -452) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -453) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -454) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -455) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -456) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#(" " 0 1 (fontified t)) . -457) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -458) (undo-tree-id347 . -1) (undo-tree-id348 . -1) 459) nil (25913 16015 159549 757000) 0 nil])
([nil nil ((nil rear-nonsticky nil 482 . 483) (nil fontified nil 449 . 483) (449 . 483) 448) nil (25913 16015 159535 170000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -449) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) 450) nil (25913 16015 159532 525000) 0 nil])
([nil nil ((#("type Enclosure struct {
	Url    string `xml:\"url,attr\"`
	Length int64  `xml:\"length,attr\"`
	Type   string `xml:\"type,attr\"`
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 14 (fontified t face tree-sitter-hl-face:type) 14 15 (fontified t) 15 21 (fontified t face tree-sitter-hl-face:keyword) 21 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 24 (fontified t) 24 25 (fontified t) 25 28 (fontified t face tree-sitter-hl-face:property) 28 32 (fontified t) 32 38 (fontified t face tree-sitter-hl-face:type) 38 39 (fontified t) 39 55 (fontified t face tree-sitter-hl-face:string) 55 56 (fontified t) 56 57 (fontified t) 57 63 (fontified t face tree-sitter-hl-face:property) 63 64 (fontified t) 64 69 (fontified t face tree-sitter-hl-face:type) 69 71 (fontified t) 71 90 (fontified t face tree-sitter-hl-face:string) 90 91 (fontified t) 91 92 (fontified t) 92 96 (fontified t face tree-sitter-hl-face:property) 96 99 (fontified t) 99 105 (fontified t face tree-sitter-hl-face:type) 105 106 (fontified t) 106 123 (fontified t face tree-sitter-hl-face:string) 123 124 (fontified t) 124 125 (fontified t face (rainbow-delimiters-depth-1-face)) 125 126 (fontified t)) . 80) (undo-tree-id711 . -124) (undo-tree-id712 . -125) (undo-tree-id713 . -124) (undo-tree-id714 . -91) (undo-tree-id715 . -25) (undo-tree-id716 . -57) (undo-tree-id717 . -92) (undo-tree-id718 . -124) (undo-tree-id719 . -124) (undo-tree-id720 . -124) (undo-tree-id721 . -124) (undo-tree-id722 . -126) (undo-tree-id723 . -124) (undo-tree-id724 . -124) (undo-tree-id725 . -124) (undo-tree-id726 . -126) (t 25913 16015 166951 801000)) nil (25913 16025 846574 782000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 79) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1)) nil (25913 16025 846568 70000) 0 nil])
([nil nil ((#("	\"fmt\"
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:string) 3 6 (fontified t face tree-sitter-hl-face:string) 6 7 (fontified t)) . 41) (undo-tree-id683 . -6) (undo-tree-id684 . -1) (undo-tree-id685 . -6) (undo-tree-id686 . 5) (undo-tree-id687 . -5) (undo-tree-id688 . -7)) nil (25913 16025 846558 522000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -703) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -704) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -705) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -706) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -707) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -708) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -709) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -710) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -711) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -712) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -713) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -714) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -715) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (#("s" 0 1 (fontified t)) . -716) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#("p" 0 1 (fontified t)) . -717) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("." 0 1 (fontified t)) . -718) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:type)) . -719) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -720) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -721) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -722) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -723) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . 1) (undo-tree-id1014 . -1) 724 (t 25913 16025 848907 786000)) nil (25913 16403 143609 127000) 0 nil])
([nil nil ((703 . 710)) nil (25913 16403 143269 831000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) #s(yas--field 2 726 731 nil nil nil nil nil)) nil 14 nil #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil nil)) (703 . 732) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 703) (703 . 742) (#("Unmarsh" 0 7 (fontified nil)) . 703) (703 . 710) (#("Unmarshal" 0 9 (fontified nil)) . -703) (703 . 712) (#("Unmarsh" 0 7 (fontified t face tree-sitter-hl-face:property)) . -703) (undo-tree-id885 . -7) (undo-tree-id886 . -7) 710) nil (25913 16403 143269 370000) 0 nil])
([nil nil ((714 . 718) (#("data []byte" 0 4 (fontified nil face tree-sitter-hl-face:type) 4 5 (fontified nil) 5 6 (fontified nil face (rainbow-delimiters-depth-3-face)) 6 7 (fontified nil face (rainbow-delimiters-depth-3-face)) 7 11 (fontified nil face tree-sitter-hl-face:type)) . 714) (713 . 714)) nil (25913 16403 143267 957000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -716) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("." 0 1 (fontified t)) . -717) (undo-tree-id883 . -1) (undo-tree-id884 . -1) 718) nil (25913 16403 143267 316000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -713) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -714) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -715) (undo-tree-id879 . -1) (undo-tree-id880 . -1) 716) nil (25913 16403 143265 803000) 0 nil])
([nil nil ((713 . 718)) nil (25913 16403 143263 268000) 0 nil])
([nil nil ((apply yas--snippet-revive 718 722 #s(yas--snippet nil nil nil 15 nil nil #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil)) (718 . 722) (#("Body" 0 4 (fontified nil)) . 718) (718 . 722) (#("Body" 0 4 (fontified nil)) . -718) (718 . 722)) nil (25913 16403 143262 767000) 0 nil])
([nil nil ((722 . 723)) nil (25913 16403 143262 66000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 728 736 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 728 736 nil nil nil nil nil) #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil)) (723 . 737) (#("Read(${1:p []byte})" 0 19 (fontified nil)) . 723) (723 . 742) (#("Read" 0 4 (fontified nil)) . -723) (723 . 727)) nil (25913 16403 143261 545000) 0 nil])
([nil nil ((apply yas--snippet-revive 723 737 #s(yas--snippet nil (#s(yas--field 1 728 736 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 728 736 nil nil nil nil nil) #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil))) nil (25913 16403 143260 744000) 0 nil])
([nil nil ((apply yas--snippet-revive 703 745 #s(yas--snippet nil (#s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) #s(yas--field 2 726 731 nil nil nil nil nil)) nil 14 nil #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil nil))) nil (25913 16403 143260 473000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -716) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("." 0 1 (fontified t)) . -717) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -718) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -719) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -720) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -721) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("." 0 1 (fontified t)) . -722) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -723) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -724) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -725) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -726) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -727) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -728) (undo-tree-id854 . 1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (#(" " 0 1 (fontified t)) . -729) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -730) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -731) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -732) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -733) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -734) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -735) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -736) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . 1) (undo-tree-id874 . -1) 737) nil (25913 16403 143257 978000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -713) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -714) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -715) (undo-tree-id828 . -1) (undo-tree-id829 . -1) 716) nil (25913 16403 143242 79000) 0 nil])
([nil nil ((#("  defer resp.Body.Close()
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t) 8 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t) 18 23 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t)) . 661) (undo-tree-id814 . -25) (undo-tree-id815 . 1) (undo-tree-id816 . -25) (undo-tree-id817 . -24) (undo-tree-id818 . -25) (undo-tree-id819 . -25) (undo-tree-id820 . 2) (undo-tree-id821 . -25) (undo-tree-id822 . 3) (undo-tree-id823 . -24) 685) nil (25913 16403 143240 185000) 0 nil])
([nil nil ((661 . 687)) nil (25913 16403 143237 59000) 0 nil])
([nil nil ((713 . 716)) nil (25913 16403 143236 839000) 0 nil])
([nil nil ((716 . 737)) nil (25913 16403 143236 588000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) #s(yas--field 2 726 731 nil nil nil nil nil)) nil 14 nil #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil nil))) nil (25913 16403 143236 378000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 728 736 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 728 736 nil nil nil nil nil) #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil))) nil (25913 16403 143236 147000) 0 nil])
([nil nil ((#("Read" 0 4 (fontified nil)) . 723) (723 . 727) (#("Read(${1:p []byte})" 0 19 (fontified nil)) . 723) (723 . 742) (#("Read(p []byte)" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t face tree-sitter-hl-face:type) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 9 (fontified t face (rainbow-delimiters-depth-4-face)) 9 10 (fontified t face tree-sitter-hl-face:type) 10 11 (fontified t face tree-sitter-hl-face:type) 11 12 (fontified t face tree-sitter-hl-face:type) 12 13 (fontified t face tree-sitter-hl-face:type) 13 14 (fontified t face (rainbow-delimiters-depth-3-face))) . 723) (undo-tree-id805 . -5) (undo-tree-id806 . -14) (undo-tree-id807 . -14) (undo-tree-id808 . -5) (undo-tree-id809 . -8) (undo-tree-id810 . -9) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (apply yas--snippet-revive 723 737 #s(yas--snippet nil (#s(yas--field 1 728 736 nil nil nil nil nil)) nil 16 nil #s(yas--field 1 728 736 nil nil nil nil nil) #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil))) nil (25913 16403 143235 526000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 722) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1)) nil (25913 16403 143232 190000) 0 nil])
([nil nil ((#("Body" 0 4 (fontified nil)) . 718) (718 . 722) (#("Body" 0 4 (fontified nil)) . 718) (718 . 722) (#("Body" 0 1 (fontified t face tree-sitter-hl-face:property) 1 2 (fontified t face tree-sitter-hl-face:property) 2 3 (fontified t face tree-sitter-hl-face:property) 3 4 (fontified t face tree-sitter-hl-face:property)) . 718) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4)) nil (25913 16403 143229 926000) 0 nil])
([nil nil ((#("resp." 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t)) . 713) (undo-tree-id783 . -3) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5)) nil (25913 16403 143227 441000) 0 nil])
([nil nil ((713 . 716)) nil (25913 16403 143223 904000) 0 nil])
([nil nil ((716 . 718)) nil (25913 16403 143223 604000) 0 nil])
([nil nil ((#("R" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . 713) (undo-tree-id780 . 1) (undo-tree-id781 . -1) (undo-tree-id782 . 1) (714 . 725) (#("esp." 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t)) . 714)) nil (25913 16403 143223 163000) 0 nil])
([nil nil ((703 . 710) (#("Unmarshal" 0 9 (fontified nil)) . 703) (703 . 712) (#("Unmarsh" 0 7 (fontified nil)) . 703) (703 . 710) (#("Unmarshal(${1:data []byte}, ${2:v any})" 0 39 (fontified nil)) . 703) (703 . 742) (#("Unmarshal(data []byte, v any)" 0 9 (fontified t face tree-sitter-hl-face:type) 9 10 (fontified t face (rainbow-delimiters-depth-2-face)) 10 14 (fontified t face tree-sitter-hl-face:type) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 21 (fontified t face tree-sitter-hl-face:type) 21 23 (fontified t) 23 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 28 (fontified t face tree-sitter-hl-face:type) 28 29 (fontified t face (rainbow-delimiters-depth-2-face))) . 703) (undo-tree-id766 . -10) (undo-tree-id767 . -10) (undo-tree-id768 . -7) (undo-tree-id769 . -7) (undo-tree-id770 . -10) (undo-tree-id771 . -10) (undo-tree-id772 . -10) (undo-tree-id773 . -10) (undo-tree-id774 . -10) (undo-tree-id775 . -10) (undo-tree-id776 . -10) (undo-tree-id777 . -10) (undo-tree-id778 . -10) (undo-tree-id779 . -10) (apply yas--snippet-revive 703 732 #s(yas--snippet nil (#s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) #s(yas--field 2 726 731 nil nil nil nil nil)) nil 14 nil #s(yas--field 1 713 713 nil nil nil t #s(yas--field 2 726 731 nil nil nil nil nil)) nil nil))) nil (25913 16403 143220 708000) 0 nil])
([nil nil ((#("Unmarsh" 0 7 (fontified t face tree-sitter-hl-face:property)) . 703) (undo-tree-id762 . -6) (undo-tree-id763 . -7) (undo-tree-id764 . -6) (undo-tree-id765 . -6)) nil (25913 16403 143215 909000) 0 nil])
([nil nil ((703 . 724)) nil (25913 16403 143213 856000) 0 nil])
([nil nil ((#("  defer resp.Body.Close()
" 0 2 (fontified t) 2 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t) 8 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t) 18 23 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t)) . 661) (undo-tree-id727 . -25) (undo-tree-id728 . -25) (undo-tree-id729 . 1) (undo-tree-id730 . -25) (undo-tree-id731 . -24) (undo-tree-id732 . -25) (undo-tree-id733 . -25) (undo-tree-id734 . -24) (undo-tree-id735 . -24) (undo-tree-id736 . -26) (undo-tree-id737 . -26) (undo-tree-id738 . -26) (undo-tree-id739 . -26) (undo-tree-id740 . -26) (undo-tree-id741 . -26) (undo-tree-id742 . -26) (undo-tree-id743 . -26) (undo-tree-id744 . -26) (undo-tree-id745 . -26) (undo-tree-id746 . 2) (undo-tree-id747 . -25) (undo-tree-id748 . 3) (undo-tree-id749 . -24) (undo-tree-id750 . -25) (undo-tree-id751 . -25) (undo-tree-id752 . -24) (undo-tree-id753 . -24) (undo-tree-id754 . -24) (undo-tree-id755 . -24) (undo-tree-id756 . -24) (undo-tree-id757 . -24) (undo-tree-id758 . -24) (undo-tree-id759 . -24) (undo-tree-id760 . -24) (undo-tree-id761 . -26) 685 (t 25913 16025 848907 786000)) nil (25913 16403 143210 940000) 0 nil])
([nil nil ((nil rear-nonsticky nil 628 . 629) (#("
" 0 1 (fontified nil)) . -675) (627 . 676) 626 (t 25913 16403 151274 62000)) nil (25913 16620 820372 522000) 0 nil])
([nil nil ((627 . 629)) nil (25913 16620 820372 102000) 0 nil])
([nil nil ((629 . 632)) nil (25913 16620 820371 861000) 0 nil])
([nil nil ((apply yas--snippet-revive 642 648 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (56 . 69) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (629 . 635) (#("ioutil" 0 6 (fontified nil)) . 629) (629 . 635) (#("iou" 0 3 (fontified nil)) . 629) (629 . 632) (#("ioutil" 0 6 (fontified nil)) . -629) (629 . 635) (#("iou" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -629) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) 632) nil (25913 16620 820371 90000) 0 nil])
([nil nil ((#("	ioutil
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t)) . 641) (undo-tree-id1054 . -7) (undo-tree-id1055 . 1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -6) 647) nil (25913 16620 820369 757000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -678) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -679) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -680) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -681) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) 682) nil (25913 16620 820368 234000) 0 nil])
([nil nil ((684 . 686)) nil (25913 16620 820365 630000) 0 nil])
([nil nil ((686 . 693)) nil (25913 16620 820365 369000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 715 722 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 715 722 nil nil nil nil nil) nil nil)) (689 . 726) (#("readErr != nil {
		return ${1:readErr}
		\\}" 0 41 (fontified nil) 41 42 (fontified nil syntax-table (9)) 42 43 (fontified nil)) . 689) (728 . 730) (706 . 708) (#("	" 0 1 (fontified nil)) . -706) (689 . 729) (#("read" 0 4 (fontified nil)) . 689) (689 . 693) (#("readErr != nil { return readErr }" 0 33 (fontified nil)) . -689) (689 . 722) (#("read" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -689) (undo-tree-id1044 . -4) (undo-tree-id1045 . -4) 693) nil (25913 16620 820364 517000) 0 nil])
([nil nil ((apply yas--snippet-revive 689 726 #s(yas--snippet nil (#s(yas--field 1 715 722 nil nil nil nil nil)) nil 18 nil #s(yas--field 1 715 722 nil nil nil nil nil) nil nil))) nil (25913 16620 820363 255000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -724) (undo-tree-id1043 . -1) 725) nil (25913 16620 820362 944000) 0 nil])
([nil nil ((#("	if err != nil {
		return err
	}
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t) 4 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 10 (fontified t face tree-sitter-hl-face:operator) 10 11 (fontified t) 11 14 (fontified t face tree-sitter-hl-face:constant\.builtin) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 19 (fontified t) 19 25 (fontified t face tree-sitter-hl-face:keyword) 25 26 (fontified t) 26 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t) 30 31 (fontified t) 31 32 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t)) . 726) (undo-tree-id1034 . -30) (undo-tree-id1035 . -32) (undo-tree-id1036 . 32) (undo-tree-id1037 . -30) (undo-tree-id1038 . -32) (undo-tree-id1039 . -33) (undo-tree-id1040 . -33) (undo-tree-id1041 . -30) (undo-tree-id1042 . -30) 756) nil (25913 16620 820362 193000) 0 nil])
([nil nil ((nil rear-nonsticky nil 641 . 642) (#("
" 0 1 (fontified nil)) . -673) (640 . 674) 613) nil (25913 16620 820358 687000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -765) (765 . 766) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -765) (765 . 766) (758 . 766)) nil (25913 16620 820358 135000) 0 nil])
([nil nil ((766 . 768) (767 . 768) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 766) (766 . 768) (765 . 767)) nil (25913 16620 820357 564000) 0 nil])
([nil nil ((768 . 772)) nil (25913 16620 820357 214000) 0 nil])
([nil nil ((772 . 774)) nil (25913 16620 820357 13000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -772) (undo-tree-id1032 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -773) (undo-tree-id1033 . -1) 774) nil (25913 16620 820356 683000) 0 nil])
([nil nil ((772 . 777)) nil (25913 16620 820355 791000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -774) (undo-tree-id1029 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -775) (undo-tree-id1030 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -776) (undo-tree-id1031 . -1) 777) nil (25913 16620 820355 30000) 0 nil])
([nil nil ((774 . 777)) nil (25913 16620 820353 677000) 0 nil])
([nil nil ((39 . 46) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 786 792 nil nil nil t #s(yas--field 2 794 798 nil nil nil t nil)) #s(yas--field 2 794 798 nil nil nil t nil)) nil 19 nil #s(yas--field 2 794 798 nil nil nil t nil) nil nil)) (772 . 803) (#("Printf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 772) (772 . 813) (#("Print" 0 5 (fontified nil)) . 772) (772 . 777) (#("Printf" 0 6 (fontified nil)) . -772) (772 . 778) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -772) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) (undo-tree-id1026 . -5) (undo-tree-id1027 . -5) (undo-tree-id1028 . -5) 777) nil (25913 16620 820352 735000) 0 nil])
([nil nil ((787 . 791) (786 . 788) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -786) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("format string" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 13 (fontified nil face tree-sitter-hl-face:variable)) . 787) (undo-tree-id1021 . -13) (undo-tree-id1022 . -7) (undo-tree-id1023 . -8) (786 . 787)) nil (25913 16620 820349 980000) 0 nil])
([nil nil ((795 . 798) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 795) (undo-tree-id1015 . -8) (undo-tree-id1016 . -5) (undo-tree-id1017 . -6) (794 . 795)) nil (25913 16620 820346 694000) 0 nil])
([nil nil ((apply yas--snippet-revive 779 799 #s(yas--snippet nil (#s(yas--field 1 786 792 nil nil nil t #s(yas--field 2 794 798 nil nil nil t nil)) #s(yas--field 2 794 798 nil nil nil t nil)) nil 19 nil #s(yas--field 2 794 798 nil nil nil t nil) nil nil))) nil (25913 16620 820332 718000) 0 nil])
([nil nil ((799 . 800)) nil (25913 16620 820329 321000) 0 nil])
([nil nil ((511 . 513) (t 25913 16620 922283 319000)) nil (25913 16837 627816 977000) 0 nil])
([nil nil ((513 . 520)) nil (25913 16837 627816 737000) 0 nil])
([nil nil ((517 . 518)) nil (25913 16837 627816 496000) 0 nil])
([nil nil ((521 . 522)) nil (25913 16837 627816 226000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -511) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("
" 0 1 (fontified t)) . -512) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -513) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -514) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -515) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -516) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#(" " 0 1 (fontified t)) . -517) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (#("X" 0 1 (fontified t face tree-sitter-hl-face:type)) . -518) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#("M" 0 1 (fontified t face tree-sitter-hl-face:type)) . -519) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:type)) . -520) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#(" " 0 1 (fontified t)) . -521) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) 522) nil (25913 16837 627814 272000) 0 nil])
([nil nil ((607 . 608)) nil (25913 16837 627774 37000) 0 nil])
([nil nil ((#("	body, readErr := ioutil.ReadAll(resp.Body)
	if readErr != nil {
		return readErr
	} else {
		fmt.Printf(\"%s\\n\", body);
	}
" 0 1 (rear-nonsticky t fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 7 (fontified t) 7 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 17 (fontified t face tree-sitter-hl-face:operator) 17 18 (fontified t) 18 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 32 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 37 (fontified t face tree-sitter-hl-face:variable) 37 38 (fontified t) 38 42 (fontified t face tree-sitter-hl-face:property) 42 43 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 43 44 (fontified t) 44 45 (fontified t) 45 47 (fontified t face tree-sitter-hl-face:keyword) 47 48 (fontified t) 48 55 (fontified t face tree-sitter-hl-face:variable) 55 56 (fontified t) 56 58 (fontified t face tree-sitter-hl-face:operator) 58 59 (fontified t) 59 62 (fontified t face tree-sitter-hl-face:constant\.builtin) 62 63 (fontified t) 63 64 (fontified t face (rainbow-delimiters-depth-2-face)) 64 67 (fontified t) 67 73 (fontified t face tree-sitter-hl-face:keyword) 73 74 (fontified t) 74 81 (fontified t face tree-sitter-hl-face:variable) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t face (rainbow-delimiters-depth-2-face)) 84 85 (fontified t) 85 89 (fontified t face tree-sitter-hl-face:keyword) 89 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-2-face)) 91 92 (fontified t) 92 94 (fontified t) 94 97 (fontified t face tree-sitter-hl-face:variable) 97 98 (fontified t) 98 104 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 104 105 (fontified t face (rainbow-delimiters-depth-3-face)) 105 108 (fontified t face tree-sitter-hl-face:string) 108 109 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 109 110 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 110 111 (fontified t face tree-sitter-hl-face:string) 111 113 (fontified t) 113 117 (fontified t face tree-sitter-hl-face:variable) 117 118 (fontified t face (rainbow-delimiters-depth-3-face)) 118 119 (fontified t) 119 120 (fontified t) 120 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-2-face)) 122 123 (fontified t)) . 682) (undo-tree-id1088 . -121) (undo-tree-id1089 . -122) (undo-tree-id1090 . 1) (undo-tree-id1091 . -121) (undo-tree-id1092 . -1) (undo-tree-id1093 . -123) (undo-tree-id1094 . -123) (undo-tree-id1095 . -123) (undo-tree-id1096 . -42) (undo-tree-id1097 . -105) (undo-tree-id1098 . -1) (undo-tree-id1099 . -122) (undo-tree-id1100 . -122) (undo-tree-id1101 . -122) (undo-tree-id1102 . -122) (undo-tree-id1103 . -122) (undo-tree-id1104 . -122) (undo-tree-id1105 . -122) (undo-tree-id1106 . -122) (undo-tree-id1107 . -122) (undo-tree-id1108 . -122) (undo-tree-id1109 . -122) (undo-tree-id1110 . -122) (undo-tree-id1111 . -122) (undo-tree-id1112 . -121) (undo-tree-id1113 . -121) (undo-tree-id1114 . -121) (undo-tree-id1115 . -121) (undo-tree-id1116 . -121) (undo-tree-id1117 . -121) (undo-tree-id1118 . -123) (undo-tree-id1119 . -1) (undo-tree-id1120 . -121) (undo-tree-id1121 . -121) (undo-tree-id1122 . -121) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -5) (undo-tree-id1127 . -113) (undo-tree-id1128 . -117) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -123) 683 (t 25913 16837 729993 342000)) nil (25913 16843 637772 37000) 0 nil])
([nil nil ((#("	\"io/ioutil\"
" 0 1 (fontified t) 1 11 (fontified t face tree-sitter-hl-face:string) 11 12 (fontified t face tree-sitter-hl-face:string) 12 13 (fontified t)) . 65) (undo-tree-id1146 . -12) (undo-tree-id1147 . -12) (undo-tree-id1148 . -12) (undo-tree-id1149 . -12) (undo-tree-id1150 . -12) (undo-tree-id1151 . -11) (undo-tree-id1152 . -12) (undo-tree-id1153 . -12) (undo-tree-id1154 . -12) (undo-tree-id1155 . -12) (undo-tree-id1156 . -1) (undo-tree-id1157 . -12) (undo-tree-id1158 . -12) (undo-tree-id1159 . -12) (undo-tree-id1160 . 11) (undo-tree-id1161 . -11) (undo-tree-id1162 . -12) (undo-tree-id1163 . -12) (undo-tree-id1164 . -12) (undo-tree-id1165 . -12) (undo-tree-id1166 . -11) (undo-tree-id1167 . -11) (undo-tree-id1168 . -11) (undo-tree-id1169 . -11) (undo-tree-id1170 . -13) 76 (t 25913 16843 646982 850000)) nil (25913 16857 731176 348000) 0 nil])
([nil current ((#("	\"fmt\"
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:string) 5 6 (fontified t face tree-sitter-hl-face:string) 6 7 (fontified t)) . 41) (undo-tree-id1133 . -6) (undo-tree-id1134 . -5) (undo-tree-id1135 . 5) (undo-tree-id1136 . -5) (undo-tree-id1137 . -5) (undo-tree-id1138 . -1) (undo-tree-id1139 . -6) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -5) (undo-tree-id1143 . -5) (undo-tree-id1144 . -5) (undo-tree-id1145 . -7) 46) nil (25913 16857 731164 215000) 0 nil])
nil
