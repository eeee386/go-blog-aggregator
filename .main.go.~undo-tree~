(undo-tree-save-format-version . 1)
"8b7e12aa63e813fd4228ee4c2107ba8e572317b8"
[nil nil nil nil (25898 20738 392779 163000) 0 nil]
([nil nil ((1 . 13) (t 25898 20703 138921 76000)) nil (25898 20738 392778 361000) 0 nil])
([nil nil ((apply yas--snippet-revive 9 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified t)) . -9) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 13) nil (25898 20738 392777 569000) 0 nil])
([nil nil ((13 . 15)) nil (25898 20738 392744 76000) 0 nil])
([nil nil ((15 . 24)) nil (25898 20738 392742 954000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -25) (25 . 26) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -25) (25 . 26) (24 . 26)) nil (25898 20738 392742 2000) 0 nil])
([nil nil ((26 . 27)) nil (25898 20738 392738 666000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -28) (28 . 29) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -28) (28 . 29) (26 . 29) (t 25898 20738 399594 753000)) nil (25898 20746 383787 365000) 0 nil])
([nil nil ((29 . 30) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 29) (29 . 30) (28 . 30)) nil (25898 20746 383783 748000) 0 nil])
([nil nil ((30 . 34) (t 25898 20746 390747 228000)) nil (25898 21392 546694 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 65 73 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (14 . 49) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (30 . 38) (#("godotenv" 0 8 (fontified nil)) . 30) (30 . 38) (#("godo" 0 4 (fontified nil)) . 30) (30 . 34) (#("godotenv" 0 8 (fontified nil)) . -30) (30 . 38) (#("godo" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -30) (undo-tree-id57 . -4) (undo-tree-id58 . -4) 34) nil (25898 21392 546694 318000) 0 nil])
([nil nil ((73 . 77)) nil (25898 21392 546692 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil)) (74 . 99) (#("Load(${1:filenames ...string})" 0 30 (fontified nil)) . 74) (74 . 104) (#("Loa" 0 3 (fontified nil)) . 74) (74 . 77) (#("Load" 0 4 (fontified nil)) . -74) (74 . 78) (#("Loa" 0 3 (face tree-sitter-hl-face:property fontified t)) . -74) (undo-tree-id55 . -3) (undo-tree-id56 . -3) 77) nil (25898 21392 546691 12000) 0 nil])
([nil nil ((apply yas--snippet-revive 74 99 #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil))) nil (25898 21392 546689 369000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -79) (undo-tree-id36 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -80) (undo-tree-id37 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -81) (undo-tree-id38 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -82) (undo-tree-id39 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -83) (undo-tree-id40 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -84) (undo-tree-id41 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -85) (undo-tree-id42 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -86) (undo-tree-id43 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -87) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -88) (undo-tree-id45 . -1) (#("." 0 1 (fontified t)) . -89) (undo-tree-id46 . -1) (#("." 0 1 (fontified t)) . -90) (undo-tree-id47 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -91) (undo-tree-id48 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -92) (undo-tree-id49 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -93) (undo-tree-id50 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -94) (undo-tree-id51 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -95) (undo-tree-id52 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -96) (undo-tree-id53 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -97) (undo-tree-id54 . -1) 98) nil (25898 21392 546686 584000) 0 nil])
([nil nil ((80 . 82)) nil (25898 21392 546680 502000) 0 nil])
([nil nil ((82 . 88)) nil (25898 21392 546680 81000) 0 nil])
([nil nil ((22 . 32) (48 . 50) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil)) (85 . 103) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 85) (85 . 108) (#("Get" 0 3 (fontified nil)) . 85) (85 . 88) (#("Getenv" 0 6 (fontified nil)) . -85) (85 . 91) (#("Get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -85) (undo-tree-id34 . -3) (undo-tree-id35 . -3) 88) nil (25898 21392 546679 69000) 0 nil])
([nil nil ((105 . 109) (104 . 106) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -104) (#("key string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 105) (104 . 105)) nil (25898 21392 546676 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 97 111 #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil))) nil (25898 21392 546675 934000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (undo-tree-id33 . -1) (111 . 114)) nil (25898 21392 546675 322000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (112 . 113) (112 . 113)) nil (25898 21392 546674 491000) 0 nil])
([nil nil ((114 . 126)) nil (25898 21392 546673 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 151 160 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (30 . 58) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (123 . 132) (#("NewRouter" 0 9 (fontified nil)) . 123) (123 . 132) (#("New" 0 3 (fontified nil)) . 123) (123 . 126) (#("NewRouter" 0 9 (fontified nil)) . -123) (123 . 132) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -123) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 126) nil (25898 21392 546672 347000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -161) (161 . 162) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -161) (161 . 162) (160 . 162)) nil (25898 21392 546670 483000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -170) (170 . 171) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -170) (170 . 171) (164 . 171)) nil (25898 21392 546669 852000) 0 nil])
([nil nil ((170 . 175)) nil (25898 21392 546669 421000) 0 nil])
([nil nil ((apply yas--snippet-revive 201 208 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (57 . 83) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (175 . 182) (#("Handler" 0 7 (fontified nil)) . 175) (175 . 182) (#("Handler" 0 7 (fontified nil)) . -175) (175 . 182)) nil (25898 21392 546668 930000) 0 nil])
([nil nil ((#("u" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -192) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 193) nil (25898 21392 546667 758000) 0 nil])
([nil nil ((192 . 193)) nil (25898 21392 546666 756000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -209) (209 . 210) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -209) (209 . 210) (208 . 210)) nil (25898 21392 546666 436000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -210) (210 . 211) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -210) (210 . 211) (209 . 211)) nil (25898 21392 546665 714000) 0 nil])
([nil nil ((209 . 216)) nil (25898 21392 546665 233000) 0 nil])
([nil nil ((209 . 214)) nil (25898 21392 546665 53000) 0 nil])
([nil nil ((223 . 225) (224 . 225) (#("		" 0 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 223) (223 . 225) (222 . 224)) nil (25898 21392 546664 752000) 0 nil])
([nil nil ((225 . 228)) nil (25898 21392 546664 211000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -227) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 228) nil (25898 21392 546663 811000) 0 nil])
([nil nil ((227 . 229)) nil (25898 21392 546663 59000) 0 nil])
([nil nil ((229 . 230)) nil (25898 21392 546662 809000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil)) (225 . 250) (#("AllowedOrigins: ${1:[]string}," 0 30 (fontified nil)) . 225) (225 . 255) (#("Allow" 0 5 (fontified nil)) . 225) (225 . 230) (#("AllowedOrigins" 0 14 (fontified nil)) . -225) (225 . 239) (#("Allow" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -225) (undo-tree-id25 . -5) (undo-tree-id26 . -5) 230) nil (25898 21392 546662 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 225 250 #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil))) nil (25898 21392 546660 595000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -250) (250 . 251) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -250) (250 . 251) (249 . 251)) nil (25898 21392 546660 224000) 0 nil])
([nil nil ((251 . 256) (250 . 252) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -250) (250 . 251)) nil (25898 21392 546659 663000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -251) (undo-tree-id20 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -252) (undo-tree-id21 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -253) (undo-tree-id22 . -1) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -254) (undo-tree-id23 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -255) (undo-tree-id24 . -1) 256) nil (25898 21392 546658 821000) 0 nil])
([nil nil ((251 . 252)) nil (25898 21392 546657 188000) 0 nil])
([nil nil ((255 . 258)) nil (25898 21392 546656 868000) 0 nil])
([nil nil ((258 . 264)) nil (25898 21392 546656 517000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil)) (258 . 283) (#("AllowedMethods: ${1:[]string}," 0 30 (fontified nil)) . 258) (258 . 288) (#("Allowe" 0 6 (fontified nil)) . 258) (258 . 264) (#("AllowedMethods" 0 14 (fontified nil)) . -258) (258 . 272) (#("Allowe" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -258) (undo-tree-id18 . -6) (undo-tree-id19 . -6) 264) nil (25898 21392 546655 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 258 283 #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil))) nil (25898 21392 546654 112000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -283) (283 . 284) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -283) (283 . 284) (282 . 284)) nil (25898 21392 546653 621000) 0 nil])
([nil nil ((284 . 287) (283 . 285) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -283) (283 . 284)) nil (25898 21392 546652 720000) 0 nil])
([nil nil ((287 . 288)) nil (25898 21392 546652 89000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -283) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("G" 0 1 (fontified t)) . -284) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("e" 0 1 (fontified t)) . -285) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("t" 0 1 (fontified t)) . -286) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t)) . -287) (undo-tree-id16 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -288) (undo-tree-id17 . -1) 289) nil (25898 21392 546651 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 315 . 316) (nil fontified nil 283 . 316) (283 . 316) 282) nil (25898 21392 546646 217000) 0 nil])
([nil nil ((318 . 321)) nil (25898 21392 546645 496000) 0 nil])
([nil nil ((321 . 327)) nil (25898 21392 546645 226000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil)) (321 . 346) (#("AllowedHeaders: ${1:[]string}," 0 30 (fontified nil)) . 321) (321 . 351) (#("Allowe" 0 6 (fontified nil)) . 321) (321 . 327) (#("AllowedHeaders" 0 14 (fontified nil)) . -321) (321 . 335) (#("Allowe" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id2 . -6) (undo-tree-id3 . -6) 327) nil (25898 21392 546644 554000) 0 nil])
([nil nil ((apply yas--snippet-revive 321 346 #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil))) nil (25898 21392 546634 796000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -346) (346 . 347) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -346) (346 . 347) (345 . 347)) nil (25898 21392 546634 235000) 0 nil])
([nil nil ((347 . 348) (346 . 348) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -346) (346 . 347)) nil (25898 21392 546630 77000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (fontified nil)) . 357) (undo-tree-id93 . -1) (356 . 359) (t 25898 21392 647554 294000)) nil (25898 21474 84134 578000) 0 nil])
([nil nil ((359 . 378)) nil (25898 21474 84133 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 375 386 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (375 . 386) (#("NewRouter()" 0 11 (fontified nil)) . 375) (375 . 386) (#("New" 0 3 (fontified nil)) . 375) (375 . 378) (#("NewRouter" 0 9 (fontified nil)) . -375) (375 . 384) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -375) (undo-tree-id91 . -3) (undo-tree-id92 . -3) 378) nil (25898 21474 84133 135000) 0 nil])
([nil nil ((388 . 389) (#("	" 0 1 (fontified nil)) . 387) (undo-tree-id90 . -1) (386 . 389)) nil (25898 21474 84131 943000) 0 nil])
([nil nil ((387 . 388)) nil (25898 21474 84131 312000) 0 nil])
([nil nil ((388 . 391)) nil (25898 21474 84130 991000) 0 nil])
([nil nil ((apply yas--snippet-revive 388 396 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (388 . 396) (#("v1Router" 0 8 (fontified nil)) . 388) (388 . 396) (#("v1R" 0 3 (fontified nil)) . 388) (388 . 391) (#("v1Router" 0 8 (fontified nil)) . -388) (388 . 396) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -388) (undo-tree-id88 . -3) (undo-tree-id89 . -3) 391) nil (25898 21474 84130 39000) 0 nil])
([nil nil ((396 . 397)) nil (25898 21474 84127 304000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -388) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -389) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -390) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -391) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -392) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -393) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -394) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -395) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("." 0 1 (fontified t)) . -396) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 397) nil (25898 21474 84125 611000) 0 nil])
([nil nil ((388 . 393)) nil (25898 21474 84119 339000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil)) (390 . 433) (#("Mount(${1:pattern string}, ${2:handler http.Handler})" 0 53 (fontified nil)) . 390) (390 . 443) (#("Mou" 0 3 (fontified nil)) . 390) (390 . 393) (#("Mount" 0 5 (fontified nil)) . -390) (390 . 395) (#("Mou" 0 3 (face tree-sitter-hl-face:property fontified t)) . -390) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 393) nil (25898 21474 84118 457000) 0 nil])
([nil nil ((397 . 399) (396 . 398) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -396) (undo-tree-id66 . -1) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 397) (undo-tree-id67 . -14) (396 . 397)) nil (25898 21474 84116 894000) 0 nil])
([nil nil ((397 . 398)) nil (25898 21474 84115 41000) 0 nil])
([nil nil ((404 . 406) (#("handler http.Handler" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 12 (face tree-sitter-hl-face:variable fontified nil) 12 13 (fontified nil) 13 20 (face tree-sitter-hl-face:property fontified nil)) . 404) (undo-tree-id65 . -20) (403 . 404)) nil (25898 21474 84114 79000) 0 nil])
([nil nil ((apply yas--snippet-revive 403 411 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (403 . 411) (#("v1Router" 0 8 (fontified nil)) . 403) (undo-tree-id59 . -8) (403 . 411) (#("v1R" 0 3 (fontified nil)) . 403) (undo-tree-id60 . -3) (403 . 406) (#("v1Router" 0 8 (fontified nil)) . -403) (undo-tree-id61 . -8) (403 . 411) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -403) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) 406) nil (25898 21474 84111 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 390 412 #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil))) nil (25898 21474 84097 869000) 0 nil])
([nil nil ((414 . 415) (#("	" 0 1 (fontified nil)) . 413) (undo-tree-id181 . -1) (412 . 415) (t 25898 21474 184219 527000)) nil (25898 21522 266535 715000) 0 nil])
([nil nil ((415 . 424)) nil (25898 21522 266534 382000) 0 nil])
([nil nil ((23 . 35) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil)) (420 . 469) (#("ListenAndServe(${1:addr string}, ${2:handler http.Handler})" 0 59 (fontified nil)) . 420) (420 . 479) (#("List" 0 4 (fontified nil)) . 420) (420 . 424) (#("ListenAndServe" 0 14 (fontified nil)) . -420) (420 . 434) (#("List" 0 4 (face tree-sitter-hl-face:property fontified t)) . -420) (undo-tree-id179 . -4) (undo-tree-id180 . -4) 424) nil (25898 21522 266533 390000) 0 nil])
([nil nil ((448 . 451) (#("addr string" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 11 (face tree-sitter-hl-face:variable fontified nil)) . 448) (447 . 448)) nil (25898 21522 266531 236000) 0 nil])
([nil nil ((apply yas--snippet-revive 432 474 #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil))) nil (25898 21522 266530 455000) 0 nil])
([nil nil ((160 . 168)) nil (25898 21522 266529 783000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -461) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -462) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -463) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -464) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -465) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -466) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -467) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -468) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -469) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -470) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -471) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -472) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("." 0 1 (fontified t)) . -473) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("H" 0 1 (face tree-sitter-hl-face:property fontified t)) . -474) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -475) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -476) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -477) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -478) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -479) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -480) (undo-tree-id178 . -1) 481) nil (25898 21522 266526 607000) 0 nil])
([nil nil ((461 . 462)) nil (25898 21522 266408 594000) 0 nil])
([nil nil ((435 . 442) (t 25898 21522 365657 812000)) nil (25898 21547 141543 517000) 0 nil])
([nil nil ((472 . 480)) nil (25898 21547 141542 905000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -478) (undo-tree-id200 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -479) (undo-tree-id201 . -1) 480) nil (25898 21547 141542 194000) 0 nil])
([nil nil ((478 . 480)) nil (25898 21547 141540 421000) 0 nil])
([nil nil ((23 . 30) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil)) (476 . 493) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 476) (476 . 498) (#("Prin" 0 4 (fontified nil)) . 476) (476 . 480) (#("Println" 0 7 (fontified nil)) . -476) (476 . 483) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -476) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -3) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) 480) nil (25898 21547 141539 409000) 0 nil])
([nil nil ((492 . 494) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 492) (undo-tree-id182 . -8) (undo-tree-id183 . -5) (undo-tree-id184 . -6) (491 . 492)) nil (25898 21547 141532 626000) 0 nil])
([nil nil ((apply yas--snippet-revive 483 495 #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil))) nil (25898 21547 141521 325000) 0 nil])
([nil nil ((441 . 442) (#("	" 0 1 (fontified nil)) . 440) (undo-tree-id288 . -1) (439 . 442) (t 25898 21547 186894 265000)) nil (25898 41465 951032 483000) 0 nil])
([nil nil ((442 . 445)) nil (25898 41465 951031 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 442 450 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (442 . 450) (#("v1Router" 0 8 (fontified nil)) . 442) (442 . 450) (#("v1R" 0 3 (fontified nil)) . 442) (442 . 445) (#("v1Router" 0 8 (fontified nil)) . -442) (442 . 450) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -442) (undo-tree-id286 . -3) (undo-tree-id287 . -3) 445) nil (25898 41465 951030 289000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -455) (455 . 456) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -455) (455 . 456) (450 . 456)) nil (25898 41465 951027 854000) 0 nil])
([nil nil ((455 . 457) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -455) (455 . 456)) nil (25898 41465 951026 351000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -450) (undo-tree-id285 . -1) 451) nil (25898 41465 951025 429000) 0 nil])
([nil nil ((450 . 451)) nil (25898 41465 951024 548000) 0 nil])
([nil nil ((456 . 466)) nil (25898 41465 951024 117000) 0 nil])
([nil nil ((467 . 469)) nil (25898 41465 951023 666000) 0 nil])
([nil nil ((133 . 135)) nil (25898 41465 951023 275000) 0 nil])
([nil nil ((135 . 149)) nil (25898 41465 951022 654000) 0 nil])
([nil nil ((#("c" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -143) (undo-tree-id284 . -1) 144) nil (25898 41465 951021 973000) 0 nil])
([nil nil ((143 . 144)) nil (25898 41465 951020 951000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -157) (157 . 158) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -157) (157 . 158) (149 . 158)) nil (25898 41465 951020 260000) 0 nil])
([nil nil ((157 . 169)) nil (25898 41465 951019 558000) 0 nil])
([nil nil ((apply yas--snippet-revive 164 178 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (164 . 178) (#("ResponseWriter" 0 14 (fontified nil)) . 164) (164 . 178) (#("Respo" 0 5 (fontified nil)) . 164) (164 . 169) (#("ResponseWriter" 0 14 (fontified nil)) . -164) (164 . 178) (#("Respo" 0 5 (face tree-sitter-hl-face:type fontified t)) . -164) (undo-tree-id282 . -5) (undo-tree-id283 . -5) 169) nil (25898 41465 951018 617000) 0 nil])
([nil nil ((178 . 188)) nil (25898 41465 951016 573000) 0 nil])
([nil nil ((188 . 191)) nil (25898 41465 951016 172000) 0 nil])
([nil nil ((apply yas--snippet-revive 188 195 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (188 . 195) (#("Request" 0 7 (fontified nil)) . 188) (188 . 195) (#("Req" 0 3 (fontified nil)) . 188) (188 . 191) (#("Request" 0 7 (fontified nil)) . -188) (188 . 195) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -188) (undo-tree-id280 . -3) (undo-tree-id281 . -3) 191) nil (25898 41465 951015 280000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -198) (198 . 199) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -198) (198 . 199) (196 . 199)) nil (25898 41465 951013 16000) 0 nil])
([nil nil ((199 . 200) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 199) (199 . 200) (198 . 200)) nil (25898 41465 951012 134000) 0 nil])
([nil nil ((200 . 206)) nil (25898 41465 951010 952000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 249 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (28 . 53) (29 . 32) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . 206) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . -206) (206 . 221)) nil (25898 41465 951010 371000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -250) (250 . 251) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -250) (250 . 251) (249 . 251)) nil (25898 41465 951008 928000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -246) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("O" 0 1 (face tree-sitter-hl-face:property fontified t)) . -247) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -248) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -249) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . 1) (undo-tree-id275 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -250) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . 1) (undo-tree-id279 . -1) 251) nil (25898 41465 951007 295000) 0 nil])
([nil nil ((246 . 247)) nil (25898 41465 951001 524000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil)) (234 . 303) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 234) (234 . 319) (#("RespondWithJS" 0 13 (fontified nil)) . 234) (234 . 247) (#("RespondWithJSON" 0 15 (fontified nil)) . -234) (234 . 249) (#("RespondWithJS" 0 13 (face tree-sitter-hl-face:property fontified t)) . -234) (undo-tree-id263 . -13) (undo-tree-id264 . -13) 247) nil (25898 41465 951000 462000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 251) (250 . 251)) nil (25898 41465 950998 449000) 0 nil])
([nil nil ((254 . 256) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 254) (253 . 254)) nil (25898 41465 950997 928000) 0 nil])
([nil nil ((259 . 263) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 259) (258 . 259)) nil (25898 41465 950997 196000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -262) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 263) nil (25898 41465 950996 64000) 0 nil])
([nil nil ((262 . 263)) nil (25898 41465 950994 852000) 0 nil])
([nil nil ((#("J" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -258) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -259) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -260) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("N" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -261) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("." 0 1 (fontified t)) . -262) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 263) nil (25898 41465 950993 700000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 259 #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil))) nil (25898 41465 950989 221000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -259) (259 . 260) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -259) (259 . 260) (258 . 260)) nil (25898 41465 950988 390000) 0 nil])
([nil nil ((259 . 263)) nil (25898 41465 950987 197000) 0 nil])
([nil nil ((268 . 270) (267 . 269) (#("\"" 0 1 (fontified nil)) . -267) (263 . 268)) nil (25898 41465 950986 576000) 0 nil])
([nil nil ((258 . 263)) nil (25898 41465 950985 514000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -260) (undo-tree-id248 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -261) (undo-tree-id249 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -262) (undo-tree-id250 . -1) 263) nil (25898 41465 950984 693000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -265) (265 . 266) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -265) (265 . 266) (260 . 266)) nil (25898 41465 950981 977000) 0 nil])
([nil nil ((265 . 273)) nil (25898 41465 950981 26000) 0 nil])
([nil nil ((273 . 274)) nil (25898 41465 950980 334000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -271) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -272) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -273) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 274) nil (25898 41465 950978 711000) 0 nil])
([nil nil ((271 . 278)) nil (25898 41465 950949 706000) 0 nil])
([nil nil ((296 . 298) (t 25898 41465 958631 179000)) nil (25898 41664 498108 753000) 0 nil])
([nil nil ((298 . 315)) nil (25898 41664 498108 272000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -316) (316 . 317) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -316) (316 . 317) (315 . 317)) nil (25898 41664 498107 671000) 0 nil])
([nil nil ((316 . 326)) nil (25898 41664 498106 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 323 337 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (323 . 337) (#("ResponseWriter" 0 14 (fontified nil)) . 323) (323 . 337) (#("Res" 0 3 (fontified nil)) . 323) (323 . 326) (#("ResponseWriter" 0 14 (fontified nil)) . -323) (323 . 337) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -323) (undo-tree-id682 . -3) (undo-tree-id683 . -3) 326) nil (25898 41664 498105 837000) 0 nil])
([nil nil ((337 . 341)) nil (25898 41664 498104 144000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -340) (undo-tree-id681 . -1) 341) nil (25898 41664 498103 493000) 0 nil])
([nil nil ((340 . 342)) nil (25898 41664 498102 571000) 0 nil])
([nil nil ((342 . 352)) nil (25898 41664 498102 50000) 0 nil])
([nil nil ((apply yas--snippet-revive 347 354 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (347 . 354) (#("Request" 0 7 (fontified nil)) . 347) (347 . 354) (#("Reque" 0 5 (fontified nil)) . 347) (347 . 352) (#("Request" 0 7 (fontified nil)) . -347) (347 . 354) (#("Reque" 0 5 (face tree-sitter-hl-face:type fontified t)) . -347) (undo-tree-id679 . -5) (undo-tree-id680 . -5) 352) nil (25898 41664 498101 329000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -357) (357 . 358) (#("}" 0 1 (fontified nil)) . -357) (357 . 358) (355 . 358)) nil (25898 41664 498098 603000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 358) (358 . 359) (357 . 359)) nil (25898 41664 498097 501000) 0 nil])
([nil nil ((359 . 365)) nil (25898 41664 498096 540000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil)) (365 . 426) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 365) (365 . 441) (#("RespondWithError" 0 16 (fontified nil)) . -365) (365 . 381)) nil (25898 41664 498095 989000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 383) (382 . 383)) nil (25898 41664 498095 327000) 0 nil])
([nil nil ((386 . 388) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 386) (385 . 386)) nil (25898 41664 498094 616000) 0 nil])
([nil nil ((391 . 397) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 391) (390 . 391)) nil (25898 41664 498093 624000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -398) (398 . 399) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -398) (398 . 399) (397 . 399)) nil (25898 41664 498092 943000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -394) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 395) nil (25898 41664 498091 660000) 0 nil])
([nil nil ((397 . 409)) nil (25898 41664 498090 909000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -411) (411 . 412) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -411) (411 . 412) (410 . 412)) nil (25898 41664 498090 408000) 0 nil])
([nil nil ((419 . 432) (418 . 420) (#("\"" 0 1 (fontified nil)) . -418) (411 . 419)) nil (25898 41664 498089 456000) 0 nil])
([nil nil ((432 . 440)) nil (25898 41664 498088 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 365 443 #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil))) nil (25898 41664 498088 13000) 0 nil])
([nil nil ((396 . 397)) nil (25898 41664 498087 492000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -396) (undo-tree-id676 . -1) 397) nil (25898 41664 498086 671000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -397) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -398) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -399) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -400) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -401) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#(" " 0 1 (fontified t)) . -402) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -403) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -404) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -405) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -406) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -407) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -408) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -409) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -410) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -411) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -412) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -413) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -414) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -415) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#(":" 0 1 (fontified t)) . -416) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id675 . -1) 418) nil (25898 41664 498081 782000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -390) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -391) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -392) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -393) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -394) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("t" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -395) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -396) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 397) nil (25898 41664 498003 664000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -413) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . 1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 414) nil (25898 41664 497755 54000) 0 nil])
([nil nil ((752 . 755) (t 25898 41664 505415 95000)) nil (25898 41707 859889 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 752 768 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (752 . 768) (#("readinessHandler" 0 16 (fontified nil)) . 752) (752 . 768) (#("rea" 0 3 (fontified nil)) . 752) (752 . 755) (#("readinessHandler" 0 16 (fontified nil)) . -752) (752 . 768) (#("rea" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -752) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 755) nil (25898 41707 859887 878000) 0 nil])
([nil nil ((769 . 771)) nil (25898 41707 859885 193000) 0 nil])
([nil nil ((771 . 774)) nil (25898 41707 859884 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 771 779 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (771 . 779) (#("v1Router" 0 8 (fontified nil)) . 771) (771 . 779) (#("v1R" 0 3 (fontified nil)) . 771) (771 . 774) (#("v1Router" 0 8 (fontified nil)) . -771) (771 . 779) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -771) (undo-tree-id700 . -3) (undo-tree-id701 . -3) 774) nil (25898 41707 859883 510000) 0 nil])
([nil nil ((779 . 780)) nil (25898 41707 859880 624000) 0 nil])
([nil nil ((780 . 781)) nil (25898 41707 859879 953000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -784) (784 . 785) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -784) (784 . 785) (781 . 785)) nil (25898 41707 859878 951000) 0 nil])
([nil nil ((785 . 789) (784 . 786) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -784) (784 . 785)) nil (25898 41707 859877 358000) 0 nil])
([nil nil ((790 . 797)) nil (25898 41707 859875 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 792 804 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (792 . 804) (#("errorHandler" 0 12 (fontified nil)) . 792) (792 . 804) (#("error" 0 5 (fontified nil)) . 792) (792 . 797) (#("errorHandler" 0 12 (fontified nil)) . -792) (792 . 804) (#("error" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -792) (undo-tree-id684 . -5) (undo-tree-id685 . -5) (undo-tree-id686 . -2) (undo-tree-id687 . -3) (undo-tree-id688 . -4) (undo-tree-id689 . -5) (undo-tree-id690 . -5) (undo-tree-id691 . -5) (undo-tree-id692 . -5) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -5) (undo-tree-id696 . -5) (undo-tree-id697 . -5) (undo-tree-id698 . -5) (undo-tree-id699 . -5) 797) nil (25898 41707 859872 469000) 0 nil])
([nil nil ((475 . 477) (t 25898 41707 867817 8000)) nil (25898 41855 150390 421000) 0 nil])
([nil nil ((477 . 481)) nil (25898 41855 150390 121000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -477) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -478) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -479) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -480) (undo-tree-id756 . -1) (undo-tree-id757 . -1) 481) nil (25898 41855 150389 419000) 0 nil])
([nil nil ((454 . 457)) nil (25898 41855 150385 702000) 0 nil])
([nil nil ((480 . 490)) nil (25898 41855 150385 211000) 0 nil])
([nil nil ((490 . 496)) nil (25898 41855 150384 680000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -494) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -495) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 496) nil (25898 41855 150384 129000) 0 nil])
([nil nil ((494 . 504)) nil (25898 41855 150382 206000) 0 nil])
([nil nil ((75 . 86) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil)) (501 . 515) (#("Atoi(${1:s string})" 0 19 (fontified nil)) . 501) (501 . 520) (#("Ato" 0 3 (fontified nil)) . 501) (501 . 504) (#("Atoi" 0 4 (fontified nil)) . -501) (501 . 505) (#("Ato" 0 3 (face tree-sitter-hl-face:property fontified t)) . -501) (undo-tree-id744 . -3) (undo-tree-id745 . -3) 504) nil (25898 41855 150381 344000) 0 nil])
([nil nil ((518 . 521) (#("s string" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 8 (face tree-sitter-hl-face:variable fontified nil)) . 518) (517 . 518)) nil (25898 41855 150379 70000) 0 nil])
([nil nil ((apply yas--snippet-revive 517 524 #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (517 . 524) (#("portStr" 0 7 (fontified nil)) . 517) (517 . 524) (#("port" 0 4 (fontified nil)) . 517) (517 . 521) (#("portStr" 0 7 (fontified nil)) . -517) (517 . 524) (#("port" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -517) (undo-tree-id742 . -4) (undo-tree-id743 . -4) 521) nil (25898 41855 150378 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 512 525 #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil))) nil (25898 41855 150376 174000) 0 nil])
([nil nil ((525 . 527)) nil (25898 41855 150375 884000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -530) (530 . 531) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -530) (530 . 531) (527 . 531)) nil (25898 41855 150374 882000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -529) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . 1) (undo-tree-id738 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -530) (undo-tree-id739 . -1) (undo-tree-id740 . 1) (undo-tree-id741 . -1) 531) nil (25898 41855 150374 60000) 0 nil])
([nil nil ((529 . 541)) nil (25898 41855 150370 944000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -542) (542 . 543) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -542) (542 . 543) (541 . 543)) nil (25898 41855 150370 233000) 0 nil])
([nil nil ((543 . 545) (544 . 545) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 543) (543 . 545) (542 . 544)) nil (25898 41855 150369 41000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150367 999000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -545) (undo-tree-id728 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -546) (undo-tree-id729 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -547) (undo-tree-id730 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -548) (undo-tree-id731 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -549) (undo-tree-id732 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -550) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t)) . -551) (undo-tree-id734 . -1) 552) nil (25898 41855 150366 857000) 0 nil])
([nil nil ((545 . 551)) nil (25898 41855 150363 290000) 0 nil])
([nil nil ((542 . 545)) nil (25898 41855 150363 79000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150362 729000) 0 nil])
([nil nil ((552 . 553)) nil (25898 41855 150362 188000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil)) (549 . 566) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 549) (549 . 571) (#("Prin" 0 4 (fontified nil)) . 549) (549 . 553) (#("Println" 0 7 (fontified nil)) . -549) (549 . 556) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -549) (undo-tree-id726 . -4) (undo-tree-id727 . -4) 553) nil (25898 41855 150361 256000) 0 nil])
([nil nil ((558 . 563) (557 . 559) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -557) (undo-tree-id724 . -1) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 558) (undo-tree-id725 . -8) (557 . 558)) nil (25898 41855 150359 102000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:string fontified t)) . -558) (undo-tree-id719 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -559) (undo-tree-id720 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -560) (undo-tree-id721 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -561) (undo-tree-id722 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -562) (undo-tree-id723 . -1) 563) nil (25898 41855 150356 938000) 0 nil])
([nil nil ((558 . 561)) nil (25898 41855 150354 714000) 0 nil])
([nil nil ((561 . 581)) nil (25898 41855 150354 373000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -578) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -579) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -580) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 581) nil (25898 41855 150353 421000) 0 nil])
([nil nil ((578 . 591)) nil (25898 41855 150339 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 549 593 #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil))) nil (25898 41855 150336 970000) 0 nil])
([nil nil ((#("	port, err := strconv.Atoi(portStr)
	if err != nil {
		fmt.Println(\"Invalid port value in environment\")
		return
	}
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:variable fontified t) 5 7 (fontified t) 7 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 13 (face tree-sitter-hl-face:operator fontified t) 13 14 (fontified t) 14 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (fontified t) 22 26 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 39 (face tree-sitter-hl-face:keyword fontified t) 39 40 (fontified t) 40 43 (face tree-sitter-hl-face:variable fontified t) 43 44 (fontified t) 44 46 (face tree-sitter-hl-face:operator fontified t) 46 47 (fontified t) 47 50 (face tree-sitter-hl-face:constant\.builtin fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 55 (fontified t) 55 58 (face tree-sitter-hl-face:variable fontified t) 58 59 (fontified t) 59 66 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 66 67 (face (rainbow-delimiters-depth-3-face) fontified t) 67 102 (face tree-sitter-hl-face:string fontified t) 102 103 (face (rainbow-delimiters-depth-3-face) fontified t) 103 104 (fontified t) 104 106 (fontified t) 106 112 (face tree-sitter-hl-face:keyword fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 116 (fontified t)) . 490) (undo-tree-id788 . 13) (undo-tree-id789 . -115) (undo-tree-id790 . -114) (undo-tree-id791 . -114) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -67) (undo-tree-id796 . 15) (undo-tree-id797 . -1) (undo-tree-id798 . -115) (undo-tree-id799 . -115) (undo-tree-id800 . -114) (undo-tree-id801 . -114) (undo-tree-id802 . -114) (undo-tree-id803 . -114) (undo-tree-id804 . -114) (undo-tree-id805 . -114) (undo-tree-id806 . -116) (undo-tree-id807 . -1) (undo-tree-id808 . -114) (undo-tree-id809 . -114) (undo-tree-id810 . -114) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -5) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -116) 491 (t 25898 41855 159207 708000)) nil (25898 41909 750665 796000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -465) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -466) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -467) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 468) nil (25898 41909 750650 767000) 0 nil])
([nil nil ((846 . 850) (t 25898 41909 850732 655000)) nil (25898 41960 226841 431000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil)) (850 . 890) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 850) (850 . 900) (#("FormatString" 0 12 (fontified nil)) . -850) (850 . 862)) nil (25898 41960 226840 789000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -865) (865 . 866) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -865) (864 . 866) (863 . 865) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -863) (#("state fmt.State" 0 5 (face tree-sitter-hl-face:variable fontified nil) 5 6 (fontified nil) 6 9 (face tree-sitter-hl-face:variable fontified nil) 9 10 (fontified nil) 10 15 (face tree-sitter-hl-face:property fontified nil)) . 864) (863 . 864)) nil (25898 41960 226839 968000) 0 nil])
([nil nil ((865 . 867)) nil (25898 41960 226838 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 880 #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil))) nil (25898 41960 226838 375000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -879) (undo-tree-id855 . -1) (undo-tree-id856 . 1) (undo-tree-id857 . -1) 880) nil (25898 41960 226837 633000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -869) (undo-tree-id845 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -870) (undo-tree-id846 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -871) (undo-tree-id847 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -872) (undo-tree-id848 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -873) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t)) . -874) (undo-tree-id850 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -875) (undo-tree-id851 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -876) (undo-tree-id852 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -877) (undo-tree-id853 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -878) (undo-tree-id854 . -1) 879) nil (25898 41960 226835 139000) 0 nil])
([nil nil ((873 . 874) (#(")" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -873) (873 . 874)) nil (25898 41960 226830 841000) 0 nil])
([nil nil ((869 . 870)) nil (25898 41960 226830 239000) 0 nil])
([nil nil ((#("F" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -850) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -851) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -852) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("m" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -853) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -854) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -855) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("S" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -856) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -857) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -858) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -859) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -860) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("g" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -861) (undo-tree-id844 . -1) 862) nil (25898 41960 226828 656000) 0 nil])
([nil nil ((850 . 851)) nil (25898 41960 226819 980000) 0 nil])
([nil nil ((#("S" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -850) (undo-tree-id821 . -1) 851) nil (25898 41960 226819 409000) 0 nil])
([nil nil ((850 . 856)) nil (25898 41960 226818 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 857 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (850 . 857) (#("Sprintf" 0 7 (fontified nil)) . 850) (850 . 857) (#("Sprint" 0 6 (fontified nil)) . 850) (850 . 856) (#("Sprintf" 0 7 (fontified nil)) . -850) (850 . 857) (#("Sprint" 0 6 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -850) (undo-tree-id819 . -6) (undo-tree-id820 . -6) 856) nil (25898 41960 226815 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -76) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#("	" 0 1 (fontified t)) . -77) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("\"" 0 1 (fontified t)) . -78) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("s" 0 1 (fontified t)) . -79) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("t" 0 1 (fontified t)) . -80) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("r" 0 1 (fontified t)) . -81) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("c" 0 1 (fontified t)) . -82) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("o" 0 1 (fontified t)) . -83) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("n" 0 1 (fontified t)) . -84) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("v" 0 1 (fontified t)) . -85) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -86) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 87 (t 25898 41960 235219 738000)) nil (25898 41972 165178 607000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -280) (280 . 281) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -280) (280 . 281) (279 . 281) (#("`" 0 1 (fontified nil)) . -279) (278 . 280) (t 25898 41972 266336 502000)) nil (25898 42330 501339 211000) 0 nil])
([nil nil ((280 . 281)) nil (25898 42330 501337 768000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -280) (undo-tree-id912 . -1) 281) nil (25898 42330 501336 957000) 0 nil])
([nil nil ((286 . 292) (285 . 287) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -285) (280 . 286)) nil (25898 42330 501335 524000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -265) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 266) nil (25898 42330 501333 991000) 0 nil])
([nil nil ((265 . 266)) nil (25898 42330 501317 49000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -296) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) 297 (t 25898 42330 601876 267000)) nil (25898 42334 368739 942000) 0 nil])
([nil nil ((296 . 297)) nil (25898 42334 368729 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 41 . 42) (nil fontified nil 14 . 42) (14 . 42) (t 25898 42334 470915 3000)) nil (25898 61691 716472 253000) 0 nil])
([nil nil ((460 . 462) (t 25898 61691 723747 897000)) nil (25898 62106 595066 67000) 0 nil])
([nil nil ((nil rear-nonsticky nil 509 . 510) (nil fontified nil 462 . 510) (462 . 510)) nil (25898 62106 595060 829000) 0 nil])
([nil nil ((187 . 189) (t 25898 62106 602508 74000)) nil (25898 62175 471214 347000) 0 nil])
([nil nil ((189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25898 62175 471211 973000) 0 nil])
([nil nil ((190 . 193)) nil (25898 62175 471210 17000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -191) (undo-tree-id32 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -192) (undo-tree-id33 . -1) 193) nil (25898 62175 471207 712000) 0 nil])
([nil nil ((191 . 207)) nil (25898 62175 471204 360000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -187) (undo-tree-id11 . -1) (#("	" 0 1 (fontified t)) . -188) (undo-tree-id12 . -1) (#("\"" 0 1 (fontified t)) . -189) (undo-tree-id13 . -1) (#("i" 0 1 (fontified t)) . -190) (undo-tree-id14 . -1) (#("n" 0 1 (fontified t)) . -191) (undo-tree-id15 . -1) (#("t" 0 1 (fontified t)) . -192) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t)) . -193) (undo-tree-id17 . -1) (#("r" 0 1 (fontified t)) . -194) (undo-tree-id18 . -1) (#("n" 0 1 (fontified t)) . -195) (undo-tree-id19 . -1) (#("a" 0 1 (fontified t)) . -196) (undo-tree-id20 . -1) (#("l" 0 1 (fontified t)) . -197) (undo-tree-id21 . -1) (#("/" 0 1 (fontified t)) . -198) (undo-tree-id22 . -1) (#("d" 0 1 (fontified t)) . -199) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -200) (undo-tree-id24 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t)) . -202) (undo-tree-id26 . -1) (#("b" 0 1 (fontified t)) . -203) (undo-tree-id27 . -1) (#("a" 0 1 (fontified t)) . -204) (undo-tree-id28 . -1) (#("s" 0 1 (fontified t)) . -205) (undo-tree-id29 . -1) (#("e" 0 1 (fontified t)) . -206) (undo-tree-id30 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -207) (undo-tree-id31 . -1) 208) nil (25898 62175 471200 100000) 0 nil])
([nil nil ((187 . 189) 170) nil (25898 62175 471188 995000) 0 nil])
([nil nil ((190 . 196) (189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25898 62175 471187 109000) 0 nil])
([nil nil ((apply yas--snippet-revive 190 209 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (190 . 209) (#("go-blog-aggregator/" 0 19 (fontified nil)) . 190) (190 . 209) (#("go-blo" 0 3 (fontified nil face tree-sitter-hl-face:string) 3 6 (fontified nil)) . 190) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (193 . 196) (#("go-blog-aggregator/" 0 19 (fontified nil)) . -193) (193 . 212) (#("blo" 0 3 (fontified t face tree-sitter-hl-face:string)) . -193) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 196) nil (25898 62175 471183 757000) 0 nil])
([nil nil ((209 . 212)) nil (25898 62175 471179 566000) 0 nil])
([nil nil ((apply yas--snippet-revive 209 218 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (209 . 218) (#("internal/" 0 9 (fontified nil)) . 209) (209 . 218) (#("int" 0 3 (fontified nil)) . 209) (209 . 212) (#("internal/" 0 9 (fontified nil)) . -209) (209 . 218) (#("int" 0 3 (fontified t face tree-sitter-hl-face:string)) . -209) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 212) nil (25898 62175 471177 192000) 0 nil])
([nil nil ((218 . 220)) nil (25898 62175 471173 351000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -219) (undo-tree-id4 . -1) 220) nil (25898 62175 471171 465000) 0 nil])
([nil nil ((219 . 220)) nil (25898 62175 471168 601000) 0 nil])
([nil nil ((220 . 221)) nil (25898 62175 471166 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 218 226 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (218 . 226) (#("database" 0 8 (fontified nil)) . 218) (218 . 226) (#("dat" 0 3 (fontified nil)) . 218) (218 . 221) (#("database" 0 8 (fontified nil)) . -218) (218 . 226) (#("dat" 0 3 (fontified t face tree-sitter-hl-face:string)) . -218) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -2) (undo-tree-id3 . -3) 221) nil (25898 62175 471161 827000) 0 nil])
([nil nil ((611 . 612) (#("	" 0 1 (fontified nil)) . 610) (undo-tree-id56 . -1) (609 . 612) (t 25898 62175 479642 304000)) nil (25898 62218 574933 400000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -611) (undo-tree-id55 . -1) 612) nil (25898 62218 574931 26000) 0 nil])
([nil nil ((nil rear-nonsticky nil 648 . 649) (nil fontified nil 611 . 649) (611 . 649)) nil (25898 62218 574928 721000) 0 nil])
([nil nil ((611 . 613)) nil (25898 62218 574926 346000) 0 nil])
([nil nil ((611 . 612) (#("	" 0 1 (fontified nil)) . 610) (610 . 611) (610 . 611)) nil (25898 62218 574924 531000) 0 nil])
([nil nil ((612 . 617)) nil (25898 62218 574922 156000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -615) (undo-tree-id53 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -616) (undo-tree-id54 . -1) 617) nil (25898 62218 574919 781000) 0 nil])
([nil nil ((615 . 616)) nil (25898 62218 574917 407000) 0 nil])
([nil nil ((616 . 627)) nil (25898 62218 574915 521000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 631 637 nil nil nil t nil)) nil 3 nil #s(yas--field 1 631 637 nil nil nil t nil) nil nil)) (624 . 642) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 624) (624 . 647) (#("Get" 0 3 (fontified nil)) . 624) (624 . 627) (#("Getenv" 0 6 (fontified nil)) . -624) (624 . 630) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -624) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) 627) nil (25898 62218 574912 588000) 0 nil])
([nil nil ((631 . 633) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -631) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 632) (undo-tree-id37 . -10) (undo-tree-id38 . -4) (undo-tree-id39 . -5) (631 . 632)) nil (25898 62218 574905 324000) 0 nil])
([nil nil ((632 . 636)) nil (25898 62218 574894 429000) 0 nil])
([nil nil ((apply yas--snippet-revive 624 638 #s(yas--snippet nil (#s(yas--field 1 631 637 nil nil nil t nil)) nil 3 nil #s(yas--field 1 631 637 nil nil nil t nil) nil nil))) nil (25898 62218 574889 750000) 0 nil])
([nil nil ((227 . 229) (t 25898 62218 583100 919000)) nil (25898 62231 352229 181000) 0 nil])
([nil nil ((230 . 235) (229 . 231) (#("\"" 0 1 (fontified nil)) . -229) (229 . 230)) nil (25898 62231 352227 226000) 0 nil])
([nil nil ((apply yas--snippet-revive 230 239 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (230 . 239) (#("database/" 0 9 (fontified nil)) . 230) (230 . 239) (#("datab" 0 5 (fontified nil)) . 230) (230 . 235) (#("database/" 0 9 (fontified nil)) . -230) (230 . 239) (#("datab" 0 5 (fontified t face tree-sitter-hl-face:string)) . -230) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -1) (undo-tree-id60 . -2) (undo-tree-id61 . -3) (undo-tree-id62 . -4) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) 235) nil (25898 62231 352223 804000) 0 nil])
([nil nil ((239 . 242)) nil (25898 62231 352171 4000) 0 nil])
([nil nil ((697 . 698) (#("	" 0 1 (fontified nil)) . 696) (undo-tree-id81 . -1) (695 . 698) (t 25898 62231 359940 497000)) nil (25898 62293 715026 696000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -697) (undo-tree-id80 . -1) 698) nil (25898 62293 715024 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 725 . 726) (nil fontified nil 697 . 726) (697 . 726)) nil (25898 62293 715022 366000) 0 nil])
([nil nil ((697 . 699)) nil (25898 62293 715020 410000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -695) (undo-tree-id79 . -1) 696) nil (25898 62293 715018 454000) 0 nil])
([nil nil ((727 . 729)) nil (25898 62293 715016 569000) 0 nil])
([nil nil ((729 . 730)) nil (25898 62293 715014 124000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -729) (undo-tree-id78 . -1) 730) nil (25898 62293 715012 239000) 0 nil])
([nil nil ((729 . 738)) nil (25898 62293 715009 864000) 0 nil])
([nil nil ((738 . 741)) nil (25898 62293 715008 467000) 0 nil])
([nil nil ((apply yas--snippet-revive 738 747 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (738 . 747) (#("apiConfig" 0 9 (fontified nil)) . 738) (738 . 747) (#("api" 0 3 (fontified nil)) . 738) (738 . 741) (#("apiConfig" 0 9 (fontified nil)) . -738) (738 . 747) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -738) (undo-tree-id76 . -3) (undo-tree-id77 . -3) 741) nil (25898 62293 715005 674000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -748) (748 . 749) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -748) (748 . 749) (747 . 749)) nil (25898 62293 715002 251000) 0 nil])
([nil nil ((749 . 751)) nil (25898 62293 714999 877000) 0 nil])
([nil nil ((751 . 755)) nil (25898 62293 714997 991000) 0 nil])
([nil nil ((755 . 757)) nil (25898 62293 714996 175000) 0 nil])
([nil nil ((736 . 737)) nil (25898 62293 714994 220000) 0 nil])
([nil nil ((758 . 759)) nil (25898 62293 714992 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 759 761 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (759 . 761) (#("DB" 0 2 (fontified nil)) . 759) (759 . 761) (#("DB" 0 2 (fontified nil)) . -759) (759 . 761)) nil (25898 62293 714990 867000) 0 nil])
([nil nil ((761 . 767)) nil (25898 62293 714987 934000) 0 nil])
([nil nil ((767 . 768)) nil (25898 62293 714986 48000) 0 nil])
([nil nil ((apply yas--snippet-revive 765 774 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (765 . 774) (#("dbQueries" 0 9 (fontified nil)) . 765) (765 . 774) (#("dbQ" 0 3 (fontified nil)) . 765) (765 . 768) (#("dbQueries" 0 9 (fontified nil)) . -765) (765 . 774) (#("dbQ" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -765) (undo-tree-id74 . -3) (undo-tree-id75 . -3) 768) nil (25898 62293 714983 604000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -762) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 763) nil (25898 62293 714976 969000) 0 nil])
([nil nil ((1106 . 1107) (t 25898 62293 722157 840000)) nil (25898 62359 177509 993000) 0 nil])
([nil nil ((1176 . 1177)) nil (25898 62359 177504 755000) 0 nil])
([nil nil ((661 . 662) (t 25898 62359 185336 826000)) nil (25898 62404 399912 820000) 0 nil])
([nil nil ((696 . 698)) nil (25898 62404 399910 934000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1109) (undo-tree-id110 . -1) 1110) nil (25898 62404 399909 49000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1178) (undo-tree-id109 . -1) 1179) nil (25898 62404 399907 163000) 0 nil])
([nil nil ((696 . 698)) nil (25898 62404 399904 718000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -714) (714 . 715) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -714) (714 . 715) (698 . 715)) nil (25898 62404 399902 344000) 0 nil])
([nil nil ((715 . 717) (716 . 717) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 715) (715 . 717) (714 . 716)) nil (25898 62404 399899 899000) 0 nil])
([nil nil ((717 . 721)) nil (25898 62404 399897 455000) 0 nil])
([nil nil ((721 . 726)) nil (25898 62404 399896 58000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 729 741 nil nil nil t nil)) nil 8 nil #s(yas--field 1 729 741 nil nil nil t nil) nil nil)) (721 . 738) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 721) (721 . 743) (#("Print" 0 5 (fontified nil)) . 721) (721 . 726) (#("Println" 0 7 (fontified nil)) . -721) (721 . 728) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -721) (undo-tree-id107 . -5) (undo-tree-id108 . -5) 726) nil (25898 62404 399893 684000) 0 nil])
([nil nil ((730 . 734) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 730) (729 . 730)) nil (25898 62404 399889 912000) 0 nil])
([nil nil ((apply yas--snippet-revive 734 741 #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 729 741 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 729 741 nil nil nil t nil) nil)) (734 . 741) (#("Error()" 0 7 (fontified nil)) . 734) (734 . 741) (#("Error" 0 5 (fontified nil)) . -734) (734 . 739)) nil (25898 62404 399887 537000) 0 nil])
([nil nil ((apply yas--snippet-revive 721 742 #s(yas--snippet nil (#s(yas--field 1 729 741 nil nil nil t nil)) nil 8 nil #s(yas--field 1 729 741 nil nil nil t nil) nil nil))) nil (25898 62404 399884 255000) 0 nil])
([nil nil ((742 . 745)) nil (25898 62404 399882 788000) 0 nil])
([nil nil ((745 . 747)) nil (25898 62404 399880 903000) 0 nil])
([nil nil ((747 . 750)) nil (25898 62404 399879 17000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -749) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 750) nil (25898 62404 399877 61000) 0 nil])
([nil nil ((749 . 750)) nil (25898 62404 399869 868000) 0 nil])
([nil nil ((apply yas--snippet-revive 745 751 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (745 . 751) (#("return" 0 6 (fontified nil)) . 745) (745 . 751) (#("retur" 0 5 (fontified nil)) . 745) (745 . 750) (#("return" 0 6 (fontified nil)) . -745) (745 . 751) (#("retur" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -745) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -2) (undo-tree-id85 . -3) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) 750) nil (25898 62404 399865 537000) 0 nil])
([nil nil ((1164 . 1166) (t 25898 62404 406769 977000)) nil (25898 62593 206903 323000) 0 nil])
([nil nil ((1166 . 1167) (#("	" 0 1 (fontified nil)) . 1165) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (1166 . 1167)) nil (25898 62593 206901 18000) 0 nil])
([nil nil ((1167 . 1169)) nil (25898 62593 206898 154000) 0 nil])
([nil nil ((1169 . 1170)) nil (25898 62593 206896 338000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1169) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 1170) nil (25898 62593 206894 453000) 0 nil])
([nil nil ((1169 . 1170)) nil (25898 62593 206891 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 1167 1175 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1167 . 1175) (#("v1Router" 0 8 (fontified nil)) . 1167) (1167 . 1175) (#("v1R" 0 3 (fontified nil)) . 1167) (1167 . 1170) (#("v1Router" 0 8 (fontified nil)) . -1167) (1167 . 1175) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1167) (undo-tree-id174 . -3) (undo-tree-id175 . -3) 1170) nil (25898 62593 206889 634000) 0 nil])
([nil nil ((1175 . 1180)) nil (25898 62593 206886 351000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1177) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1178) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1179) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 1180) nil (25898 62593 206884 396000) 0 nil])
([nil nil ((1177 . 1179)) nil (25898 62593 206879 576000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1181 1189 nil nil nil t #s(yas--field 2 1191 1191 nil nil nil t nil)) #s(yas--field 2 1191 1191 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil nil)) (1176 . 1224) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 1176) (1176 . 1234) (#("Pos" 0 3 (fontified nil)) . 1176) (1176 . 1179) (#("Post" 0 4 (fontified nil)) . -1176) (1176 . 1180) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1176) (undo-tree-id166 . -3) (undo-tree-id167 . -3) 1179) nil (25898 62593 206877 621000) 0 nil])
([nil nil ((1182 . 1187) (1181 . 1183) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1181) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 1182) (1181 . 1182)) nil (25898 62593 206873 780000) 0 nil])
([nil nil ((1187 . 1188)) nil (25898 62593 206871 405000) 0 nil])
([nil nil ((#("handlerFn http.HandlerFunc" 0 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 26 (fontified t face tree-sitter-hl-face:property)) . 1191)) nil (25898 62593 206869 519000) 0 nil])
([nil nil ((1191 . 1201)) nil (25898 62593 206868 123000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1197) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1198) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1199) (undo-tree-id164 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1200) (undo-tree-id165 . -1) 1201) nil (25898 62593 206865 748000) 0 nil])
([nil nil ((1197 . 1200)) nil (25898 62593 206861 557000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1196) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1197) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1198) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1199) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 1200) nil (25898 62593 206859 602000) 0 nil])
([nil nil ((1196 . 1201)) nil (25898 62593 206852 408000) 0 nil])
([nil nil ((apply yas--snippet-revive 1191 1216 #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil)) (1191 . 1216) (#("database.CreateUserParams" 0 25 (fontified nil)) . 1191) (1191 . 1216) (#("createUser" 0 10 (fontified nil)) . 1191) (1191 . 1201) (#("database.CreateUserParams" 0 25 (fontified nil)) . -1191) (1191 . 1216) (#("createUser" 0 10 (fontified t face tree-sitter-hl-face:variable)) . -1191) (undo-tree-id150 . -10) (undo-tree-id151 . -10) 1201) nil (25898 62593 206850 34000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1195) (undo-tree-id129 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1196) (undo-tree-id130 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1197) (undo-tree-id131 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1198) (undo-tree-id132 . -1) (#("." 0 1 (fontified t)) . -1199) (undo-tree-id133 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1200) (undo-tree-id134 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1201) (undo-tree-id135 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1202) (undo-tree-id136 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1203) (undo-tree-id137 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1204) (undo-tree-id138 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1205) (undo-tree-id139 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1206) (undo-tree-id140 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1207) (undo-tree-id141 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1208) (undo-tree-id142 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1209) (undo-tree-id143 . -1) (#("P" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1210) (undo-tree-id144 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1211) (undo-tree-id145 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1212) (undo-tree-id146 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1213) (undo-tree-id147 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1214) (undo-tree-id148 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1215) (undo-tree-id149 . -1) 1216) nil (25898 62593 206534 2000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1191) (undo-tree-id125 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1192) (undo-tree-id126 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1193) (undo-tree-id127 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1194) (undo-tree-id128 . -1) 1195) nil (25898 62593 206524 783000) 0 nil])
([nil nil ((apply yas--snippet-revive 1176 1192 #s(yas--snippet nil (#s(yas--field 1 1181 1189 nil nil nil t #s(yas--field 2 1191 1191 nil nil nil t nil)) #s(yas--field 2 1191 1191 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil nil))) nil (25898 62593 206521 430000) 0 nil])
([nil nil ((566 . 568)) nil (25898 62593 206519 545000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -573) (573 . 574) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -573) (573 . 574) (567 . 574)) nil (25898 62593 206518 78000) 0 nil])
([nil nil ((573 . 580)) nil (25898 62593 206515 634000) 0 nil])
([nil nil ((apply yas--snippet-revive 575 584 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (575 . 584) (#("apiConfig" 0 9 (fontified nil)) . 575) (575 . 584) (#("apiCo" 0 5 (fontified nil)) . 575) (575 . 580) (#("apiConfig" 0 9 (fontified nil)) . -575) (575 . 584) (#("apiCo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -575) (undo-tree-id123 . -5) (undo-tree-id124 . -5) 580) nil (25898 62593 206513 748000) 0 nil])
([nil nil ((585 . 589)) nil (25898 62593 206510 465000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -597) (597 . 598) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -597) (597 . 598) (589 . 598)) nil (25898 62593 206508 580000) 0 nil])
([nil nil ((597 . 607)) nil (25898 62593 206505 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 604 618 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (604 . 618) (#("ResponseWriter" 0 14 (fontified nil)) . 604) (604 . 618) (#("Res" 0 3 (fontified nil)) . 604) (604 . 607) (#("ResponseWriter" 0 14 (fontified nil)) . -604) (604 . 618) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -604) (undo-tree-id121 . -3) (undo-tree-id122 . -3) 607) nil (25898 62593 206503 900000) 0 nil])
([nil nil ((618 . 621)) nil (25898 62593 206500 548000) 0 nil])
([nil nil ((621 . 631)) nil (25898 62593 206498 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 628 635 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (628 . 635) (#("Request" 0 7 (fontified nil)) . 628) (628 . 635) (#("Req" 0 3 (fontified nil)) . 628) (628 . 631) (#("Request" 0 7 (fontified nil)) . -628) (628 . 635) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -628) (undo-tree-id119 . -3) (undo-tree-id120 . -3) 631) nil (25898 62593 206496 288000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -638) (638 . 639) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -638) (638 . 639) (636 . 639)) nil (25898 62593 206492 865000) 0 nil])
([nil nil ((639 . 640) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 639) (639 . 640) (638 . 640)) nil (25898 62593 206490 421000) 0 nil])
([nil nil ((640 . 642)) nil (25898 62593 206489 24000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -640) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("." 0 1 (fontified t)) . -641) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 642) nil (25898 62593 206487 68000) 0 nil])
([nil nil ((565 . 567)) nil (25898 62593 206483 297000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -578) (578 . 579) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -578) (578 . 579) (567 . 579)) nil (25898 62593 206481 341000) 0 nil])
([nil nil ((579 . 580) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 579) (579 . 580) (578 . 580)) nil (25898 62593 206479 456000) 0 nil])
([nil nil ((576 . 583)) nil (25898 62593 206477 570000) 0 nil])
([nil nil ((587 . 598)) nil (25898 62593 206475 684000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -587) (undo-tree-id114 . -1) 588) nil (25898 62593 206474 288000) 0 nil])
([nil nil ((587 . 588)) nil (25898 62593 206472 402000) 0 nil])
([nil nil ((600 . 606) (599 . 601) (#("`" 0 1 (fontified nil)) . -599) (598 . 600)) nil (25898 62593 206470 516000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -605) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 606) nil (25898 62593 206467 653000) 0 nil])
([nil nil ((606 . 610) (605 . 607) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -605) (605 . 606)) nil (25898 62593 206455 151000) 0 nil])
([nil nil ((583 . 590) (t 25898 62593 215405 451000)) nil (25898 62597 88646 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 698 . 699) (#("
" 0 1 (fontified nil)) . -878) (696 . 879) 695 (t 25898 62597 97356 868000)) nil (25898 62994 892578 234000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 695) (undo-tree-id319 . -1) (undo-tree-id320 . -1)) nil (25898 62994 892575 790000) 0 nil])
([nil nil ((nil rear-nonsticky nil 244 . 245) (#("
" 0 1 (fontified nil)) . -260) (243 . 261) 242) nil (25898 62994 892573 415000) 0 nil])
([nil nil ((893 . 895)) nil (25898 62994 892571 529000) 0 nil])
([nil nil ((895 . 898)) nil (25898 62994 892569 644000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -895) (undo-tree-id316 . -1) (#("ű" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -896) (undo-tree-id317 . -1) (#(" " 0 1 (fontified t)) . -897) (undo-tree-id318 . -1) 898) nil (25898 62994 892567 339000) 0 nil])
([nil nil ((14 . 15) (108 . 110) (#("gi" 0 2 (fontified t face tree-sitter-hl-face:string)) . -108) 110 (111 . 112) (#("hu" 0 2 (fontified t face tree-sitter-hl-face:string)) . -111) 113 (114 . 117) (#(".com" 0 4 (fontified t face tree-sitter-hl-face:string)) . -114) 118 (119 . 133) (120 . 123) (121 . 139) (#("	\"database/sql\"
	\"encoding/json\"
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:string) 2 14 (fontified t face tree-sitter-hl-face:string) 14 15 (fontified t face tree-sitter-hl-face:string) 15 16 (fontified t) 16 17 (fontified t rear-nonsticky t) 17 32 (fontified t face tree-sitter-hl-face:string) 32 33 (fontified t)) . 228) (undo-tree-id311 . -16) (undo-tree-id312 . -32) (undo-tree-id313 . -16) (365 . 366) (366 . 369) (395 . 397) (#("	" 0 1 (fontified t)) . 712) (#("	" 0 1 (fontified t)) . 750) (#("	" 0 1 (fontified t)) . -773) 774 (#("	" 0 1 (fontified t)) . -804) (#("	" 0 1 (fontified t)) . -822) (#("	" 0 1 (fontified t)) . -880) (#("	" 0 1 (fontified t)) . -890) (#("	" 0 1 (fontified t)) . 894) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("
" 0 1 (fontified t)) . 897) (987 . 988) (#("  " 0 2 (fontified t)) . 987) (1086 . 1087) (#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 1088) (#(", " 0 2 (fontified t)) . 1521) 894) nil (25898 62994 892561 612000) 0 nil])
([nil nil ((893 . 895)) nil (25898 62994 892555 815000) 0 nil])
([nil nil ((895 . 908)) nil (25898 62994 892553 859000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -906) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("." 0 1 (fontified t)) . -907) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 908) nil (25898 62994 892551 485000) 0 nil])
([nil nil ((906 . 907)) nil (25898 62994 892548 621000) 0 nil])
([nil nil ((apply yas--snippet-revive 923 927 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (22 . 25) (#("_ " 0 2 (fontified t)) . -22) 24 (25 . 27) (#("gi" 0 2 (fontified t face tree-sitter-hl-face:string)) . -25) 27 (28 . 29) (#("hu" 0 2 (fontified t face tree-sitter-hl-face:string)) . -28) 30 (31 . 34) (#(".com/lib" 0 8 (fontified t face tree-sitter-hl-face:string)) . 31) (40 . 41) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . 40) (42 . 43) (44 . 51) (45 . 50) (#("mp" 0 2 (fontified t face tree-sitter-hl-face:keyword)) . 45) (48 . 50) (#("rt (" 0 2 (fontified t face tree-sitter-hl-face:keyword) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-1-face))) . 48) (#("ut" 0 2 (fontified t face tree-sitter-hl-face:string)) . 81) (84 . 90) (85 . 92) (86 . 87) (90 . 102) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . 90) (92 . 94) (93 . 95) (94 . 95) (#("ht" 0 2 (fontified t face tree-sitter-hl-face:string)) . 94) (97 . 99) (#("p\"
	\"o" 0 2 (fontified t face tree-sitter-hl-face:string) 2 4 (fontified t) 4 6 (fontified t face tree-sitter-hl-face:string)) . 97) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (#("
" 0 1 (fontified t)) . 105) (109 . 110) (#("databas" 0 2 (fontified t face tree-sitter-hl-face:string) 2 3 (fontified t face tree-sitter-hl-face:string) 3 4 (fontified t face tree-sitter-hl-face:string) 4 5 (fontified t face tree-sitter-hl-face:string) 5 7 (fontified t face tree-sitter-hl-face:string)) . 109) (117 . 118) (118 . 122) (#("sql" 0 3 (fontified t face tree-sitter-hl-face:string)) . 118) (#("enc" 0 3 (fontified t face tree-sitter-hl-face:string)) . 125) (#("ding/j" 0 3 (fontified t face tree-sitter-hl-face:string) 3 4 (fontified t face tree-sitter-hl-face:string) 4 6 (fontified t face tree-sitter-hl-face:string)) . 129) (#("on" 0 1 (fontified t face tree-sitter-hl-face:string) 1 2 (fontified t face tree-sitter-hl-face:string)) . 136) (140 . 141) (192 . 218) (223 . 225) (#("go-blog-a" 0 9 (fontified t face tree-sitter-hl-face:string)) . 224) (234 . 235) (#("grega" 0 5 (fontified t face tree-sitter-hl-face:string)) . 234) (240 . 245) (241 . 242) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . 241) (#("interna" 0 7 (fontified t face tree-sitter-hl-face:string)) . -243) 250 (251 . 253) (252 . 254) (#("database" 0 8 (fontified t face tree-sitter-hl-face:string)) . -252) (undo-tree-id303 . -8) (undo-tree-id304 . -8) 260 (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (903 . 907) (#("uuid" 0 4 (fontified nil)) . 903) (903 . 907) (#("uuid" 0 4 (fontified nil)) . 903) (903 . 907) (#("uuid" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -903) (undo-tree-id305 . -4) (undo-tree-id306 . -4) 907) nil (25898 62994 892544 431000) 0 nil])
([nil nil ((927 . 931)) nil (25898 62994 892533 955000) 0 nil])
([nil nil ((apply yas--snippet-revive 928 933 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (928 . 933) (#("New()" 0 5 (fontified nil)) . 928) (928 . 933) (#("New" 0 3 (fontified nil)) . 928) (928 . 931) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -928) (undo-tree-id298 . -3) (undo-tree-id299 . -3) 931) nil (25898 62994 892531 580000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -941) (941 . 942) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -941) (941 . 942) (933 . 942)) nil (25898 62994 892528 228000) 0 nil])
([nil nil ((942 . 944)) nil (25898 62994 892525 783000) 0 nil])
([nil nil ((780 . 783) 776 (826 . 829) 822) nil (25898 62994 892524 317000) 0 nil])
([nil nil ((948 . 950)) nil (25898 62994 892521 942000) 0 nil])
([nil nil ((950 . 967)) nil (25898 62994 892520 475000) 0 nil])
([nil nil ((apply yas--snippet-revive 971 975 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (148 . 156) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (963 . 967) (#("time" 0 4 (fontified nil)) . 963) (963 . 967) (#("time" 0 4 (fontified nil)) . 963) (963 . 967) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -963) (undo-tree-id296 . -4) (undo-tree-id297 . -4) 967) nil (25898 62994 892518 101000) 0 nil])
([nil nil ((975 . 979)) nil (25898 62994 892513 840000) 0 nil])
([nil nil ((apply yas--snippet-revive 976 981 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (976 . 981) (#("Now()" 0 5 (fontified nil)) . 976) (976 . 981) (#("Now" 0 3 (fontified nil)) . 976) (976 . 979) (#("Now" 0 3 (fontified t face tree-sitter-hl-face:property)) . -976) (undo-tree-id294 . -3) (undo-tree-id295 . -3) 979) nil (25898 62994 892511 955000) 0 nil])
([nil nil ((981 . 983)) nil (25898 62994 892508 113000) 0 nil])
([nil nil ((983 . 986)) nil (25898 62994 892506 228000) 0 nil])
([nil nil ((apply yas--snippet-revive 983 1008 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (983 . 1008) (#("database.CreateUserParams" 0 25 (fontified nil)) . 983) (983 . 1008) (#("Cre" 0 3 (fontified nil)) . 983) (983 . 986) (#("database.CreateUserParams" 0 25 (fontified nil)) . -983) (983 . 1008) (#("Cre" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -983) (undo-tree-id292 . -3) (undo-tree-id293 . -3) 986) nil (25898 62994 892504 342000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1009) (1009 . 1010) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1009) (1009 . 1010) (1008 . 1010)) nil (25898 62994 892500 570000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -991) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -992) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -993) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -994) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -995) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -996) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -997) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -998) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -999) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1000) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1001) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1002) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1003) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1004) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1005) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1006) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1007) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1008) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1009) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . 1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 1010) nil (25898 62994 892495 751000) 0 nil])
([nil nil ((991 . 992)) nil (25898 62994 892466 697000) 0 nil])
([nil nil ((apply yas--snippet-revive 992 999 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (992 . 999) (#("Queries" 0 7 (fontified nil)) . 992) (992 . 999) (#("Queries" 0 7 (fontified nil)) . -992) (992 . 999)) nil (25898 62994 892464 253000) 0 nil])
([nil nil ((999 . 1000)) nil (25898 62994 892461 878000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -991) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("Q" 0 1 (fontified t face tree-sitter-hl-face:property)) . -992) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -993) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -994) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -995) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -996) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -997) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -998) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("." 0 1 (fontified t)) . -999) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 1000) nil (25898 62994 892458 456000) 0 nil])
([nil nil ((991 . 992)) nil (25898 62994 892449 936000) 0 nil])
([nil nil ((#("	database.
" 0 1 (fontified t) 1 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 11 (fontified t)) . 982) (undo-tree-id180 . -10) (undo-tree-id181 . 1) (undo-tree-id182 . -10) (undo-tree-id183 . -9) (undo-tree-id184 . 1) (undo-tree-id185 . -10) (undo-tree-id186 . -10) (undo-tree-id187 . -10) (undo-tree-id188 . -10) (undo-tree-id189 . -10) (undo-tree-id190 . -10) (undo-tree-id191 . -10) (undo-tree-id192 . -10) (undo-tree-id193 . -10) (undo-tree-id194 . -10) (undo-tree-id195 . -10) (undo-tree-id196 . -10) (undo-tree-id197 . -10) (undo-tree-id198 . -10) (undo-tree-id199 . -10) (undo-tree-id200 . -10) (undo-tree-id201 . -9) (undo-tree-id202 . -9) (undo-tree-id203 . -9) (undo-tree-id204 . -9) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (undo-tree-id207 . -1) (undo-tree-id208 . -9) (undo-tree-id209 . -9) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -11) 991) nil (25898 62994 892445 745000) 0 nil])
([nil nil ((983 . 985) (t 25898 62994 995381 741000)) nil (25898 63190 640235 484000) 0 nil])
([nil nil ((apply yas--snippet-revive 985 987 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (985 . 987) (#("DB" 0 2 (fontified nil)) . 985) (985 . 987) (#("DB" 0 2 (fontified nil)) . -985) (985 . 987)) nil (25898 63190 640233 598000) 0 nil])
([nil nil ((987 . 988)) nil (25898 63190 640231 712000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil nil)) (988 . 1050) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 988) (988 . 1060) (#("CreateUser" 0 10 (fontified nil)) . -988) (988 . 998)) nil (25898 63190 640229 338000) 0 nil])
([nil nil ((1000 . 1001) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 1000) (999 . 1000)) nil (25898 63190 640227 522000) 0 nil])
([nil nil ((1001 . 1002)) nil (25898 63190 640225 636000) 0 nil])
([nil nil ((1002 . 1004)) nil (25898 63190 640224 170000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -999) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("." 0 1 (fontified t)) . -1000) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1001) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1002) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("." 0 1 (fontified t)) . -1003) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 1004) nil (25898 63190 640221 865000) 0 nil])
([nil nil ((apply yas--snippet-revive 988 1031 #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil nil))) nil (25898 63190 640216 138000) 0 nil])
([nil nil ((#("	a.DB.CreateUser(, arg database.CreateUserParams)
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t) 3 5 (fontified t face tree-sitter-hl-face:property) 5 6 (fontified t) 6 16 (fontified t face tree-sitter-hl-face:property) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 19 (fontified t) 19 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t) 23 31 (fontified t) 31 32 (fontified t) 32 48 (fontified t face tree-sitter-hl-face:type) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t)) . 982) (undo-tree-id343 . -49) (undo-tree-id344 . 2) (undo-tree-id345 . -50) (undo-tree-id346 . -47) (undo-tree-id347 . -47) 1029) nil (25898 63190 640214 182000) 0 nil])
([nil nil ((1171 . 1173)) nil (25898 63190 640211 249000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1172) (undo-tree-id342 . -1) 1173) nil (25898 63190 640208 874000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1198 . 1199) (nil fontified nil 1172 . 1199) (1172 . 1199)) nil (25898 63190 640206 919000) 0 nil])
([nil nil ((1172 . 1174)) nil (25898 63190 640205 33000) 0 nil])
([nil nil ((1171 . 1173)) nil (25898 63190 640203 566000) 0 nil])
([nil nil ((1173 . 1178)) nil (25898 63190 640201 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 1184 1191 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (23 . 34) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1173 . 1180) (#("context" 0 7 (fontified nil)) . 1173) (1173 . 1180) (#("conte" 0 5 (fontified nil)) . 1173) (1173 . 1178) (#("context" 0 7 (fontified nil)) . -1173) (1173 . 1180) (#("conte" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -1173) (undo-tree-id340 . -5) (undo-tree-id341 . -5) 1178) nil (25898 63190 640199 795000) 0 nil])
([nil nil ((#("	context
" 0 1 (fontified t) 1 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t)) . 1183) (undo-tree-id335 . -9) (undo-tree-id336 . -8) (undo-tree-id337 . 1) (undo-tree-id338 . -1) (undo-tree-id339 . -7) 1190) nil (25898 63190 640196 24000) 0 nil])
([nil nil ((626 . 628)) nil (25898 63190 640192 252000) 0 nil])
([nil nil ((628 . 638)) nil (25898 63190 640190 855000) 0 nil])
([nil nil ((638 . 639)) nil (25898 63190 640188 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 632 647 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (632 . 647) (#("context.Context" 0 15 (fontified nil)) . 632) (632 . 647) (#("context" 0 7 (fontified nil)) . 632) (632 . 639) (#("context.Context" 0 15 (fontified nil)) . -632) (632 . 647) (#("context" 0 7 (fontified t face tree-sitter-hl-face:type)) . -632) (undo-tree-id333 . -7) (undo-tree-id334 . -7) 639) nil (25898 63190 640187 84000) 0 nil])
([nil nil ((1233 . 1235)) nil (25898 63190 640182 754000) 0 nil])
([nil nil ((#("  ctx := context.Background()
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 8 (fontified t face tree-sitter-hl-face:operator) 8 9 (fontified t) 9 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 27 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t)) . 1204) (undo-tree-id332 . -29)) nil (25898 63190 640180 309000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1285 . 1286) (#("
" 0 1 (fontified nil)) . -1313) (1283 . 1314) 1261) nil (25898 63190 640177 865000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1204) (undo-tree-id330 . -1) (undo-tree-id331 . 1)) nil (25898 63190 640175 490000) 0 nil])
([nil nil ((1284 . 1291)) nil (25898 63190 640172 627000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1295) (undo-tree-id329 . -1) 1296) nil (25898 63190 640170 741000) 0 nil])
([nil nil ((1672 . 1676)) nil (25898 63190 640167 808000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1674) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1675) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 1676) nil (25898 63190 640165 922000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1672) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1673) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 1674) nil (25898 63190 640161 243000) 0 nil])
([nil nil ((1672 . 1677)) nil (25898 63190 640151 255000) 0 nil])
([nil nil ((1677 . 1680)) nil (25898 63190 640149 300000) 0 nil])
([nil nil ((1680 . 1681)) nil (25898 63190 640147 833000) 0 nil])
([nil nil ((apply yas--snippet-revive 1681 1691 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (1681 . 1691) (#("createUser" 0 10 (fontified nil)) . 1681) (1681 . 1691) (#("createUser" 0 10 (fontified nil)) . -1681) (1681 . 1691)) nil (25898 63190 640142 106000) 0 nil])
([nil nil ((1014 . 1016) (t 25898 63190 649937 695000)) nil (25898 63315 440956 309000) 0 nil])
([nil nil ((1016 . 1020)) nil (25898 63315 440954 423000) 0 nil])
([nil nil ((1020 . 1026)) nil (25898 63315 440953 26000) 0 nil])
([nil nil ((apply yas--snippet-revive 1026 1028 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1026 . 1028) (#("DB" 0 2 (fontified nil)) . 1026) (1026 . 1028) (#("DB" 0 2 (fontified nil)) . -1026) (1026 . 1028)) nil (25898 63315 440951 140000) 0 nil])
([nil nil ((1028 . 1029)) nil (25898 63315 440948 766000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil 29 nil #s(yas--field 2 1047 1076 nil nil nil nil nil) nil nil)) (1029 . 1091) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 1029) (1029 . 1101) (#("CreateUser" 0 10 (fontified nil)) . -1029) (1029 . 1039)) nil (25898 63315 440947 299000) 0 nil])
([nil nil ((1041 . 1042) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 1041) (1040 . 1041)) nil (25898 63315 440944 436000) 0 nil])
([nil nil ((apply yas--snippet-revive 1042 1045 #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil)) (1042 . 1045) (#("ctx" 0 3 (fontified nil)) . 1042) (1042 . 1045) (#("ctx" 0 3 (fontified nil)) . -1042) (1042 . 1045)) nil (25898 63315 440942 480000) 0 nil])
([nil nil ((apply yas--snippet-revive 1029 1077 #s(yas--snippet nil (#s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil 29 nil #s(yas--field 2 1047 1076 nil nil nil nil nil) nil nil))) nil (25898 63315 440940 36000) 0 nil])
([nil nil ((1013 . 1015)) nil (25898 63315 440938 569000) 0 nil])
([nil nil ((959 . 960)) nil (25898 63315 440936 683000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -959) (undo-tree-id403 . -1) 960) nil (25898 63315 440934 797000) 0 nil])
([nil nil ((959 . 961)) nil (25898 63315 440932 912000) 0 nil])
([nil nil ((961 . 964)) nil (25898 63315 440930 956000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -963) (undo-tree-id402 . -1) 964) nil (25898 63315 440929 489000) 0 nil])
([nil nil ((963 . 971)) nil (25898 63315 440927 115000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -970) (undo-tree-id401 . -1) 971) nil (25898 63315 440925 718000) 0 nil])
([nil nil ((970 . 974)) nil (25898 63315 440923 413000) 0 nil])
([nil nil ((apply yas--snippet-revive 970 978 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (970 . 978) (#("database" 0 8 (fontified nil)) . 970) (970 . 978) (#("data" 0 4 (fontified nil)) . 970) (970 . 974) (#("database" 0 8 (fontified nil)) . -970) (970 . 978) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -970) (undo-tree-id399 . -4) (undo-tree-id400 . -4) 974) nil (25898 63315 440921 528000) 0 nil])
([nil nil ((978 . 979)) nil (25898 63315 440918 245000) 0 nil])
([nil nil ((apply yas--snippet-revive 979 995 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (979 . 995) (#("CreateUserParams" 0 16 (fontified nil)) . 979) (979 . 995) (#("CreateUserParams" 0 16 (fontified nil)) . -979) (979 . 995)) nil (25898 63315 440916 289000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -996) (996 . 997) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -996) (996 . 997) (995 . 997)) nil (25898 63315 440913 426000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -999) (undo-tree-id395 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1000) (undo-tree-id396 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1001) (undo-tree-id397 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1002) (undo-tree-id398 . -1) 1003) nil (25898 63315 440910 4000) 0 nil])
([nil nil ((999 . 1002)) nil (25898 63315 440906 162000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1001) (undo-tree-id394 . -1) 1002) nil (25898 63315 440904 277000) 0 nil])
([nil nil ((1001 . 1005)) nil (25898 63315 440902 391000) 0 nil])
([nil nil ((apply yas--snippet-revive 1005 1007 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (1005 . 1007) (#("ID" 0 2 (fontified nil)) . 1005) (1005 . 1007) (#("ID" 0 2 (fontified nil)) . -1005) (1005 . 1007)) nil (25898 63315 440900 505000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1032) (undo-tree-id385 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1033) (undo-tree-id386 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1034) (undo-tree-id387 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1035) (undo-tree-id388 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1036) (undo-tree-id389 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1037) (undo-tree-id390 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1038) (undo-tree-id391 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1039) (undo-tree-id392 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1040) (undo-tree-id393 . -1) 1041) nil (25898 63315 440897 83000) 0 nil])
([nil nil ((1032 . 1034)) nil (25898 63315 440891 915000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1032) (undo-tree-id383 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1033) (undo-tree-id384 . -1) 1034) nil (25898 63315 440889 610000) 0 nil])
([nil nil ((1032 . 1041)) nil (25898 63315 440887 235000) 0 nil])
([nil nil ((1055 . 1057)) nil (25898 63315 440885 280000) 0 nil])
([nil nil ((1057 . 1059)) nil (25898 63315 440883 883000) 0 nil])
([nil nil ((1059 . 1063)) nil (25898 63315 440881 439000) 0 nil])
([nil nil ((apply yas--snippet-revive 1063 1072 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (1063 . 1072) (#("CreatedAt" 0 9 (fontified nil)) . 1063) (1063 . 1072) (#("CreatedAt" 0 9 (fontified nil)) . -1063) (1063 . 1072)) nil (25898 63315 440879 483000) 0 nil])
([nil nil ((1072 . 1079)) nil (25898 63315 440877 597000) 0 nil])
([nil nil ((apply yas--snippet-revive 1075 1084 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1075 . 1084) (#("timeStamp" 0 9 (fontified nil)) . 1075) (1075 . 1084) (#("time" 0 4 (fontified nil)) . 1075) (1075 . 1079) (#("timeStamp" 0 9 (fontified nil)) . -1075) (1075 . 1084) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1075) (undo-tree-id381 . -4) (undo-tree-id382 . -4) 1079) nil (25898 63315 440875 153000) 0 nil])
([nil nil ((1084 . 1086)) nil (25898 63315 440871 801000) 0 nil])
([nil nil ((1086 . 1089)) nil (25898 63315 440869 915000) 0 nil])
([nil nil ((apply yas--snippet-revive 1086 1101 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (1086 . 1101) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . 1086) (1086 . 1101) (#("dbO" 0 3 (fontified nil)) . 1086) (1086 . 1089) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . -1086) (1086 . 1101) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1086) (undo-tree-id379 . -3) (undo-tree-id380 . -3) 1089) nil (25898 63315 440867 610000) 0 nil])
([nil nil ((1101 . 1108)) nil (25898 63315 440863 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 1104 1113 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (1104 . 1113) (#("timeStamp" 0 9 (fontified nil)) . 1104) (1104 . 1113) (#("time" 0 4 (fontified nil)) . 1104) (1104 . 1108) (#("timeStamp" 0 9 (fontified nil)) . -1104) (1104 . 1113) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1104) (undo-tree-id377 . -4) (undo-tree-id378 . -4) 1108) nil (25898 63315 440861 394000) 0 nil])
([nil nil ((1113 . 1115)) nil (25898 63315 440858 112000) 0 nil])
([nil nil ((1115 . 1118)) nil (25898 63315 440856 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 1115 1120 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (1115 . 1120) (#("dbObj" 0 5 (fontified nil)) . 1115) (1115 . 1120) (#("dbO" 0 3 (fontified nil)) . 1115) (1115 . 1118) (#("dbObj" 0 5 (fontified nil)) . -1115) (1115 . 1120) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1115) (undo-tree-id375 . -3) (undo-tree-id376 . -3) 1118) nil (25898 63315 440853 851000) 0 nil])
([nil nil ((1120 . 1121)) nil (25898 63315 440849 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 1121 1125 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (1121 . 1125) (#("Name" 0 4 (fontified nil)) . 1121) (1121 . 1125) (#("Name" 0 4 (fontified nil)) . -1121) (1121 . 1125)) nil (25898 63315 440848 55000) 0 nil])
([nil nil ((1125 . 1132)) nil (25898 63315 440845 610000) 0 nil])
([nil nil ((apply yas--snippet-revive 1128 1135 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (1128 . 1135) (#("userReq" 0 7 (fontified nil)) . 1128) (1128 . 1135) (#("user" 0 4 (fontified nil)) . 1128) (1128 . 1132) (#("userReq" 0 7 (fontified nil)) . -1128) (1128 . 1135) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1128) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -1) (undo-tree-id361 . -2) (undo-tree-id362 . -3) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) 1132) nil (25898 63315 440842 258000) 0 nil])
([nil nil ((1135 . 1136)) nil (25898 63315 440823 750000) 0 nil])
([nil nil ((apply yas--snippet-revive 1136 1140 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (1136 . 1140) (#("Name" 0 4 (fontified nil)) . 1136) (1136 . 1140) (#("Name" 0 4 (fontified nil)) . -1136) (1136 . 1140)) nil (25898 63315 440818 23000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1184) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1185) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1186) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1187) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("." 0 1 (fontified t)) . -1188) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1189) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1190) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1191) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1192) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1193) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1194) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1195) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1196) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1197) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1198) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1199) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1200) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1201) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1202) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1203) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1204) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) 1205 (t 25898 63315 545378 39000)) nil (25898 63337 245081 823000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1176) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1177) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1178) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#(" " 0 1 (fontified t)) . -1179) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1180) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1181) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1182) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1183) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 1184) nil (25898 63337 244902 131000) 0 nil])
([nil nil ((1176 . 1180)) nil (25898 63337 244470 24000) 0 nil])
([nil nil ((apply yas--snippet-revive 1176 1181 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (1176 . 1181) (#("dbObj" 0 5 (fontified nil)) . 1176) (1176 . 1181) (#("dbOb" 0 4 (fontified nil)) . 1176) (1176 . 1180) (#("dbObj" 0 5 (fontified nil)) . -1176) (1176 . 1181) (#("dbOb" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1176) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -1) (undo-tree-id407 . -2) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) 1180) nil (25898 63337 244466 712000) 0 nil])
([nil nil ((1149 . 1154)) nil (25898 63337 244449 729000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1021) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1022) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1023) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1024) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1025) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1026) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1027) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1028) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1029) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . 1) (undo-tree-id1377 . -1) 1030 (t 25898 63337 254731 797000)) nil (25898 63371 487945 670000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1029) (1029 . 1030) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1029) (1029 . 1030) (1021 . 1030)) nil (25898 63371 487931 906000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1008) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) 1009) nil (25898 63371 487926 736000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1020) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1021) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1022) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1023) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1024) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1025) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1026) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1027) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1028) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . 1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) 1029 (t 25898 63371 495504 924000)) nil (25898 63377 817470 544000) 0 nil])
([nil nil ((1177 . 1179) (t 25898 63377 829827 288000)) nil (25898 63708 597445 437000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1194) (1194 . 1195) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1194) (1194 . 1195) (1179 . 1195)) nil (25898 63708 597443 552000) 0 nil])
([nil nil ((1195 . 1197) (1196 . 1197) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1195) (1195 . 1197) (1194 . 1196)) nil (25898 63708 597441 178000) 0 nil])
([nil nil ((1197 . 1203)) nil (25898 63708 597438 803000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1220 1221 nil nil nil t #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil))) #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil)) #s(yas--field 3 1228 1251 nil nil nil t nil)) nil 43 nil #s(yas--field 3 1228 1251 nil nil nil t nil) nil nil)) (1203 . 1264) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1203) (1203 . 1279) (#("RespondWithError" 0 16 (fontified nil)) . -1203) (1203 . 1219)) nil (25898 63708 597436 429000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1221) (1220 . 1221)) nil (25898 63708 597434 55000) 0 nil])
([nil nil ((1224 . 1226) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1224) (1223 . 1224)) nil (25898 63708 597432 100000) 0 nil])
([nil nil ((1229 . 1231) (1228 . 1230) (#("\"" 0 1 (fontified nil)) . -1228) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1229) (1228 . 1229)) nil (25898 63708 597429 307000) 0 nil])
([nil nil ((1231 . 1234)) nil (25898 63708 597426 933000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1233) (undo-tree-id1524 . -1) 1234) nil (25898 63708 597425 47000) 0 nil])
([nil nil ((1233 . 1250)) nil (25898 63708 597422 673000) 0 nil])
([nil nil ((apply yas--snippet-revive 1203 1252 #s(yas--snippet nil (#s(yas--field 1 1220 1221 nil nil nil t #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil))) #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil)) #s(yas--field 3 1228 1251 nil nil nil t nil)) nil 43 nil #s(yas--field 3 1228 1251 nil nil nil t nil) nil nil))) nil (25898 63708 597420 299000) 0 nil])
([nil nil ((1252 . 1255)) nil (25898 63708 597418 833000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1252) (undo-tree-id1521 . -1) (#("	" 0 1 (fontified t)) . -1253) (undo-tree-id1522 . -1) (#("	" 0 1 (fontified t)) . -1254) (undo-tree-id1523 . -1) 1255) nil (25898 63708 597416 878000) 0 nil])
([nil nil ((1252 . 1255)) nil (25898 63708 597413 526000) 0 nil])
([nil nil ((1255 . 1261)) nil (25898 63708 597411 571000) 0 nil])
([nil nil ((1264 . 1266)) nil (25898 63708 597409 685000) 0 nil])
([nil nil ((1266 . 1272)) nil (25898 63708 597407 800000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1266) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1267) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1268) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1269) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1270) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("." 0 1 (fontified t)) . -1271) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) 1272) nil (25898 63708 597404 937000) 0 nil])
([nil nil ((1266 . 1272)) nil (25898 63708 597397 396000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1288 1289 nil nil nil t #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil))) #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil)) #s(yas--field 3 1296 1301 nil nil nil t nil)) nil 44 nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil nil)) (1272 . 1341) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 1272) (1272 . 1357) (#("RespondWithJSON" 0 15 (fontified nil)) . -1272) (1272 . 1287)) nil (25898 63708 597395 441000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1289) (undo-tree-id1508 . -21) (1288 . 1289)) nil (25898 63708 597392 648000) 0 nil])
([nil nil ((1292 . 1294) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1292) (undo-tree-id1507 . -8) (1291 . 1292)) nil (25898 63708 597390 273000) 0 nil])
([nil nil ((1297 . 1299) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1297) (undo-tree-id1506 . -19) (1296 . 1297)) nil (25898 63708 597387 341000) 0 nil])
([nil nil ((1299 . 1301)) nil (25898 63708 597384 478000) 0 nil])
([nil nil ((apply yas--snippet-revive 1296 1301 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil)) (1296 . 1301) (#("dbObj" 0 5 (fontified nil)) . 1296) (undo-tree-id1501 . -5) (1296 . 1301) (#("dbObj" 0 5 (fontified nil)) . 1296) (undo-tree-id1502 . -5) (1296 . 1301) (#("dbObj" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -1296) (undo-tree-id1503 . -5) (undo-tree-id1504 . -5) (undo-tree-id1505 . -5) 1301) nil (25898 63708 597382 34000) 0 nil])
([nil nil ((apply yas--snippet-revive 1272 1302 #s(yas--snippet nil (#s(yas--field 1 1288 1289 nil nil nil t #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil))) #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil)) #s(yas--field 3 1296 1301 nil nil nil t nil)) nil 44 nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil nil))) nil (25898 63708 597368 348000) 0 nil])
([nil nil ((705 . 707) (t 25898 63708 700319 577000)) nil (25898 63829 641519 320000) 0 nil])
([nil nil ((656 . 662) (829 . 835)) nil (25898 63829 641517 365000) 0 nil])
([nil nil ((713 . 734)) nil (25898 63829 641515 898000) 0 nil])
([nil nil ((734 . 742)) nil (25898 63829 641514 12000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -741) (undo-tree-id1536 . -1) 742) nil (25898 63829 641512 57000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -745) (745 . 746) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -745) (745 . 746) (741 . 746)) nil (25898 63829 641509 263000) 0 nil])
([nil nil ((746 . 747) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 746) (746 . 747) (745 . 747)) nil (25898 63829 641507 377000) 0 nil])
([nil nil ((nil rear-nonsticky nil 748 . 749) (#("
" 0 1 (fontified nil)) . -828) (747 . 829) 746) nil (25898 63829 641505 72000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 746) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1)) nil (25898 63829 641502 698000) 0 nil])
([nil nil ((768 . 773) (767 . 769) (#("`" 0 1 (fontified nil)) . -767) (766 . 768)) nil (25898 63829 641499 904000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face tree-sitter-hl-face:string)) . -772) (undo-tree-id1533 . -1) 773) nil (25898 63829 641497 529000) 0 nil])
([nil nil ((774 . 776) (773 . 775) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -773) (772 . 774)) nil (25898 63829 641494 596000) 0 nil])
([nil nil ((801 . 806) (800 . 802) (#("`" 0 1 (fontified nil)) . -800) (799 . 801)) nil (25898 63829 641492 221000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -805) (undo-tree-id1532 . -1) 806) nil (25898 63829 641489 777000) 0 nil])
([nil nil ((807 . 812) (806 . 808) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -806) (805 . 807)) nil (25898 63829 641486 843000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -810) (undo-tree-id1530 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -811) (undo-tree-id1531 . -1) 812) nil (25898 63829 641484 468000) 0 nil])
([nil nil ((810 . 817)) nil (25898 63829 641481 675000) 0 nil])
([nil nil ((819 . 821)) nil (25898 63829 641479 719000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -819) (undo-tree-id1528 . -1) (#("	" 0 1 (fontified t)) . -820) (undo-tree-id1529 . -1) 821) nil (25898 63829 641477 763000) 0 nil])
([nil nil ((840 . 842)) nil (25898 63829 641474 481000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -841) (undo-tree-id1527 . -1) 842) nil (25898 63829 641472 176000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -842) (842 . 843) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -842) (842 . 843) (841 . 843) (#("`" 0 1 (fontified nil)) . -841) (841 . 842)) nil (25898 63829 641468 893000) 0 nil])
([nil nil ((848 . 858) (847 . 849) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -847) (842 . 848)) nil (25898 63829 641466 30000) 0 nil])
([nil nil ((860 . 862)) nil (25898 63829 641463 166000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -860) (undo-tree-id1525 . -1) (#("	" 0 1 (fontified t)) . -861) (undo-tree-id1526 . -1) 862) nil (25898 63829 641461 211000) 0 nil])
([nil nil ((878 . 879)) nil (25898 63829 641452 550000) 0 nil])
([nil nil ((886 . 890) (885 . 887) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -885) (880 . 886) (879 . 881) (#("`" 0 1 (fontified nil)) . -879) (879 . 880)) nil (25898 63829 641446 823000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1491) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1492) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1493) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1494) (undo-tree-id1573 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1495) (undo-tree-id1574 . -1) 1496 (t 25898 63829 647704 789000)) nil (25898 64018 643672 314000) 0 nil])
([nil nil ((1491 . 1495)) nil (25898 64018 643667 425000) 0 nil])
([nil nil ((1459 . 1461)) nil (25898 64018 643666 28000) 0 nil])
([nil nil ((1461 . 1474)) nil (25898 64018 643664 561000) 0 nil])
([nil nil ((1474 . 1478)) nil (25898 64018 643662 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 1472 1490 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (1472 . 1490) (#("CreateUserResponse" 0 18 (fontified nil)) . 1472) (1472 . 1490) (#("Create" 0 6 (fontified nil)) . 1472) (1472 . 1478) (#("CreateUserResponse" 0 18 (fontified nil)) . -1472) (1472 . 1490) (#("Create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1472) (undo-tree-id1565 . -6) (undo-tree-id1566 . -6) 1478) nil (25898 64018 643660 370000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1491) (1491 . 1492) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1491) (1491 . 1492) (1490 . 1492)) nil (25898 64018 643657 88000) 0 nil])
([nil nil ((1492 . 1494)) nil (25898 64018 643655 691000) 0 nil])
([nil nil ((1494 . 1498)) nil (25898 64018 643654 294000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1495) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1496) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("." 0 1 (fontified t)) . -1497) (undo-tree-id1564 . -1) 1498) nil (25898 64018 643652 408000) 0 nil])
([nil nil ((1495 . 1499)) nil (25898 64018 643649 55000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1498) (undo-tree-id1559 . -1) 1499) nil (25898 64018 643647 589000) 0 nil])
([nil nil ((1498 . 1502)) nil (25898 64018 643645 703000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1501) (undo-tree-id1558 . -1) 1502) nil (25898 64018 643643 747000) 0 nil])
([nil nil ((1501 . 1502)) nil (25898 64018 643642 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 1502 1504 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (1502 . 1504) (#("ID" 0 2 (fontified nil)) . 1502) (1502 . 1504) (#("ID" 0 2 (fontified nil)) . -1502) (1502 . 1504)) nil (25898 64018 643640 325000) 0 nil])
([nil nil ((1504 . 1509)) nil (25898 64018 643638 928000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1505) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1506) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1507) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1508) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) 1509) nil (25898 64018 643636 553000) 0 nil])
([nil nil ((1505 . 1513)) nil (25898 64018 643632 222000) 0 nil])
([nil nil ((apply yas--snippet-revive 1513 1515 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (1513 . 1515) (#("ID" 0 2 (fontified nil)) . 1513) (1513 . 1515) (#("ID" 0 2 (fontified nil)) . -1513) (1513 . 1515)) nil (25898 64018 643630 756000) 0 nil])
([nil nil ((1515 . 1517)) nil (25898 64018 643628 870000) 0 nil])
([nil nil ((1517 . 1521)) nil (25898 64018 643627 473000) 0 nil])
([nil nil ((apply yas--snippet-revive 1517 1524 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (1517 . 1524) (#("userRes" 0 7 (fontified nil)) . 1517) (1517 . 1524) (#("user" 0 4 (fontified nil)) . 1517) (1517 . 1521) (#("userRes" 0 7 (fontified nil)) . -1517) (1517 . 1524) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1517) (undo-tree-id1548 . -4) (undo-tree-id1549 . -4) 1521) nil (25898 64018 643625 587000) 0 nil])
([nil nil ((1524 . 1525)) nil (25898 64018 643623 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 1525 1529 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (1525 . 1529) (#("Name" 0 4 (fontified nil)) . 1525) (1525 . 1529) (#("Name" 0 4 (fontified nil)) . -1525) (1525 . 1529)) nil (25898 64018 643621 396000) 0 nil])
([nil nil ((1529 . 1530)) nil (25898 64018 643619 930000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1505) (undo-tree-id1547 . -1) 1506) nil (25898 64018 643618 533000) 0 nil])
([nil nil ((1528 . 1531)) nil (25898 64018 643616 158000) 0 nil])
([nil nil ((1531 . 1536)) nil (25898 64018 643615 180000) 0 nil])
([nil nil ((apply yas--snippet-revive 1536 1540 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (1536 . 1540) (#("Name" 0 4 (fontified nil)) . 1536) (1536 . 1540) (#("Name" 0 4 (fontified nil)) . -1536) (1536 . 1540)) nil (25898 64018 643613 224000) 0 nil])
([nil nil ((1541 . 1542) (#(" " 0 1 (fontified nil)) . -1541) (1540 . 1541)) nil (25898 64018 643611 269000) 0 nil])
([nil nil ((1542 . 1550)) nil (25898 64018 643609 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 1550 1559 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (1550 . 1559) (#("CreatedAt" 0 9 (fontified nil)) . 1550) (1550 . 1559) (#("CreatedAt" 0 9 (fontified nil)) . -1550) (1550 . 1559)) nil (25898 64018 643608 405000) 0 nil])
([nil nil ((1559 . 1567)) nil (25898 64018 643606 449000) 0 nil])
([nil nil ((apply yas--snippet-revive 1567 1576 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (1567 . 1576) (#("CreatedAt" 0 9 (fontified nil)) . 1567) (1567 . 1576) (#("CreatedAt" 0 9 (fontified nil)) . -1567) (1567 . 1576)) nil (25898 64018 643605 52000) 0 nil])
([nil nil ((1576 . 1578)) nil (25898 64018 643603 167000) 0 nil])
([nil nil ((1578 . 1586)) nil (25898 64018 643601 770000) 0 nil])
([nil nil ((apply yas--snippet-revive 1586 1595 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (1586 . 1595) (#("UpdatedAt" 0 9 (fontified nil)) . 1586) (1586 . 1595) (#("UpdatedAt" 0 9 (fontified nil)) . -1586) (1586 . 1595)) nil (25898 64018 643599 814000) 0 nil])
([nil nil ((1595 . 1599)) nil (25898 64018 643597 369000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1598) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) 1599) nil (25898 64018 643595 64000) 0 nil])
([nil nil ((1598 . 1600)) nil (25898 64018 643583 191000) 0 nil])
([nil nil ((1600 . 1603)) nil (25898 64018 643581 235000) 0 nil])
([nil nil ((apply yas--snippet-revive 1603 1612 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (1603 . 1612) (#("UpdatedAt" 0 9 (fontified nil)) . 1603) (1603 . 1612) (#("UpdatedAt" 0 9 (fontified nil)) . -1603) (1603 . 1612)) nil (25898 64018 643576 416000) 0 nil])
([nil nil ((1648 . 1651) (t 25898 64018 654193 853000)) nil (25898 64057 612472 863000) 0 nil])
([nil nil ((1978 . 1980) (t 25898 64057 622383 887000)) nil (25898 64120 477970 82000) 0 nil])
([nil nil ((1980 . 1983)) nil (25898 64120 477967 707000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1982) (undo-tree-id1638 . -1) 1983) nil (25898 64120 477966 241000) 0 nil])
([nil nil ((1982 . 1986)) nil (25898 64120 477963 936000) 0 nil])
([nil nil ((apply yas--snippet-revive 1982 1995 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (1982 . 1995) (#("Middlewares()" 0 13 (fontified nil)) . 1982) (1982 . 1995) (#("midd" 0 4 (fontified nil)) . 1982) (1982 . 1986) (#("Middlewares" 0 11 (fontified nil)) . -1982) (1982 . 1993) (#("midd" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1982) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) 1986) nil (25898 64120 477961 142000) 0 nil])
([nil nil ((1994 . 1995)) nil (25898 64120 477957 859000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1994) (undo-tree-id1635 . -1) 1995) nil (25898 64120 477956 43000) 0 nil])
([nil nil ((1994 . 2000)) nil (25898 64120 477954 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 2033 2043 #s(yas--snippet nil nil nil 57 nil nil nil nil)) (219 . 258) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 57 nil nil nil nil)) (1994 . 2004) (#("middleware" 0 10 (fontified nil)) . 1994) (1994 . 2004) (#("middle" 0 6 (fontified nil)) . 1994) (1994 . 2000) (#("middleware" 0 10 (fontified nil)) . -1994) (1994 . 2004) (#("middle" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1994) (undo-tree-id1633 . -6) (undo-tree-id1634 . -6) 2000) nil (25898 64120 477951 294000) 0 nil])
([nil nil ((2043 . 2048)) nil (25898 64120 477947 941000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2050 2050 nil nil nil t nil)) nil 58 nil #s(yas--field 1 2050 2050 nil nil nil t nil) nil nil)) (2044 . 2069) (#("Logger(${1:next http.Handler})" 0 30 (fontified nil)) . 2044) (2044 . 2074) (#("Logg" 0 4 (fontified nil)) . 2044) (2044 . 2048) (#("Logger" 0 6 (fontified nil)) . -2044) (2044 . 2050) (#("Logg" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2044) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) 2048) nil (25898 64120 477945 496000) 0 nil])
([nil nil ((#("next http.Handler" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 17 (fontified t face tree-sitter-hl-face:property)) . 2051)) nil (25898 64120 477942 144000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2050) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . 1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2051) (undo-tree-id1628 . 1) (undo-tree-id1629 . -1) (undo-tree-id1630 . 1)) nil (25898 64120 477940 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 2044 2050 #s(yas--snippet nil (#s(yas--field 1 2050 2050 nil nil nil t nil)) nil 58 nil #s(yas--field 1 2050 2050 nil nil nil t nil) nil nil))) nil (25898 64120 477933 622000) 0 nil])
([nil nil ((2032 . 2033)) nil (25898 64120 477932 226000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2032) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) 2033) nil (25898 64120 477929 851000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2023) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2024) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2025) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2026) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#("w" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2027) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2028) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2029) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2030) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2031) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) 2032) nil (25898 64120 477926 568000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2021) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2022) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) 2023) nil (25898 64120 477911 342000) 0 nil])
([nil nil ((2021 . 2024)) nil (25898 64120 477896 953000) 0 nil])
([nil nil ((931 . 933) (t 25898 64120 484968 807000)) nil (25901 4219 216621 712000) 0 nil])
([nil nil ((933 . 936)) nil (25901 4219 216621 51000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -933) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -934) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -935) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 936) nil (25901 4219 216619 969000) 0 nil])
([nil nil ((933 . 936)) nil (25901 4219 216615 911000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -933) (undo-tree-id1 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -934) (undo-tree-id2 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -935) (undo-tree-id3 . -1) 936) nil (25901 4219 216614 228000) 0 nil])
([nil nil ((933 . 934)) nil (25901 4219 216610 722000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -933) (undo-tree-id0 . -1) 934) nil (25901 4219 216609 990000) 0 nil])
([nil nil ((933 . 950)) nil (25901 4219 216555 678000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -951) (951 . 952) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -951) (951 . 952) (950 . 952) (#("`" 0 1 (fontified nil)) . -950) (950 . 951)) nil (25901 4219 216554 85000) 0 nil])
([nil nil ((957 . 962) (956 . 958) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -956) (951 . 957)) nil (25901 4219 216551 841000) 0 nil])
([nil nil ((962 . 964)) nil (25901 4219 216546 701000) 0 nil])
([nil nil ((1686 . 1688) (t 25901 4219 322401 403000)) nil (25901 4232 259216 375000) 0 nil])
([nil nil ((1688 . 1692)) nil (25901 4232 259215 995000) 0 nil])
([nil nil ((apply yas--snippet-revive 1688 1695 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1688 . 1695) (#("userRes" 0 7 (fontified nil)) . 1688) (1688 . 1695) (#("user" 0 4 (fontified nil)) . 1688) (1688 . 1692) (#("userRes" 0 7 (fontified nil)) . -1688) (1688 . 1695) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1688) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 1692) nil (25901 4232 259214 662000) 0 nil])
([nil nil ((1695 . 1696)) nil (25901 4232 259200 926000) 0 nil])
([nil nil ((apply yas--snippet-revive 1696 1702 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1696 . 1702) (#("Apikey" 0 6 (fontified nil)) . 1696) (1696 . 1702) (#("Apikey" 0 6 (fontified nil)) . -1696) (1696 . 1702)) nil (25901 4232 259200 145000) 0 nil])
([nil nil ((1702 . 1710)) nil (25901 4232 259198 301000) 0 nil])
([nil nil ((apply yas--snippet-revive 1710 1716 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (1710 . 1716) (#("Apikey" 0 6 (fontified nil)) . 1710) (1710 . 1716) (#("Apikey" 0 6 (fontified nil)) . -1710) (1710 . 1716)) nil (25901 4232 259193 402000) 0 nil])
([nil nil ((1758 . 1760) (t 25901 4232 271456 22000)) nil (25901 4274 854156 197000) 0 nil])
([nil nil ((1760 . 1767)) nil (25901 4274 854155 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1766) (1766 . 1767) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1766) (1766 . 1767) (1760 . 1767)) nil (25901 4274 854154 895000) 0 nil])
([nil nil ((1766 . 1774)) nil (25901 4274 854153 963000) 0 nil])
([nil nil ((1775 . 1776)) nil (25901 4274 854153 182000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1784) (1784 . 1785) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1784) (1784 . 1785) (1783 . 1785)) nil (25901 4274 854152 711000) 0 nil])
([nil nil ((1784 . 1795)) nil (25901 4274 854151 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 1791 1805 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1791 . 1805) (#("ResponseWriter" 0 14 (fontified nil)) . 1791) (1791 . 1805) (#("Resp" 0 4 (fontified nil)) . 1791) (1791 . 1795) (#("ResponseWriter" 0 14 (fontified nil)) . -1791) (1791 . 1805) (#("Resp" 0 4 (face tree-sitter-hl-face:type fontified t)) . -1791) (undo-tree-id25 . -4) (undo-tree-id26 . -4) 1795) nil (25901 4274 854150 437000) 0 nil])
([nil nil ((1805 . 1810)) nil (25901 4274 854147 511000) 0 nil])
([nil nil ((1810 . 1817)) nil (25901 4274 854146 539000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1815) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1816) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 1817) nil (25901 4274 854144 986000) 0 nil])
([nil nil ((1815 . 1818)) nil (25901 4274 854142 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 1815 1822 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (1815 . 1822) (#("Request" 0 7 (fontified nil)) . 1815) (1815 . 1822) (#("Req" 0 3 (fontified nil)) . 1815) (1815 . 1818) (#("Request" 0 7 (fontified nil)) . -1815) (1815 . 1822) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1815) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) 1818) nil (25901 4274 854141 490000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1825) (1825 . 1826) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1825) (1825 . 1826) (1823 . 1826)) nil (25901 4274 854123 907000) 0 nil])
([nil nil ((1826 . 1827) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1826) (1826 . 1827) (1825 . 1827)) nil (25901 4274 854117 4000) 0 nil])
([nil nil ((#("k" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1771) (undo-tree-id27 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1772) (undo-tree-id28 . -1) (#("y" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1773) (undo-tree-id29 . -1) 1774 (t 25901 4274 869635 794000)) nil (25901 4281 377866 480000) 0 nil])
([nil nil ((1771 . 1777)) nil (25901 4281 377846 753000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1831 . 1832) (#("
" 0 1 (fontified nil)) . -2126) (1830 . 2127) 1829 (t 25901 4281 391663 330000)) nil (25901 4658 211514 976000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1829) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25901 4658 211513 513000) 0 nil])
([nil nil ((#("	claims := jwt.RegisteredClaims{}
	return jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
		jwtSecret := os.Getenv(\"JWT_SECRET\")
		return []byte(jwtSecret), nil
	})
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:operator fontified t) 10 15 (fontified t) 15 31 (face tree-sitter-hl-face:type fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 35 (fontified t) 35 41 (face tree-sitter-hl-face:keyword fontified t) 41 42 (fontified t) 42 45 (face tree-sitter-hl-face:variable fontified t) 45 46 (fontified t) 46 61 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 70 (face tree-sitter-hl-face:variable fontified t) 70 72 (fontified t) 72 73 (face tree-sitter-hl-face:operator fontified t) 73 79 (face tree-sitter-hl-face:variable fontified t) 79 81 (fontified t) 81 85 (face tree-sitter-hl-face:keyword fontified t) 85 86 (face (rainbow-delimiters-depth-3-face) fontified t) 86 91 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 91 92 (fontified t) 92 93 (face tree-sitter-hl-face:operator fontified t) 93 97 (fontified t) 97 102 (face tree-sitter-hl-face:type fontified t) 102 103 (face (rainbow-delimiters-depth-3-face) fontified t) 103 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-3-face) fontified t) 105 114 (face tree-sitter-hl-face:keyword fontified t) 114 115 (face (rainbow-delimiters-depth-4-face) fontified t) 115 116 (face (rainbow-delimiters-depth-4-face) fontified t) 116 118 (fontified t) 118 123 (face tree-sitter-hl-face:type fontified t) 123 124 (face (rainbow-delimiters-depth-3-face) fontified t) 124 125 (fontified t) 125 126 (face (rainbow-delimiters-depth-3-face) fontified t) 126 129 (fontified t) 129 138 (face tree-sitter-hl-face:variable fontified t) 138 139 (fontified t) 139 141 (face tree-sitter-hl-face:operator fontified t) 141 142 (fontified t) 142 144 (face tree-sitter-hl-face:variable fontified t) 144 145 (fontified t) 145 151 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 151 152 (face (rainbow-delimiters-depth-4-face) fontified t) 152 164 (face tree-sitter-hl-face:string fontified t) 164 165 (face (rainbow-delimiters-depth-4-face) fontified t) 165 168 (fontified t) 168 174 (face tree-sitter-hl-face:keyword fontified t) 174 175 (fontified t) 175 176 (face (rainbow-delimiters-depth-4-face) fontified t) 176 177 (face (rainbow-delimiters-depth-4-face) fontified t) 177 181 (face tree-sitter-hl-face:type fontified t) 181 182 (face (rainbow-delimiters-depth-4-face) fontified t) 182 191 (face tree-sitter-hl-face:variable fontified t) 191 192 (face (rainbow-delimiters-depth-4-face) fontified t) 192 194 (fontified t) 194 197 (face tree-sitter-hl-face:constant\.builtin fontified t) 197 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-3-face) fontified t) 200 201 (face (rainbow-delimiters-depth-2-face) fontified t) 201 202 (fontified t)) . 1923) (undo-tree-id187 . -198) (undo-tree-id188 . 1) (undo-tree-id189 . -201) (undo-tree-id190 . -198) (undo-tree-id191 . -198)) nil (25901 4658 211511 450000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1876) (undo-tree-id179 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1877) (undo-tree-id180 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1878) (undo-tree-id181 . -1) (#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1879) (undo-tree-id182 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1880) (undo-tree-id183 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1881) (undo-tree-id184 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1882) (undo-tree-id185 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1883) (undo-tree-id186 . -1) 1884) nil (25901 4658 211509 195000) 0 nil])
([nil nil ((1876 . 1882)) nil (25901 4658 211504 156000) 0 nil])
([nil nil ((1920 . 1921)) nil (25901 4658 211503 745000) 0 nil])
([nil nil ((1921 . 1923)) nil (25901 4658 211502 994000) 0 nil])
([nil nil ((1923 . 1925)) nil (25901 4658 211502 252000) 0 nil])
([nil nil ((1925 . 1930)) nil (25901 4658 211501 631000) 0 nil])
([nil nil ((#("ű" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1920) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("
" 0 1 (fontified t)) . -1921) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("	" 0 1 (fontified t)) . -1922) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1923) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1924) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1925) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1926) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1927) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1928) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1929) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 1930) nil (25901 4658 211500 509000) 0 nil])
([nil nil ((1874 . 1876)) nil (25901 4658 211490 931000) 0 nil])
([nil nil ((1876 . 1882)) nil (25901 4658 211490 600000) 0 nil])
([nil nil ((apply yas--snippet-revive 1887 1894 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (158 . 169) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1876 . 1883) (#("strings" 0 7 (fontified nil)) . 1876) (1876 . 1883) (#("string" 0 6 (fontified nil)) . 1876) (1876 . 1882) (#("strings" 0 7 (fontified nil)) . -1876) (1876 . 1883) (#("string" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1876) (undo-tree-id157 . -6) (undo-tree-id158 . -6) 1882) nil (25901 4658 211489 348000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1885) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("	" 0 1 (fontified t)) . -1886) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1887) (undo-tree-id150 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1888) (undo-tree-id151 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1889) (undo-tree-id152 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1890) (undo-tree-id153 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1891) (undo-tree-id154 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1892) (undo-tree-id155 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1893) (undo-tree-id156 . -1) 1894) nil (25901 4658 211486 132000) 0 nil])
([nil nil ((1931 . 1933)) nil (25901 4658 211476 784000) 0 nil])
([nil nil ((1933 . 1937)) nil (25901 4658 211476 384000) 0 nil])
([nil nil ((1937 . 1940)) nil (25901 4658 211475 913000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1939) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 1940) nil (25901 4658 211475 231000) 0 nil])
([nil nil ((1939 . 1942)) nil (25901 4658 211473 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 1942 1949 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (1942 . 1949) (#("Queries" 0 7 (fontified nil)) . 1942) (1942 . 1949) (#("Queries" 0 7 (fontified nil)) . -1942) (1942 . 1949)) nil (25901 4658 211472 847000) 0 nil])
([nil nil ((1949 . 1950)) nil (25901 4658 211471 765000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1941) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("Q" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1942) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1943) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1944) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1945) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1946) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1947) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1948) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("." 0 1 (fontified t)) . -1949) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 1950) nil (25901 4658 211470 152000) 0 nil])
([nil nil ((1941 . 1945)) nil (25901 4658 211463 159000) 0 nil])
([nil nil ((1945 . 1946)) nil (25901 4658 211462 828000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1942) (undo-tree-id122 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1943) (undo-tree-id123 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1944) (undo-tree-id124 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1945) (undo-tree-id125 . -1) 1946) nil (25901 4658 211461 876000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1958) (1958 . 1959) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1958) (1958 . 1959) (1942 . 1959)) nil (25901 4658 211459 331000) 0 nil])
([nil nil ((#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1951) (undo-tree-id121 . -1) 1952) nil (25901 4658 211458 289000) 0 nil])
([nil nil ((1951 . 1952)) nil (25901 4658 211456 837000) 0 nil])
([nil nil ((1958 . 1963)) nil (25901 4658 211456 175000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1962) (undo-tree-id120 . -1) 1963) nil (25901 4658 211455 484000) 0 nil])
([nil nil ((1962 . 1963)) nil (25901 4658 211454 372000) 0 nil])
([nil nil ((1963 . 1965)) nil (25901 4658 211453 901000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1933) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1934) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1935) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1936) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1937) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1938) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1939) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1940) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 1941) nil (25901 4658 211452 178000) 0 nil])
([nil nil ((1933 . 1935)) nil (25901 4658 211213 558000) 0 nil])
([nil nil ((1935 . 1936)) nil (25901 4658 211212 867000) 0 nil])
([nil nil ((1936 . 1937)) nil (25901 4658 211212 196000) 0 nil])
([nil nil ((1961 . 1967)) nil (25901 4658 211211 885000) 0 nil])
([nil nil ((1968 . 1970)) nil (25901 4658 211211 565000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1968) (undo-tree-id78 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1969) (undo-tree-id79 . -1) 1970) nil (25901 4658 211210 883000) 0 nil])
([nil nil ((1968 . 1969)) nil (25901 4658 211209 170000) 0 nil])
([nil nil ((#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1944) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("B" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1945) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("y" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1946) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("A" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1947) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1948) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1949) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("k" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1950) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1951) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("y" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1952) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 1953) nil (25901 4658 211207 798000) 0 nil])
([nil nil ((1944 . 1945)) nil (25901 4658 211197 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 1938 1953 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (1938 . 1953) (#("GetUserByApiKey" 0 15 (fontified nil)) . 1938) (1938 . 1953) (#("GetUser" 0 7 (fontified nil)) . 1938) (1938 . 1945) (#("GetUserByApiKey" 0 15 (fontified nil)) . -1938) (1938 . 1953) (#("GetUser" 0 7 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -1938) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -6) 1945) nil (25901 4658 211197 37000) 0 nil])
([nil nil ((1933 . 1937)) nil (25901 4658 211194 903000) 0 nil])
([nil nil ((1937 . 1938)) nil (25901 4658 211194 573000) 0 nil])
([nil nil ((1938 . 1944)) nil (25901 4658 211194 142000) 0 nil])
([nil nil ((1944 . 1945)) nil (25901 4658 211193 701000) 0 nil])
([nil nil ((1945 . 1946)) nil (25901 4658 211193 50000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1943) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 1944) nil (25901 4658 211191 958000) 0 nil])
([nil nil ((1943 . 1944)) nil (25901 4658 211190 164000) 0 nil])
([nil nil ((1982 . 1984)) nil (25901 4658 211189 32000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1999) (1999 . 2000) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1999) (1999 . 2000) (1984 . 2000)) nil (25901 4658 211188 10000) 0 nil])
([nil nil ((2000 . 2002) (2001 . 2002) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2000) (2000 . 2002) (1999 . 2001)) nil (25901 4658 211187 219000) 0 nil])
([nil nil ((2002 . 2009)) nil (25901 4658 211186 578000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2008) (undo-tree-id54 . -1) 2009) nil (25901 4658 211185 566000) 0 nil])
([nil nil ((2001 . 2003) (#("		" 0 2 (fontified nil)) . 2000) (undo-tree-id53 . -2) (2002 . 2003)) nil (25901 4658 211184 143000) 0 nil])
([nil nil ((2000 . 2002)) nil (25901 4658 211182 660000) 0 nil])
([nil nil ((2002 . 2009)) nil (25901 4658 211181 869000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2003) (undo-tree-id47 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2004) (undo-tree-id48 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2005) (undo-tree-id49 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2006) (undo-tree-id50 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2007) (undo-tree-id51 . -1) (#("." 0 1 (fontified t)) . -2008) (undo-tree-id52 . -1) 2009) nil (25901 4658 211180 436000) 0 nil])
([nil nil ((2003 . 2008)) nil (25901 4658 211176 278000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2025 2026 nil nil nil t #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil))) #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil)) #s(yas--field 3 2033 2035 nil nil nil t nil)) nil 8 nil #s(yas--field 3 2033 2035 nil nil nil t nil) nil nil)) (2008 . 2069) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2008) (2008 . 2084) (#("RespondWithError" 0 16 (fontified nil)) . -2008) (2008 . 2024)) nil (25901 4658 211175 467000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2026) (2025 . 2026)) nil (25901 4658 211174 795000) 0 nil])
([nil nil ((2029 . 2031) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2029) (2028 . 2029)) nil (25901 4658 211174 214000) 0 nil])
([nil nil ((2033 . 2035) (#("\"" 0 1 (fontified nil)) . -2033) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 2034) (2033 . 2034)) nil (25901 4658 211173 543000) 0 nil])
([nil nil ((apply yas--snippet-revive 2008 2036 #s(yas--snippet nil (#s(yas--field 1 2025 2026 nil nil nil t #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil))) #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil)) #s(yas--field 3 2033 2035 nil nil nil t nil)) nil 8 nil #s(yas--field 3 2033 2035 nil nil nil t nil) nil nil))) nil (25901 4658 211172 752000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2029) (undo-tree-id45 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2030) (undo-tree-id46 . -1) 2031) nil (25901 4658 211172 211000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2028) (undo-tree-id44 . -1) 2029) nil (25901 4658 211170 608000) 0 nil])
([nil nil ((2028 . 2031)) nil (25901 4658 211169 616000) 0 nil])
([nil nil ((2034 . 2043)) nil (25901 4658 211169 135000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2040) (undo-tree-id41 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2041) (undo-tree-id42 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2042) (undo-tree-id43 . -1) 2043) nil (25901 4658 211168 83000) 0 nil])
([nil nil ((2040 . 2046)) nil (25901 4658 211165 578000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2048) (undo-tree-id32 . -1) (#("	" 0 1 (fontified t)) . -2049) (undo-tree-id33 . -1) (#("	" 0 1 (fontified t)) . -2050) (undo-tree-id34 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2051) (undo-tree-id35 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2052) (undo-tree-id36 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2053) (undo-tree-id37 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2054) (undo-tree-id38 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2055) (undo-tree-id39 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2056) (undo-tree-id40 . -1) 2057) nil (25901 4658 211164 366000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2058) (2058 . 2059) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2058) (2058 . 2059) (2051 . 2059)) nil (25901 4658 211159 176000) 0 nil])
([nil nil ((2059 . 2061) (2060 . 2061) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2059) (2059 . 2061) (2058 . 2060)) nil (25901 4658 211158 595000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2062 . 2063) (#("
" 0 1 (fontified nil)) . -2284) (2061 . 2285) 2060) nil (25901 4658 211157 763000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2059) (undo-tree-id30 . -2) (undo-tree-id31 . -1) 2060) nil (25901 4658 211156 691000) 0 nil])
([nil nil ((#("Create" 0 6 (face tree-sitter-hl-face:type fontified t)) . 768) 786 (#("Create" 0 6 (face tree-sitter-hl-face:type fontified t)) . 1557) 1575 (#("Create" 0 6 (face tree-sitter-hl-face:type fontified t)) . 2071) 2081) nil (25901 4658 211138 988000) 0 nil])
([nil nil ((659 . 660) (923 . 926) (955 . 958) (1405 . 1406) (#("
  " 0 3 (fontified t)) . -1406) (#(";" 0 1 (fontified t)) . -1969) (undo-tree-id197 . -1) (2047 . 2048) (2074 . 2075) (2096 . 2097) (2122 . 2123) (2158 . 2159) (2194 . 2195) (2224 . 2225) (2534 . 2535) (#("  " 0 2 (fontified t)) . 2534) (t 25901 4658 318258 914000)) nil (25901 4775 569454 974000) 0 nil])
([nil nil ((2980 . 2982) (t 25901 4775 584756 618000)) nil (25901 4823 976647 224000) 0 nil])
([nil nil ((2982 . 2985)) nil (25901 4823 976646 22000) 0 nil])
([nil nil ((apply yas--snippet-revive 2982 2990 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (2982 . 2990) (#("v1Router" 0 8 (fontified nil)) . 2982) (2982 . 2990) (#("v1R" 0 3 (fontified nil)) . 2982) (2982 . 2985) (#("v1Router" 0 8 (fontified nil)) . -2982) (2982 . 2990) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2982) (undo-tree-id218 . -3) (undo-tree-id219 . -3) 2985) nil (25901 4823 976644 649000) 0 nil])
([nil nil ((2990 . 2994)) nil (25901 4823 976641 343000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2992) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2993) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 2994) nil (25901 4823 976640 501000) 0 nil])
([nil nil ((2995 . 2998) (#(")" 0 1 (face tree-sitter-hl-face:operator fontified nil)) . -2995) (2992 . 2996)) nil (25901 4823 976638 37000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2996) (undo-tree-id213 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2997)) nil (25901 4823 976636 844000) 0 nil])
([nil nil ((#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2994) (undo-tree-id211 . -1) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2995) (undo-tree-id212 . -1) 2996) nil (25901 4823 976634 921000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2995) (2995 . 2996) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2995) (2995 . 2996) (2994 . 2996)) nil (25901 4823 976632 35000) 0 nil])
([nil nil ((2996 . 3002) (2995 . 2997) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2995) (2995 . 2996)) nil (25901 4823 976630 62000) 0 nil])
([nil nil ((3003 . 3008)) nil (25901 4823 976628 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 3005 3019 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (3005 . 3019) (#("apiCfg.GetUser" 0 14 (fontified nil)) . 3005) (3005 . 3019) (#("api" 0 3 (fontified nil)) . 3005) (3005 . 3008) (#("apiCfg.GetUser" 0 14 (fontified nil)) . -3005) (3005 . 3019) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3005) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -1) (undo-tree-id201 . -2) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) 3008) nil (25901 4823 976623 149000) 0 nil])
([nil nil ((2279 . 2281) (t 25901 4823 986962 140000)) nil (25901 20085 58351 440000) 0 nil])
([nil nil ((2281 . 2299)) nil (25901 20085 58351 19000) 0 nil])
([nil nil ((1762 . 1764)) nil (25901 20085 58350 669000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1762) (undo-tree-id225 . -1) (#("
" 0 1 (fontified t)) . -1763) (undo-tree-id226 . -1) 1764) nil (25901 20085 58350 148000) 0 nil])
([nil nil ((1762 . 1764)) nil (25901 20085 58348 224000) 0 nil])
([nil nil ((1764 . 1785)) nil (25901 20085 58347 944000) 0 nil])
([nil nil ((1785 . 1786)) nil (25901 20085 58347 403000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1788) (1788 . 1789) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1788) (1788 . 1789) (1786 . 1789)) nil (25901 20085 58346 691000) 0 nil])
([nil nil ((1788 . 1796)) nil (25901 20085 58345 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 1793 1807 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1793 . 1807) (#("ResponseWriter" 0 14 (fontified nil)) . 1793) (1793 . 1807) (#("Res" 0 3 (fontified nil)) . 1793) (1793 . 1796) (#("ResponseWriter" 0 14 (fontified nil)) . -1793) (1793 . 1807) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1793) (undo-tree-id223 . -3) (undo-tree-id224 . -3) 1796) nil (25901 20085 58345 98000) 0 nil])
([nil nil ((1807 . 1809)) nil (25901 20085 58340 460000) 0 nil])
([nil nil ((1809 . 1814)) nil (25901 20085 58339 297000) 0 nil])
([nil nil ((#("ő" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1813) (undo-tree-id222 . -1) 1814) nil (25901 20085 58338 45000) 0 nil])
([nil nil ((1813 . 1818)) nil (25901 20085 58336 472000) 0 nil])
([nil nil ((apply yas--snippet-revive 1815 1822 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (1815 . 1822) (#("Request" 0 7 (fontified nil)) . 1815) (1815 . 1822) (#("Req" 0 3 (fontified nil)) . 1815) (1815 . 1818) (#("Request" 0 7 (fontified nil)) . -1815) (1815 . 1822) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1815) (undo-tree-id220 . -3) (undo-tree-id221 . -3) 1818) nil (25901 20085 58334 488000) 0 nil])
([nil nil ((1822 . 1828)) nil (25901 20085 58315 82000) 0 nil])
([nil nil ((1828 . 1833)) nil (25901 20085 58314 681000) 0 nil])
([nil nil ((apply yas--snippet-revive 1833 1837 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (1833 . 1837) (#("User" 0 4 (fontified nil)) . 1833) (1833 . 1837) (#("User" 0 4 (fontified nil)) . -1833) (1833 . 1837)) nil (25901 20085 58308 790000) 0 nil])
([nil nil ((1838 . 1840) (t 25901 20085 166455 719000)) nil (25901 20145 863417 850000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1846) (1846 . 1847) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1846) (1846 . 1847) (1840 . 1847)) nil (25901 20145 863417 459000) 0 nil])
([nil nil ((1846 . 1848)) nil (25901 20145 863417 8000) 0 nil])
([nil nil ((1859 . 1860)) nil (25901 20145 863416 748000) 0 nil])
([nil nil ((990 . 991)) nil (25901 20145 863416 467000) 0 nil])
([nil nil ((1849 . 1853)) nil (25901 20145 863416 146000) 0 nil])
([nil nil ((1853 . 1854)) nil (25901 20145 863415 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 1850 1859 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (1850 . 1859) (#("apiConfig" 0 9 (fontified nil)) . 1850) (1850 . 1859) (#("apiC" 0 4 (fontified nil)) . 1850) (1850 . 1854) (#("apiConfig" 0 9 (fontified nil)) . -1850) (1850 . 1859) (#("apiC" 0 4 (face tree-sitter-hl-face:type fontified t)) . -1850) (undo-tree-id231 . -4) (undo-tree-id232 . -4) 1854) nil (25901 20145 863415 24000) 0 nil])
([nil nil ((1860 . 1866)) nil (25901 20145 863413 201000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1865) (undo-tree-id230 . -1) 1866) nil (25901 20145 863412 850000) 0 nil])
([nil nil ((1865 . 1869)) nil (25901 20145 863411 959000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1868) (undo-tree-id229 . -1) 1869) nil (25901 20145 863411 438000) 0 nil])
([nil nil ((1868 . 1872)) nil (25901 20145 863410 265000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1876) (1876 . 1877) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1876) (1876 . 1877) (1872 . 1877)) nil (25901 20145 863409 694000) 0 nil])
([nil nil ((1876 . 1897)) nil (25901 20145 863408 712000) 0 nil])
([nil nil ((1898 . 1909)) nil (25901 20145 863407 681000) 0 nil])
([nil nil ((apply yas--snippet-revive 1904 1915 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (1904 . 1915) (#("HandlerFunc" 0 11 (fontified nil)) . 1904) (1904 . 1915) (#("Handl" 0 5 (fontified nil)) . 1904) (1904 . 1909) (#("HandlerFunc" 0 11 (fontified nil)) . -1904) (1904 . 1915) (#("Handl" 0 5 (face tree-sitter-hl-face:type fontified t)) . -1904) (undo-tree-id227 . -5) (undo-tree-id228 . -5) 1909) nil (25901 20145 863406 528000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1917) (1917 . 1918) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1917) (1917 . 1918) (1915 . 1918)) nil (25901 20145 863391 861000) 0 nil])
([nil nil ((1918 . 1919) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1918) (1918 . 1919) (1917 . 1919)) nil (25901 20145 863385 569000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1918) (undo-tree-id244 . -1) 1919 (t 25901 20145 879050 641000)) nil (25901 20467 636330 328000) 0 nil])
([nil nil ((1918 . 1920)) nil (25901 20467 636328 455000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1917) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -1918) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#(" " 0 1 (fontified t)) . -1919) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("
" 0 1 (fontified t)) . -1920) (undo-tree-id242 . 1) (undo-tree-id243 . -1) 1921) nil (25901 20467 636326 591000) 0 nil])
([nil nil ((1918 . 1919) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1918) (1918 . 1919) (1917 . 1919)) nil (25901 20467 636301 985000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1900) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1901) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1902) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#("." 0 1 (fontified t)) . -1903) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1904) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1905) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1906) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1907) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1908) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1909) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1910) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1911) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1912) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1913) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1914) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#(" " 0 1 (fontified t)) . -1915) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1916) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("
" 0 1 (fontified t)) . -1917) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("	" 0 1 (fontified t)) . -1918) (undo-tree-id842 . -1) (#("
" 0 1 (fontified t)) . -1919) (undo-tree-id843 . 1) (undo-tree-id844 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1920) (undo-tree-id845 . -1) (undo-tree-id846 . 1) (undo-tree-id847 . -1) 1921 (t 25901 20467 649916 632000)) nil (25901 20673 69439 829000) 0 nil])
([nil nil ((#("d" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1879) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1880) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1881) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1882) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#(" " 0 1 (fontified t)) . -1883) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1884) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1885) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1886) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1887) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1888) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1889) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1890) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1891) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1892) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1893) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1894) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1895) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1896) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1897) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#(" " 0 1 (fontified t)) . -1898) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1899) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) 1900) nil (25901 20673 69415 72000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1858) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1859) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#(" " 0 1 (fontified t)) . -1860) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1861) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1862) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1863) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1864) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1865) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1866) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1867) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1868) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1869) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1870) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#("A" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1871) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -1872) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1873) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1874) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1875) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("h" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1876) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1877) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1878) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) 1879) nil (25901 20673 69373 223000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1837) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1838) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("
" 0 1 (fontified t)) . -1839) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("
" 0 1 (fontified t)) . -1840) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1841) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1842) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1843) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1844) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#(" " 0 1 (fontified t)) . -1845) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1846) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1847) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#(" " 0 1 (fontified t)) . -1848) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1849) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1850) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1851) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1852) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1853) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1854) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1855) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1856) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1857) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) 1858) nil (25901 20673 69348 997000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1816) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1817) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("q" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1818) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1819) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1820) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1821) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1822) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("," 0 1 (fontified t)) . -1823) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#(" " 0 1 (fontified t)) . -1824) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1825) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1826) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1827) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1828) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("b" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1829) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1830) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1831) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1832) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("." 0 1 (fontified t)) . -1833) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1834) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1835) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1836) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 1837) nil (25901 20673 69323 189000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1795) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1796) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1797) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1798) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1799) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1800) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1801) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("W" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1802) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1803) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1804) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1805) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1806) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1807) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("," 0 1 (fontified t)) . -1808) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#(" " 0 1 (fontified nil)) . -1809) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("*" 0 1 (face tree-sitter-hl-face:operator fontified nil)) . -1810) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1811) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1812) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1813) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1814) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("." 0 1 (fontified t)) . -1815) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) 1816) nil (25901 20673 69283 594000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1774) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1775) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1776) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1777) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1778) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1779) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1780) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1781) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1782) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#(" " 0 1 (fontified t)) . -1783) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1784) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1785) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1786) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1787) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1788) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("h" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1789) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1790) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1791) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("p" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -1792) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("." 0 1 (fontified t)) . -1793) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1794) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 1795) nil (25901 20673 69254 860000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1765) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1766) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1767) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1768) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#(" " 0 1 (fontified t)) . -1769) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1770) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1771) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1772) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1773) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) 1774) nil (25901 20673 69218 191000) 0 nil])
([nil nil ((1765 . 1782)) nil (25901 20673 69205 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1771) (1771 . 1772) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1771) (1771 . 1772) (1769 . 1772)) nil (25901 20673 69204 355000) 0 nil])
([nil nil ((1771 . 1778)) nil (25901 20673 69202 762000) 0 nil])
([nil nil ((1778 . 1780)) nil (25901 20673 69202 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 1774 1783 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (1774 . 1783) (#("apiConfig" 0 9 (fontified nil)) . 1774) (1774 . 1783) (#("apiCon" 0 6 (fontified nil)) . 1774) (1774 . 1780) (#("apiConfig" 0 9 (fontified nil)) . -1774) (1774 . 1783) (#("apiCon" 0 6 (face tree-sitter-hl-face:type fontified t)) . -1774) (undo-tree-id298 . -6) (undo-tree-id299 . -6) 1780) nil (25901 20673 69201 599000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1798) (1798 . 1799) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1798) (1798 . 1799) (1797 . 1799)) nil (25901 20673 69199 786000) 0 nil])
([nil nil ((1798 . 1805)) nil (25901 20673 69199 485000) 0 nil])
([nil nil ((1806 . 1807)) nil (25901 20673 69199 115000) 0 nil])
([nil nil ((1805 . 1817)) nil (25901 20673 69198 824000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1812) (undo-tree-id293 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1813) (undo-tree-id294 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1814) (undo-tree-id295 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1815) (undo-tree-id296 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1816) (undo-tree-id297 . -1) 1817) nil (25901 20673 69197 972000) 0 nil])
([nil nil ((1812 . 1822)) nil (25901 20673 69195 929000) 0 nil])
([nil nil ((1823 . 1836)) nil (25901 20673 69195 608000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1829) (undo-tree-id286 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1830) (undo-tree-id287 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1831) (undo-tree-id288 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1832) (undo-tree-id289 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1833) (undo-tree-id290 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1834) (undo-tree-id291 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1835) (undo-tree-id292 . -1) 1836) nil (25901 20673 69194 927000) 0 nil])
([nil nil ((1829 . 1835)) nil (25901 20673 69191 861000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1823) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1824) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1825) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("T" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1826) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("P" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1827) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("." 0 1 (fontified nil)) . -1828) (undo-tree-id279 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1829) (undo-tree-id280 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1830) (undo-tree-id281 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -1831) (undo-tree-id282 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1832) (undo-tree-id283 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1833) (undo-tree-id284 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1834) (undo-tree-id285 . -1) 1835) nil (25901 20673 69190 38000) 0 nil])
([nil nil ((1823 . 1832)) nil (25901 20673 69183 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 1829 1840 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (1829 . 1840) (#("HandlerFunc" 0 11 (fontified nil)) . 1829) (1829 . 1840) (#("han" 0 3 (fontified nil)) . 1829) (1829 . 1832) (#("HandlerFunc" 0 11 (fontified nil)) . -1829) (1829 . 1840) (#("han" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1829) (undo-tree-id267 . -3) (undo-tree-id268 . -3) 1832) nil (25901 20673 69182 203000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1811) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 1812) nil (25901 20673 69179 768000) 0 nil])
([nil nil ((1811 . 1812)) nil (25901 20673 69177 304000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t)) . -1806) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("T" 0 1 (fontified t)) . -1807) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("T" 0 1 (fontified t)) . -1808) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("P" 0 1 (fontified t)) . -1809) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 1810) nil (25901 20673 69176 11000) 0 nil])
([nil nil ((1806 . 1809)) nil (25901 20673 68879 382000) 0 nil])
([nil nil ((1809 . 1810)) nil (25901 20673 68873 881000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1842) (1842 . 1843) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1842) (1842 . 1843) (1841 . 1843) (t 25901 20673 78301 577000)) nil (25901 20677 901433 804000) 0 nil])
([nil nil ((1843 . 1844) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1843) (1843 . 1844) (1842 . 1844)) nil (25901 20677 901427 563000) 0 nil])
([nil nil ((1844 . 1846) (t 25901 20678 10325 891000)) nil (25901 21005 928808 862000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1844) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("." 0 1 (fontified t)) . -1845) (undo-tree-id926 . -1) (undo-tree-id927 . -1) 1846) nil (25901 21005 928807 960000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1936) (1844 . 1937) 1843) nil (25901 21005 928805 125000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1843) (undo-tree-id922 . -1) (undo-tree-id923 . -1)) nil (25901 21005 928803 913000) 0 nil])
([nil nil ((1934 . 1936)) nil (25901 21005 928802 861000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1937 . 1938) (#("
" 0 1 (fontified nil)) . -1986) (1936 . 1987) 1935) nil (25901 21005 928801 548000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1935) (undo-tree-id921 . -1)) nil (25901 21005 928800 456000) 0 nil])
([nil nil ((1984 . 1986)) nil (25901 21005 928799 845000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2001) (2001 . 2002) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2001) (2001 . 2002) (1986 . 2002)) nil (25901 21005 928798 583000) 0 nil])
([nil nil ((2002 . 2004) (2003 . 2004) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2002) (2002 . 2004) (2001 . 2003)) nil (25901 21005 928796 328000) 0 nil])
([nil nil ((2004 . 2006)) nil (25901 21005 928795 76000) 0 nil])
([nil nil ((2006 . 2008)) nil (25901 21005 928794 585000) 0 nil])
([nil nil ((2008 . 2009)) nil (25901 21005 928793 794000) 0 nil])
([nil nil ((2009 . 2010)) nil (25901 21005 928792 702000) 0 nil])
([nil nil ((#("	if err != nil {
		utils.
	}
" 0 1 (fontified t) 1 3 (face tree-sitter-hl-face:keyword fontified t) 3 4 (fontified t) 4 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 10 (face tree-sitter-hl-face:operator fontified t) 10 11 (fontified t) 11 14 (face tree-sitter-hl-face:constant\.builtin fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 17 (fontified t) 17 19 (fontified t) 19 24 (face tree-sitter-hl-face:variable fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t)) . 1985) (undo-tree-id912 . -27) (undo-tree-id913 . 4) (undo-tree-id914 . -28) (undo-tree-id915 . -27) (undo-tree-id916 . -1) (undo-tree-id917 . -24) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -27) 1986) nil (25901 21005 928791 579000) 0 nil])
([nil nil ((1984 . 1986)) nil (25901 21005 928785 268000) 0 nil])
([nil nil ((1986 . 1998)) nil (25901 21005 928783 815000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1997) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 1998) nil (25901 21005 928782 603000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1998) (1998 . 1999) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1998) (1998 . 1999) (1997 . 1999)) nil (25901 21005 928780 789000) 0 nil])
([nil nil ((1998 . 2000)) nil (25901 21005 928778 765000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1999) (undo-tree-id909 . -1) 2000) nil (25901 21005 928777 904000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1801) (undo-tree-id888 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1802) (undo-tree-id889 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1803) (undo-tree-id890 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1804) (undo-tree-id891 . -1) (#(" " 0 1 (fontified t)) . -1805) (undo-tree-id892 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1806) (undo-tree-id893 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1807) (undo-tree-id894 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1808) (undo-tree-id895 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1809) (undo-tree-id896 . -1) (#("." 0 1 (fontified t)) . -1810) (undo-tree-id897 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1811) (undo-tree-id898 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1812) (undo-tree-id899 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1813) (undo-tree-id900 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1814) (undo-tree-id901 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1815) (undo-tree-id902 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1816) (undo-tree-id903 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1817) (undo-tree-id904 . -1) (#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1818) (undo-tree-id905 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1819) (undo-tree-id906 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1820) (undo-tree-id907 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1821) (undo-tree-id908 . -1) 1822) nil (25901 21005 928771 211000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1798) (undo-tree-id885 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1799) (undo-tree-id886 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1800) (undo-tree-id887 . -1) 1801) nil (25901 21005 928757 686000) 0 nil])
([nil nil ((1798 . 1801)) nil (25901 21005 928754 921000) 0 nil])
([nil nil ((1801 . 1822)) nil (25901 21005 928753 889000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1801) (undo-tree-id864 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1802) (undo-tree-id865 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1803) (undo-tree-id866 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1804) (undo-tree-id867 . -1) (#(" " 0 1 (fontified t)) . -1805) (undo-tree-id868 . -1) (#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1806) (undo-tree-id869 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1807) (undo-tree-id870 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1808) (undo-tree-id871 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1809) (undo-tree-id872 . -1) (#("." 0 1 (fontified t)) . -1810) (undo-tree-id873 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1811) (undo-tree-id874 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1812) (undo-tree-id875 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1813) (undo-tree-id876 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1814) (undo-tree-id877 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1815) (undo-tree-id878 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1816) (undo-tree-id879 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1817) (undo-tree-id880 . -1) (#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1818) (undo-tree-id881 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1819) (undo-tree-id882 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1820) (undo-tree-id883 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1821) (undo-tree-id884 . -1) 1822) nil (25901 21005 928747 437000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1798) (undo-tree-id861 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1799) (undo-tree-id862 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1800) (undo-tree-id863 . -1) 1801) nil (25901 21005 928546 19000) 0 nil])
([nil nil ((1798 . 1799)) nil (25901 21005 928543 354000) 0 nil])
([nil nil ((1976 . 1979)) nil (25901 21005 928542 362000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1978) (undo-tree-id860 . -1) 1979) nil (25901 21005 928541 781000) 0 nil])
([nil nil ((1978 . 1981)) nil (25901 21005 928540 418000) 0 nil])
([nil nil ((#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1977) (undo-tree-id856 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1978) (undo-tree-id857 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1979) (undo-tree-id858 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1980) (undo-tree-id859 . -1) 1981) nil (25901 21005 928539 236000) 0 nil])
([nil nil ((1977 . 1988)) nil (25901 21005 928533 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 1982 1996 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (1982 . 1996) (#("ResponseWriter" 0 14 (fontified nil)) . 1982) (1982 . 1996) (#("Respon" 0 6 (fontified nil)) . 1982) (1982 . 1988) (#("ResponseWriter" 0 14 (fontified nil)) . -1982) (1982 . 1996) (#("Respon" 0 6 (face tree-sitter-hl-face:type fontified t)) . -1982) (undo-tree-id854 . -6) (undo-tree-id855 . -6) 1988) nil (25901 21005 928532 373000) 0 nil])
([nil nil ((1996 . 1997)) nil (25901 21005 928529 327000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1798) (undo-tree-id853 . -1) 1799) nil (25901 21005 928528 135000) 0 nil])
([nil nil ((1798 . 1801)) nil (25901 21005 928526 231000) 0 nil])
([nil nil ((1801 . 1810)) nil (25901 21005 928525 39000) 0 nil])
([nil nil ((apply yas--snippet-revive 1803 1814 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (1803 . 1814) (#("HandlerFunc" 0 11 (fontified nil)) . 1803) (1803 . 1814) (#("Handler" 0 7 (fontified nil)) . 1803) (1803 . 1810) (#("HandlerFunc" 0 11 (fontified nil)) . -1803) (1803 . 1814) (#("Handler" 0 7 (face tree-sitter-hl-face:type fontified t)) . -1803) (undo-tree-id851 . -7) (undo-tree-id852 . -7) 1810) nil (25901 21005 928522 785000) 0 nil])
([nil nil ((1799 . 1805)) nil (25901 21005 928518 547000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1799) (undo-tree-id850 . -1) 1800) nil (25901 21005 928517 465000) 0 nil])
([nil nil ((1802 . 1803)) nil (25901 21005 928516 203000) 0 nil])
([nil nil ((1805 . 1807)) nil (25901 21005 928515 551000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1805) (undo-tree-id848 . -1) (#(" " 0 1 (fontified t)) . -1806) (undo-tree-id849 . -1) 1807) nil (25901 21005 928512 826000) 0 nil])
([nil nil ((1805 . 1807)) nil (25901 21005 928488 0) 0 nil])
([nil nil ((2020 . 2021) (t 25901 21006 37340 620000)) nil (25901 21010 88016 216000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2020) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) 2021 (t 25901 21010 104329 515000)) nil (25901 21013 274721 245000) 0 nil])
([nil nil ((2020 . 2028) (t 25901 21013 382320 512000)) nil (25901 21112 123060 293000) 0 nil])
([nil nil ((2028 . 2029)) nil (25901 21112 123059 852000) 0 nil])
([nil nil ((2029 . 2032)) nil (25901 21112 123059 602000) 0 nil])
([nil nil ((apply yas--snippet-revive 2029 2036 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (2029 . 2036) (#("Request" 0 7 (fontified nil)) . 2029) (2029 . 2036) (#("Req" 0 3 (fontified nil)) . 2029) (2029 . 2032) (#("Request" 0 7 (fontified nil)) . -2029) (2029 . 2036) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -2029) (undo-tree-id956 . -3) (undo-tree-id957 . -3) 2032) nil (25901 21112 123058 350000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2039) (2039 . 2040) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2039) (2039 . 2040) (2037 . 2040)) nil (25901 21112 123054 362000) 0 nil])
([nil nil ((2040 . 2042) (2041 . 2042) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2040) (2040 . 2042) (2039 . 2041)) nil (25901 21112 123052 649000) 0 nil])
([nil nil ((2042 . 2048)) nil (25901 21112 123051 226000) 0 nil])
([nil nil ((1984 . 1986)) nil (25901 21112 123050 755000) 0 nil])
([nil nil ((1986 . 1996)) nil (25901 21112 123049 934000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2001) (2001 . 2002) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2001) (2001 . 2002) (1996 . 2002)) nil (25901 21112 123049 253000) 0 nil])
([nil nil ((2002 . 2004) (2003 . 2004) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2002) (2002 . 2004) (2001 . 2003)) nil (25901 21112 123048 792000) 0 nil])
([nil nil ((#("	return func(w http.ResponseWriter, r *http.Request) {
		utils.
	}
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:keyword fontified t) 7 8 (fontified t) 8 12 (face tree-sitter-hl-face:keyword fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 14 15 (fontified t) 15 19 (fontified t) 19 20 (fontified t) 20 34 (face tree-sitter-hl-face:type fontified t) 34 36 (fontified t) 36 37 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 37 38 (fontified t) 38 39 (face tree-sitter-hl-face:operator fontified t) 39 43 (fontified t) 43 44 (fontified t) 44 51 (face tree-sitter-hl-face:type fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (fontified t) 55 57 (fontified t) 57 62 (face tree-sitter-hl-face:variable fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-2-face) fontified t) 66 67 (fontified t)) . 2008) (undo-tree-id947 . -66) (undo-tree-id948 . 64) (undo-tree-id949 . -66) (undo-tree-id950 . -2) (undo-tree-id951 . -66) (undo-tree-id952 . -52) (undo-tree-id953 . -66) (undo-tree-id954 . -2) (undo-tree-id955 . -66) 2074) nil (25901 21112 123047 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2002 . 2003) (#("
" 0 1 (fontified nil)) . -2068) (2001 . 2069) 1985) nil (25901 21112 123043 31000) 0 nil])
([nil nil ((#("		
" 0 3 (fontified t)) . 2069) (undo-tree-id945 . -2) (undo-tree-id946 . -1) 2070) nil (25901 21112 123042 290000) 0 nil])
([nil nil ((2065 . 2070)) nil (25901 21112 123041 27000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil)) #s(yas--field 3 2114 2133 nil nil nil nil nil)) nil 21 nil #s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) nil nil)) (2065 . 2134) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2065) (2065 . 2150) (#("Respo" 0 5 (fontified nil)) . 2065) (2065 . 2070) (#("RespondWithJSON" 0 15 (fontified nil)) . -2065) (2065 . 2080) (#("Respo" 0 5 (face tree-sitter-hl-face:property fontified t)) . -2065) (undo-tree-id943 . -5) (undo-tree-id944 . -5) 2070) nil (25901 21112 123040 416000) 0 nil])
([nil nil ((apply yas--snippet-revive 2065 2134 #s(yas--snippet nil (#s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil)) #s(yas--field 3 2114 2133 nil nil nil nil nil)) nil 21 nil #s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) nil nil))) nil (25901 21112 123038 422000) 0 nil])
([nil nil ((#("		utils.RespondWithJSON(w http.ResponseWriter, code int, payload interface{})
" 0 2 (fontified t) 2 7 (fontified t) 7 8 (fontified t) 8 23 (face tree-sitter-hl-face:type fontified t) 23 24 (face (rainbow-delimiters-depth-4-face) fontified t) 24 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t) 26 30 (face tree-sitter-hl-face:variable fontified t) 30 31 (fontified t) 31 45 (face tree-sitter-hl-face:property fontified t) 45 47 (fontified t) 47 51 (face tree-sitter-hl-face:variable fontified t) 51 52 (fontified t) 52 55 (face tree-sitter-hl-face:variable fontified t) 55 57 (fontified t) 57 64 (face tree-sitter-hl-face:variable fontified t) 64 65 (fontified t) 65 73 (face tree-sitter-hl-face:keyword fontified t) 73 74 (face tree-sitter-hl-face:keyword fontified t) 74 75 (face (rainbow-delimiters-depth-5-face) fontified t) 75 76 (face (rainbow-delimiters-depth-5-face) fontified t) 76 77 (face (rainbow-delimiters-depth-4-face) fontified t) 77 78 (fontified t)) . 2057) (undo-tree-id939 . 54) (undo-tree-id940 . -77) (undo-tree-id941 . -26) (undo-tree-id942 . -26) 2083) nil (25901 21112 123038 22000) 0 nil])
([nil nil ((2058 . 2061) (2002 . 2004) (#("	" 0 1 (rear-nonsticky t fontified nil)) . -2002) (2056 . 2057)) nil (25901 21112 123035 397000) 0 nil])
([nil nil ((2063 . 2065)) nil (25901 21112 123034 966000) 0 nil])
([nil nil ((2060 . 2062)) nil (25901 21112 123034 665000) 0 nil])
([nil nil ((2062 . 2068)) nil (25901 21112 123034 345000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2085 2086 nil nil nil t #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil))) #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil)) #s(yas--field 3 2093 2095 nil nil nil t nil)) nil 22 nil #s(yas--field 3 2093 2095 nil nil nil t nil) nil nil)) (2068 . 2129) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2068) (2068 . 2144) (#("RespondWithError" 0 16 (fontified nil)) . -2068) (2068 . 2084)) nil (25901 21112 123033 774000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2086) (2085 . 2086)) nil (25901 21112 123033 183000) 0 nil])
([nil nil ((2089 . 2091) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2089) (2088 . 2089)) nil (25901 21112 123032 622000) 0 nil])
([nil nil ((2093 . 2095) (#("\"" 0 1 (fontified nil)) . -2093) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 2094) (2093 . 2094)) nil (25901 21112 123031 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 2068 2096 #s(yas--snippet nil (#s(yas--field 1 2085 2086 nil nil nil t #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil))) #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil)) #s(yas--field 3 2093 2095 nil nil nil t nil)) nil 22 nil #s(yas--field 3 2093 2095 nil nil nil t nil) nil nil))) nil (25901 21112 123031 499000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2089) (undo-tree-id937 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2090) (undo-tree-id938 . -1) 2091) nil (25901 21112 123030 417000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2088) (undo-tree-id936 . -1) 2089) nil (25901 21112 123027 211000) 0 nil])
([nil nil ((2088 . 2091)) nil (25901 21112 123015 99000) 0 nil])
([nil nil ((2094 . 2106)) nil (25901 21112 123010 540000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2124) (2124 . 2125) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2124) (2124 . 2125) (2117 . 2125) (t 25901 21112 232574 492000)) nil (25901 21123 245707 713000) 0 nil])
([nil nil ((2125 . 2127) (2126 . 2127) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2125) (2125 . 2127) (2124 . 2126)) nil (25901 21123 245706 981000) 0 nil])
([nil nil ((2127 . 2141)) nil (25901 21123 245706 89000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2138) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2139) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2140) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) 2141) nil (25901 21123 245704 66000) 0 nil])
([nil nil ((2138 . 2141)) nil (25901 21123 245672 26000) 0 nil])
([nil nil ((#("func authedHandler
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 18 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 18 19 (fontified t)) . 2666) (undo-tree-id989 . -18) (undo-tree-id990 . -18) (undo-tree-id991 . -5) (undo-tree-id992 . -18) (undo-tree-id993 . -19) (undo-tree-id994 . -17) (undo-tree-id995 . -5) (undo-tree-id996 . -18) (undo-tree-id997 . -17) (undo-tree-id998 . -17) (undo-tree-id999 . -19) 2683 (t 25901 21123 261444 433000)) nil (25901 21355 457809 215000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2666) (undo-tree-id988 . -1)) nil (25901 21355 457798 175000) 0 nil])
([nil nil ((1763 . 1765) (t 25901 21355 474671 95000)) nil (25901 21540 799114 203000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1839 . 1840) (nil fontified nil 1765 . 1840) (1765 . 1840)) nil (25901 21540 799113 692000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1840) (undo-tree-id1049 . 1)) nil (25901 21540 799112 851000) 0 nil])
([nil nil ((#("n handler" 0 1 (face tree-sitter-hl-face:keyword fontified t) 1 2 (fontified t) 2 9 (face tree-sitter-hl-face:variable fontified t)) . 2208) (undo-tree-id1048 . -8)) nil (25901 21540 799112 210000) 0 nil])
([nil nil ((#("	bearerToken := r.Header.Get(\"Authorization\")
	apikey := strings.Split(bearerToken, \" \")[1]
	user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
	if err != nil {
		return func(w http.ResponseWriter, r *http.Request) {
		  utils.RespondWithError(w, 401, \"Unauthorized\")	
	  }
	} else {
		retur
	}
" 0 1 (fontified t rear-nonsticky t) 1 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:operator fontified t) 15 16 (fontified t) 16 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:property fontified t) 24 25 (fontified t) 25 28 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 44 (face tree-sitter-hl-face:string fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 53 (face tree-sitter-hl-face:variable fontified t) 53 54 (fontified t) 54 56 (face tree-sitter-hl-face:operator fontified t) 56 57 (fontified t) 57 64 (face tree-sitter-hl-face:variable fontified t) 64 65 (fontified t) 65 70 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 82 (face tree-sitter-hl-face:variable fontified t) 82 84 (fontified t) 84 87 (face tree-sitter-hl-face:string fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (face tree-sitter-hl-face:number fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 92 (fontified t) 92 93 (fontified t rear-nonsticky t) 93 97 (face tree-sitter-hl-face:variable fontified t) 97 99 (fontified t) 99 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 104 (face tree-sitter-hl-face:operator fontified t) 104 105 (face tree-sitter-hl-face:operator fontified t) 105 106 (fontified t) 106 107 (face tree-sitter-hl-face:variable fontified t) 107 108 (fontified t) 108 110 (face tree-sitter-hl-face:property fontified t) 110 111 (fontified t) 111 126 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 126 127 (face (rainbow-delimiters-depth-2-face) fontified t) 127 128 (face tree-sitter-hl-face:variable fontified t) 128 129 (fontified t) 129 132 (face tree-sitter-hl-face:property fontified t) 132 134 (fontified t) 134 140 (face tree-sitter-hl-face:variable fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 145 (face tree-sitter-hl-face:keyword fontified t) 145 146 (fontified t) 146 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (fontified t) 150 152 (face tree-sitter-hl-face:operator fontified t) 152 153 (fontified t) 153 156 (face tree-sitter-hl-face:constant\.builtin fontified t) 156 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-2-face) fontified t) 158 159 (fontified t) 159 161 (fontified t) 161 167 (face tree-sitter-hl-face:keyword fontified t) 167 168 (fontified t) 168 172 (face tree-sitter-hl-face:keyword fontified t) 172 173 (face (rainbow-delimiters-depth-3-face) fontified t) 173 174 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 174 175 (fontified t) 175 179 (fontified t) 179 180 (fontified t) 180 194 (face tree-sitter-hl-face:type fontified t) 194 196 (fontified t) 196 197 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 197 198 (fontified t) 198 199 (face tree-sitter-hl-face:operator fontified t) 199 203 (fontified t) 203 204 (fontified t) 204 211 (face tree-sitter-hl-face:type fontified t) 211 212 (face (rainbow-delimiters-depth-3-face) fontified t) 212 213 (fontified t) 213 214 (face (rainbow-delimiters-depth-3-face) fontified t) 214 215 (fontified t) 215 219 (fontified t) 219 224 (face tree-sitter-hl-face:variable fontified t) 224 225 (fontified t) 225 241 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 241 242 (face (rainbow-delimiters-depth-4-face) fontified t) 242 243 (face tree-sitter-hl-face:variable fontified t) 243 245 (fontified t) 245 248 (face tree-sitter-hl-face:number fontified t) 248 250 (fontified t) 250 264 (face tree-sitter-hl-face:string fontified t) 264 265 (face (rainbow-delimiters-depth-4-face) fontified t) 265 266 (fontified t) 266 267 (fontified t) 267 270 (fontified t) 270 271 (face (rainbow-delimiters-depth-3-face) fontified t) 271 272 (fontified t) 272 273 (fontified t) 273 274 (face (rainbow-delimiters-depth-2-face) fontified t) 274 275 (fontified t) 275 279 (face tree-sitter-hl-face:keyword fontified t) 279 280 (fontified t) 280 281 (face (rainbow-delimiters-depth-2-face) fontified t) 281 282 (fontified t) 282 284 (fontified t) 284 289 (face tree-sitter-hl-face:variable fontified t) 289 290 (fontified t) 290 291 (fontified t) 291 292 (face (rainbow-delimiters-depth-2-face) fontified t) 292 293 (fontified t)) . 1919) (undo-tree-id1038 . -291) (undo-tree-id1039 . 4) (undo-tree-id1040 . -292) (undo-tree-id1041 . -291) (undo-tree-id1042 . -1) (undo-tree-id1043 . -242) (undo-tree-id1044 . 4) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -291) 1920) nil (25901 21540 799111 188000) 0 nil])
([nil nil ((1918 . 1920)) nil (25901 21540 799107 250000) 0 nil])
([nil nil ((1920 . 1927)) nil (25901 21540 799106 860000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1882) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1883) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1884) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1885) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("." 0 1 (fontified t)) . -1886) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (#("H" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1887) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1888) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1889) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1890) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1891) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1892) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1893) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1894) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1895) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1896) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1897) (undo-tree-id1037 . -1) 1898) nil (25901 21540 799104 195000) 0 nil])
([nil nil ((1882 . 1886)) nil (25901 21540 798989 670000) 0 nil])
([nil nil ((1886 . 1887)) nil (25901 21540 798989 269000) 0 nil])
([nil nil ((apply yas--snippet-revive 1882 1895 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (1882 . 1895) (#("authedHandler" 0 13 (fontified nil)) . 1882) (1882 . 1895) (#("authe" 0 5 (fontified nil)) . 1882) (1882 . 1887) (#("authedHandler" 0 13 (fontified nil)) . -1882) (1882 . 1895) (#("authe" 0 5 (face tree-sitter-hl-face:type fontified t)) . -1882) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) 1887) nil (25901 21540 798985 242000) 0 nil])
([nil nil ((1924 . 1932) (t 25901 21540 914749 483000)) nil (25901 21781 120745 425000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1929) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1930) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1931) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) 1932) nil (25901 21781 120744 513000) 0 nil])
([nil nil ((1930 . 1931) (1929 . 1931)) nil (25901 21781 120740 75000) 0 nil])
([nil nil ((#("9" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1930) (undo-tree-id1081 . -1) 1931) nil (25901 21781 120739 363000) 0 nil])
([nil nil ((1930 . 1932)) nil (25901 21781 120737 580000) 0 nil])
([nil nil ((1932 . 1941)) nil (25901 21781 120736 809000) 0 nil])
([nil nil ((#("q" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1940) (undo-tree-id1080 . -1) 1941) nil (25901 21781 120736 458000) 0 nil])
([nil nil ((1940 . 1941)) nil (25901 21781 120735 45000) 0 nil])
([nil nil ((apply yas--snippet-revive 1937 1951 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (1937 . 1951) (#("ResponseWriter" 0 14 (fontified nil)) . 1937) (1937 . 1951) (#("Resp" 0 4 (fontified nil)) . 1937) (1937 . 1941) (#("ResponseWriter" 0 14 (fontified nil)) . -1937) (1937 . 1951) (#("Resp" 0 4 (face tree-sitter-hl-face:type fontified t)) . -1937) (undo-tree-id1078 . -4) (undo-tree-id1079 . -4) 1941) nil (25901 21781 120734 224000) 0 nil])
([nil nil ((1951 . 1958)) nil (25901 21781 120730 877000) 0 nil])
([nil nil ((1958 . 1964)) nil (25901 21781 120729 765000) 0 nil])
([nil nil ((apply yas--snippet-revive 1961 1968 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1961 . 1968) (#("Request" 0 7 (fontified nil)) . 1961) (1961 . 1968) (#("Req" 0 3 (fontified nil)) . 1961) (1961 . 1964) (#("Request" 0 7 (fontified nil)) . -1961) (1961 . 1968) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -1961) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) 1964) nil (25901 21781 120728 623000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1971) (1971 . 1972) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1971) (1971 . 1972) (1969 . 1972)) nil (25901 21781 120726 659000) 0 nil])
([nil nil ((1972 . 1974) (1973 . 1974) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1972) (1972 . 1974) (1971 . 1973)) nil (25901 21781 120725 107000) 0 nil])
([nil nil ((1974 . 1981)) nil (25901 21781 120724 125000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1978) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1979) (undo-tree-id1074 . -1) (#(" " 0 1 (fontified t)) . -1980) (undo-tree-id1075 . -1) 1981) nil (25901 21781 120723 634000) 0 nil])
([nil nil ((1978 . 1983)) nil (25901 21781 120720 247000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1989) (1989 . 1990) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1989) (1989 . 1990) (1983 . 1990)) nil (25901 21781 120719 316000) 0 nil])
([nil nil ((1989 . 1999)) nil (25901 21781 120717 542000) 0 nil])
([nil nil ((1915 . 1917)) nil (25901 21781 120716 621000) 0 nil])
([nil nil ((1917 . 1918)) nil (25901 21781 120715 889000) 0 nil])
([nil nil ((1918 . 1925)) nil (25901 21781 120714 948000) 0 nil])
([nil nil ((1925 . 1934)) nil (25901 21781 120714 146000) 0 nil])
([nil nil ((apply yas--snippet-revive 1934 1938 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (1934 . 1938) (#("User" 0 4 (fontified nil)) . 1934) (1934 . 1938) (#("User" 0 4 (fontified nil)) . -1934) (1934 . 1938)) nil (25901 21781 120712 944000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1939) (1939 . 1940) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1939) (1939 . 1940) (1938 . 1940)) nil (25901 21781 120711 331000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1953) (undo-tree-id1071 . -1) 1954) nil (25901 21781 120710 8000) 0 nil])
([nil nil ((#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -1998) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -1999) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2000) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (#("u" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2001) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2002) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -2003) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#(" " 0 1 (fontified t)) . -2004) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) 2005) nil (25901 21781 120705 420000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2133) (1915 . 2134) 1914 (t 25901 21781 229671 788000)) nil (25901 22162 501407 62000) 0 nil])
([nil nil ((2160 . 2162) (2134 . 2136) (#("	" 0 1 (fontified nil)) . -2134) (2158 . 2159)) nil (25901 22162 501405 649000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2160) (undo-tree-id1101 . -2) 2162) nil (25901 22162 501404 697000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2343) (2160 . 2344)) nil (25901 22162 501402 483000) 0 nil])
([nil nil ((2140 . 2143)) nil (25901 22162 501401 511000) 0 nil])
([nil nil ((#("		userRes := database.User{}

		userRes := UserResponse{}
		userRes.ID = user.ID
		userRes.Name = user.Name
		userRes.CreatedAt = user.CreatedAt
		userRes.UpdatedAt = user.UpdatedAt
		userRes.Apikey = user.Apikey
" 0 2 (fontified t) 2 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 12 (face tree-sitter-hl-face:operator fontified t) 12 13 (fontified t) 13 21 (fontified t) 21 22 (fontified t) 22 26 (face tree-sitter-hl-face:type fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t rear-nonsticky t) 32 33 (face tree-sitter-hl-face:variable fontified t) 33 39 (face tree-sitter-hl-face:variable fontified t) 39 40 (fontified t) 40 42 (face tree-sitter-hl-face:operator fontified t) 42 43 (fontified t) 43 55 (face tree-sitter-hl-face:type fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 67 (face tree-sitter-hl-face:variable fontified t) 67 68 (fontified t) 68 70 (face tree-sitter-hl-face:property fontified t) 70 71 (fontified t) 71 72 (face tree-sitter-hl-face:operator fontified t) 72 73 (fontified t) 73 77 (face tree-sitter-hl-face:variable fontified t) 77 78 (fontified t) 78 80 (face tree-sitter-hl-face:property fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 90 (face tree-sitter-hl-face:variable fontified t) 90 91 (fontified t) 91 95 (face tree-sitter-hl-face:property fontified t) 95 96 (fontified t) 96 97 (face tree-sitter-hl-face:operator fontified t) 97 98 (fontified t) 98 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 107 (face tree-sitter-hl-face:property fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 117 (face tree-sitter-hl-face:variable fontified t) 117 118 (fontified t) 118 127 (face tree-sitter-hl-face:property fontified t) 127 128 (fontified t) 128 129 (face tree-sitter-hl-face:operator fontified t) 129 130 (fontified t) 130 134 (face tree-sitter-hl-face:variable fontified t) 134 135 (fontified t) 135 144 (face tree-sitter-hl-face:property fontified t) 144 145 (fontified t) 145 146 (fontified t) 146 147 (fontified t) 147 154 (face tree-sitter-hl-face:variable fontified t) 154 155 (fontified t) 155 164 (face tree-sitter-hl-face:property fontified t) 164 165 (fontified t) 165 166 (face tree-sitter-hl-face:operator fontified t) 166 167 (fontified t) 167 171 (face tree-sitter-hl-face:variable fontified t) 171 172 (fontified t) 172 181 (face tree-sitter-hl-face:property fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 191 (face tree-sitter-hl-face:variable fontified t) 191 192 (fontified t) 192 198 (face tree-sitter-hl-face:property fontified t) 198 199 (fontified t) 199 200 (face tree-sitter-hl-face:operator fontified t) 200 201 (fontified t) 201 205 (face tree-sitter-hl-face:variable fontified t) 205 206 (fontified t) 206 212 (face tree-sitter-hl-face:property fontified t) 212 213 (fontified t)) . 2134) (undo-tree-id1088 . -190) (undo-tree-id1089 . 22) (undo-tree-id1090 . -212) (undo-tree-id1091 . -8) (undo-tree-id1092 . -190) (undo-tree-id1093 . -190) (undo-tree-id1094 . 204) (undo-tree-id1095 . -213) (undo-tree-id1096 . -8) (undo-tree-id1097 . -190) (undo-tree-id1098 . -182) (undo-tree-id1099 . -190) (undo-tree-id1100 . -213) 2324) nil (25901 22162 501396 812000) 0 nil])
([nil nil ((#("	bearerToken := r.Header.Get(\"Authorization\")
	apikey := strings.Split(bearerToken, \" \")[1]
	user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
	if err != nil {
		utils.RespondWithError(w, 401, \"Unauthorized\")
	} else {
" 0 1 (fontified t rear-nonsticky t) 1 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:operator fontified t) 15 16 (fontified t) 16 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:property fontified t) 24 25 (fontified t) 25 28 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 44 (face tree-sitter-hl-face:string fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 53 (face tree-sitter-hl-face:variable fontified t) 53 54 (fontified t) 54 56 (face tree-sitter-hl-face:operator fontified t) 56 57 (fontified t) 57 64 (face tree-sitter-hl-face:variable fontified t) 64 65 (fontified t) 65 70 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 82 (face tree-sitter-hl-face:variable fontified t) 82 84 (fontified t) 84 87 (face tree-sitter-hl-face:string fontified t) 87 88 (face (rainbow-delimiters-depth-3-face) fontified t) 88 89 (face (rainbow-delimiters-depth-3-face) fontified t) 89 90 (face tree-sitter-hl-face:number fontified t) 90 91 (face (rainbow-delimiters-depth-3-face) fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 97 (face tree-sitter-hl-face:variable fontified t) 97 99 (fontified t) 99 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 104 (face tree-sitter-hl-face:operator fontified t) 104 105 (face tree-sitter-hl-face:operator fontified t) 105 106 (fontified t) 106 107 (face tree-sitter-hl-face:variable fontified t) 107 108 (fontified t) 108 110 (face tree-sitter-hl-face:property fontified t) 110 111 (fontified t) 111 126 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 126 127 (face (rainbow-delimiters-depth-3-face) fontified t) 127 128 (face tree-sitter-hl-face:variable fontified t) 128 129 (fontified t) 129 132 (face tree-sitter-hl-face:property fontified t) 132 134 (fontified t) 134 140 (face tree-sitter-hl-face:variable fontified t) 140 141 (face (rainbow-delimiters-depth-3-face) fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 145 (face tree-sitter-hl-face:keyword fontified t) 145 146 (fontified t) 146 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (fontified t) 150 152 (face tree-sitter-hl-face:operator fontified t) 152 153 (fontified t) 153 156 (face tree-sitter-hl-face:constant\.builtin fontified t) 156 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-3-face) fontified t) 158 159 (fontified t) 159 161 (fontified t) 161 166 (face tree-sitter-hl-face:variable fontified t) 166 167 (fontified t) 167 183 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 183 184 (face (rainbow-delimiters-depth-4-face) fontified t) 184 185 (face tree-sitter-hl-face:variable fontified t) 185 187 (fontified t) 187 190 (face tree-sitter-hl-face:number fontified t) 190 192 (fontified t) 192 206 (face tree-sitter-hl-face:string fontified t) 206 207 (face (rainbow-delimiters-depth-4-face) fontified t) 207 208 (fontified t) 208 209 (fontified t) 209 210 (face (rainbow-delimiters-depth-3-face) fontified t) 210 211 (fontified t) 211 215 (face tree-sitter-hl-face:keyword fontified t) 215 216 (fontified t) 216 217 (face (rainbow-delimiters-depth-3-face) fontified t) 217 218 (fontified t)) . 2287) (undo-tree-id1102 . -216) (undo-tree-id1103 . -217) (undo-tree-id1104 . -216) (undo-tree-id1105 . -8) (undo-tree-id1106 . -91) (undo-tree-id1107 . -111) (undo-tree-id1108 . -111) (undo-tree-id1109 . -93) (undo-tree-id1110 . -77) (undo-tree-id1111 . -111) (undo-tree-id1112 . -141) (undo-tree-id1113 . -8) (undo-tree-id1114 . -8) (undo-tree-id1115 . -216) 2295 (t 25901 22162 610029 692000)) nil (25901 22194 859150 725000) 0 nil])
([nil nil ((2283 . 2289)) nil (25901 22194 859133 312000) 0 nil])
([nil nil ((2289 . 2294)) nil (25901 22194 859132 971000) 0 nil])
([nil nil ((2294 . 2298)) nil (25901 22194 859132 480000) 0 nil])
([nil nil ((2284 . 2289)) nil (25901 22194 859127 391000) 0 nil])
([nil nil ((#("	}
" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t)) . 2531) (undo-tree-id1326 . -2) (t 25901 22194 875929 407000)) nil (25901 22247 401555 869000) 0 nil])
([nil nil ((2217 . 2218) (2214 . 2215) (2215 . 2216)) nil (25901 22247 401554 236000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2217) (undo-tree-id1325 . -1) (2218 . 2219) (#("}" 0 1 (fontified nil)) . -2218) (2218 . 2219)) nil (25901 22247 401553 585000) 0 nil])
([nil nil ((2135 . 2136) (2191 . 2192) (2212 . 2213) (#("	" 0 1 (fontified t rear-nonsticky t)) . 2311) (#("	" 0 1 (fontified t)) . 2338) (#("	" 0 1 (fontified t)) . 2361) (#("	" 0 1 (fontified t)) . 2388) (#("	" 0 1 (fontified t)) . 2425) (#("	" 0 1 (fontified t)) . 2462) (#("	" 0 1 (fontified t)) . 2493) 2218) nil (25901 22247 401550 99000) 0 nil])
([nil nil ((1915 . 1917)) nil (25901 22247 401549 187000) 0 nil])
([nil nil ((1917 . 1925)) nil (25901 22247 401548 866000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1915) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . 1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("	" 0 1 (fontified t)) . -1916) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1917) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1918) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1919) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1920) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1921) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1922) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1923) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("." 0 1 (fontified t)) . -1924) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 1925) nil (25901 22247 401542 134000) 0 nil])
([nil nil ((#("	bearerToken := r.Header.Get(\"Authorization\")
	apikey := strings.Split(bearerToken, \" \")[1]
	user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
	if err != nil {
		utils.RespondWithError(w, 401, \"Unauthorized\")
	} else {
" 0 1 (fontified t rear-nonsticky t) 1 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 15 (face tree-sitter-hl-face:operator fontified t) 15 16 (fontified t) 16 17 (face tree-sitter-hl-face:variable fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:property fontified t) 24 25 (fontified t) 25 28 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 44 (face tree-sitter-hl-face:string fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 53 (face tree-sitter-hl-face:variable fontified t) 53 54 (fontified t) 54 56 (face tree-sitter-hl-face:operator fontified t) 56 57 (fontified t) 57 64 (face tree-sitter-hl-face:variable fontified t) 64 65 (fontified t) 65 70 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 82 (face tree-sitter-hl-face:variable fontified t) 82 84 (fontified t) 84 87 (face tree-sitter-hl-face:string fontified t) 87 88 (face (rainbow-delimiters-depth-2-face) fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (face tree-sitter-hl-face:number fontified t) 90 91 (face (rainbow-delimiters-depth-2-face) fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 97 (face tree-sitter-hl-face:variable fontified t) 97 99 (fontified t) 99 102 (face tree-sitter-hl-face:variable fontified t) 102 103 (fontified t) 103 104 (face tree-sitter-hl-face:operator fontified t) 104 105 (face tree-sitter-hl-face:operator fontified t) 105 106 (fontified t) 106 107 (face tree-sitter-hl-face:variable fontified t) 107 108 (fontified t) 108 110 (face tree-sitter-hl-face:property fontified t) 110 111 (fontified t) 111 126 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 126 127 (face (rainbow-delimiters-depth-2-face) fontified t) 127 128 (face tree-sitter-hl-face:variable fontified t) 128 129 (fontified t) 129 132 (face tree-sitter-hl-face:property fontified t) 132 134 (fontified t) 134 140 (face tree-sitter-hl-face:variable fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 145 (face tree-sitter-hl-face:keyword fontified t) 145 146 (fontified t) 146 149 (face tree-sitter-hl-face:variable fontified t) 149 150 (fontified t) 150 152 (face tree-sitter-hl-face:operator fontified t) 152 153 (fontified t) 153 156 (face tree-sitter-hl-face:constant\.builtin fontified t) 156 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-2-face) fontified t) 158 159 (fontified t) 159 161 (fontified t) 161 166 (face tree-sitter-hl-face:variable fontified t) 166 167 (fontified t) 167 183 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 183 184 (face (rainbow-delimiters-depth-3-face) fontified t) 184 185 (face tree-sitter-hl-face:variable fontified t) 185 187 (fontified t) 187 190 (face tree-sitter-hl-face:number fontified t) 190 192 (fontified t) 192 206 (face tree-sitter-hl-face:string fontified t) 206 207 (face (rainbow-delimiters-depth-3-face) fontified t) 207 208 (fontified t) 208 209 (fontified t) 209 210 (face (rainbow-delimiters-depth-2-face) fontified t) 210 211 (fontified t) 211 215 (face tree-sitter-hl-face:keyword fontified t) 215 216 (fontified t) 216 217 (face (rainbow-delimiters-depth-2-face) fontified t) 217 218 (fontified t)) . 1916) (undo-tree-id1573 . -216) (undo-tree-id1574 . -217) (undo-tree-id1575 . -8) (undo-tree-id1576 . -216) (undo-tree-id1577 . -216) (undo-tree-id1578 . -8) (undo-tree-id1579 . -216) (undo-tree-id1580 . 2) (undo-tree-id1581 . -217) 2132 (t 25901 22247 418759 511000)) nil (25901 22295 799764 247000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2189) (1971 . 2190) 1923) nil (25901 22295 799758 646000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1917) (1973 . 1974) (2019 . 2020) (2064 . 2065) (2114 . 2115) (2131 . 2132) (2180 . 2181) 2215) nil (25901 22295 799757 144000) 0 nil])
([nil nil ((2183 . 2187)) nil (25901 22295 799755 691000) 0 nil])
([nil nil ((2187 . 2193)) nil (25901 22295 799754 739000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2183) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("	" 0 1 (fontified t)) . -2184) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("	" 0 1 (fontified t)) . -2185) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (#("	" 0 1 (fontified t)) . -2186) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2187) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2188) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2189) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2190) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2191) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -2192) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) 2193) nil (25901 22295 799748 167000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3268) (undo-tree-id1636 . -1) 3269 (t 25901 22295 909597 591000)) nil (25901 28096 89141 880000) 0 nil])
([nil nil ((3268 . 3269)) nil (25901 28096 89140 638000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3282 3282 nil nil nil t nil)) nil 27 nil #s(yas--field 1 3282 3282 nil nil nil t nil) nil nil)) (3269 . 3304) (#("authenticate(${1:handler authedHandler})" 0 40 (fontified nil)) . 3269) (3269 . 3309) (#("authenticate" 0 12 (fontified nil)) . -3269) (3269 . 3281)) nil (25901 28096 89140 137000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 21 (face tree-sitter-hl-face:variable fontified t)) . 3282)) nil (25901 28096 89139 455000) 0 nil])
([nil nil ((apply yas--snippet-revive 3269 3283 #s(yas--snippet nil (#s(yas--field 1 3282 3282 nil nil nil t nil)) nil 27 nil #s(yas--field 1 3282 3282 nil nil nil t nil) nil nil))) nil (25901 28096 89139 185000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -3282) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . 1) (undo-tree-id1635 . -1) 3283) nil (25901 28096 89138 363000) 0 nil])
([nil nil ((3289 . 3290) (#(")" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -3289) (3289 . 3290)) nil (25901 28096 89136 550000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2232) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2233) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . 1) (undo-tree-id1590 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t)) . -2234) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#(" " 0 1 (fontified t)) . -2235) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2236) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2237) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2238) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2239) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2240) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2241) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2242) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (#("f" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2243) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2244) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2245) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2246) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . 1) (undo-tree-id1630 . -1) (#(" " 0 1 (fontified t)) . -2247) (undo-tree-id1631 . -1) 2248) nil (25901 28096 89133 935000) 0 nil])
([nil nil ((2232 . 2233)) nil (25901 28096 89062 491000) 0 nil])
([nil nil ((2521 . 2523) (t 25901 28096 200566 880000)) nil (25901 28336 132029 291000) 0 nil])
([nil nil ((2523 . 2542)) nil (25901 28336 132028 990000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2543) (2543 . 2544) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2543) (2543 . 2544) (2542 . 2544)) nil (25901 28336 132028 529000) 0 nil])
([nil nil ((2543 . 2558)) nil (25901 28336 132028 139000) 0 nil])
([nil nil ((apply yas--snippet-revive 2550 2564 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (2550 . 2564) (#("ResponseWriter" 0 14 (fontified nil)) . 2550) (2550 . 2564) (#("Response" 0 8 (fontified nil)) . 2550) (2550 . 2558) (#("ResponseWriter" 0 14 (fontified nil)) . -2550) (2550 . 2564) (#("Response" 0 8 (face tree-sitter-hl-face:type fontified t)) . -2550) (undo-tree-id1721 . -8) (undo-tree-id1722 . -8) 2558) nil (25901 28336 132027 648000) 0 nil])
([nil nil ((2564 . 2577)) nil (25901 28336 132026 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 2574 2581 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (2574 . 2581) (#("Request" 0 7 (fontified nil)) . 2574) (2574 . 2581) (#("Req" 0 3 (fontified nil)) . 2574) (2574 . 2577) (#("Request" 0 7 (fontified nil)) . -2574) (2574 . 2581) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -2574) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) 2577) nil (25901 28336 132024 912000) 0 nil])
([nil nil ((2581 . 2587)) nil (25901 28336 132023 179000) 0 nil])
([nil nil ((2587 . 2592)) nil (25901 28336 132022 829000) 0 nil])
([nil nil ((apply yas--snippet-revive 2588 2596 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (2588 . 2596) (#("database" 0 8 (fontified nil)) . 2588) (2588 . 2596) (#("data" 0 4 (fontified nil)) . 2588) (2588 . 2592) (#("database" 0 8 (fontified nil)) . -2588) (2588 . 2596) (#("data" 0 4 (face tree-sitter-hl-face:type fontified t)) . -2588) (undo-tree-id1717 . -4) (undo-tree-id1718 . -4) 2592) nil (25901 28336 132021 967000) 0 nil])
([nil nil ((2596 . 2597)) nil (25901 28336 132020 234000) 0 nil])
([nil nil ((apply yas--snippet-revive 2597 2601 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (2597 . 2601) (#("User" 0 4 (fontified nil)) . 2597) (2597 . 2601) (#("User" 0 4 (fontified nil)) . -2597) (2597 . 2601)) nil (25901 28336 132019 412000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2604) (2604 . 2605) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2604) (2604 . 2605) (2602 . 2605)) nil (25901 28336 132018 110000) 0 nil])
([nil nil ((2605 . 2606) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2605) (2605 . 2606) (2604 . 2606)) nil (25901 28336 132017 629000) 0 nil])
([nil nil ((2606 . 2612)) nil (25901 28336 132016 647000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2606) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2607) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2608) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2609) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2610) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (#("." 0 1 (fontified t)) . -2611) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) 2612) nil (25901 28336 132015 715000) 0 nil])
([nil nil ((2606 . 2612)) nil (25901 28336 132011 758000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2628 2629 nil nil nil t #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil))) #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil)) #s(yas--field 3 2636 2636 nil nil nil t nil)) nil 32 nil #s(yas--field 3 2636 2636 nil nil nil t nil) nil nil)) (2612 . 2681) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2612) (2612 . 2697) (#("RespondWithJSON" 0 15 (fontified nil)) . -2612) (2612 . 2627)) nil (25901 28336 132011 317000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 2629) (2628 . 2629)) nil (25901 28336 132010 706000) 0 nil])
([nil nil ((2632 . 2634) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2632) (2631 . 2632)) nil (25901 28336 132010 355000) 0 nil])
([nil nil ((#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 16 (face tree-sitter-hl-face:keyword fontified t) 16 17 (face tree-sitter-hl-face:keyword fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2636)) nil (25901 28336 132009 794000) 0 nil])
([nil nil ((2636 . 2638) (#("\"" 0 1 (fontified nil)) . -2636) (2636 . 2637)) nil (25901 28336 132009 484000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -2636) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 2637)) nil (25901 28336 132008 852000) 0 nil])
([nil nil ((apply yas--snippet-revive 2612 2637 #s(yas--snippet nil (#s(yas--field 1 2628 2629 nil nil nil t #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil))) #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil)) #s(yas--field 3 2636 2636 nil nil nil t nil)) nil 32 nil #s(yas--field 3 2636 2636 nil nil nil t nil) nil nil))) nil (25901 28336 132007 480000) 0 nil])
([nil nil ((2604 . 2606)) nil (25901 28336 132007 89000) 0 nil])
([nil nil ((2606 . 2615)) nil (25901 28336 132006 829000) 0 nil])
([nil nil ((#("G" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2528) (undo-tree-id1700 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2529) (undo-tree-id1701 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2530) (undo-tree-id1702 . -1) 2531) nil (25901 28336 132006 288000) 0 nil])
([nil nil ((2528 . 2534)) nil (25901 28336 132004 995000) 0 nil])
([nil nil ((#("s" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2538) (undo-tree-id1693 . -1) (#("B" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2539) (undo-tree-id1694 . -1) (#("y" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2540) (undo-tree-id1695 . -1) (#("U" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2541) (undo-tree-id1696 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2542) (undo-tree-id1697 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2543) (undo-tree-id1698 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -2544) (undo-tree-id1699 . -1) 2545) nil (25901 28336 132004 204000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2602) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2603) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2604) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2605) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2606) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#(" " 0 1 (fontified t)) . -2607) (undo-tree-id1689 . -1) (#(":" 0 1 (fontified t)) . -2608) (undo-tree-id1690 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -2609) (undo-tree-id1691 . -1) (#(" " 0 1 (fontified t)) . -2610) (undo-tree-id1692 . -1) 2611) nil (25901 28336 132000 827000) 0 nil])
([nil nil ((2602 . 2607)) nil (25901 28336 131995 247000) 0 nil])
([nil nil ((2607 . 2616)) nil (25901 28336 131994 976000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2600) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (#("	" 0 1 (fontified t)) . -2601) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2602) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2603) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2604) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2605) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2606) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2607) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2608) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2609) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (#("." 0 1 (fontified t)) . -2610) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("C" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2611) (undo-tree-id1674 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2612) (undo-tree-id1675 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2613) (undo-tree-id1676 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2614) (undo-tree-id1677 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2615) (undo-tree-id1678 . -1) 2616) nil (25901 28336 131992 311000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2529) (2529 . 2530) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2529) (2529 . 2530) (2527 . 2530)) nil (25901 28336 131676 499000) 0 nil])
([nil nil ((2529 . 2532)) nil (25901 28336 131676 28000) 0 nil])
([nil nil ((2532 . 2534)) nil (25901 28336 131675 777000) 0 nil])
([nil nil ((apply yas--snippet-revive 2531 2540 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (2531 . 2540) (#("apiConfig" 0 9 (fontified nil)) . 2531) (2531 . 2540) (#("api" 0 3 (fontified nil)) . 2531) (2531 . 2534) (#("apiConfig" 0 9 (fontified nil)) . -2531) (2531 . 2540) (#("api" 0 3 (face tree-sitter-hl-face:type fontified t)) . -2531) (undo-tree-id1650 . -3) (undo-tree-id1651 . -3) 2534) nil (25901 28336 131675 46000) 0 nil])
([nil nil ((2531 . 2532)) nil (25901 28336 131673 313000) 0 nil])
([nil nil ((2617 . 2618) (#("	" 0 1 (fontified nil)) . 2616) (undo-tree-id1649 . -1) (2617 . 2618)) nil (25901 28336 131672 952000) 0 nil])
([nil nil ((2616 . 2617)) nil (25901 28336 131672 361000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2616) (undo-tree-id1648 . -1) 2617) nil (25901 28336 131672 0) 0 nil])
([nil nil ((2616 . 2620)) nil (25901 28336 131671 549000) 0 nil])
([nil nil ((2620 . 2621)) nil (25901 28336 131671 219000) 0 nil])
([nil nil ((#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2620) (undo-tree-id1647 . -1) 2621) nil (25901 28336 131670 848000) 0 nil])
([nil nil ((2620 . 2623)) nil (25901 28336 131670 307000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2620) (undo-tree-id1645 . -1) (#("b" 0 1 (face tree-sitter-hl-face:property fontified t)) . -2621) (undo-tree-id1646 . -1) 2622) nil (25901 28336 131669 886000) 0 nil])
([nil nil ((2620 . 2622)) nil (25901 28336 131668 924000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2622) (undo-tree-id1644 . -1) 2623) nil (25901 28336 131668 424000) 0 nil])
([nil nil ((2622 . 2623)) nil (25901 28336 131667 221000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2634 2639 nil nil nil t #s(yas--field 2 2641 2641 nil nil nil t nil)) #s(yas--field 2 2641 2641 nil nil nil t nil)) nil 34 nil #s(yas--field 2 2641 2641 nil nil nil t nil) nil nil)) (2623 . 2685) (#("CreateFeed(${1:ctx context.Context}, ${2:arg database.CreateFeedParams})" 0 72 (fontified nil)) . 2623) (2623 . 2695) (#("CreateFeed" 0 10 (fontified nil)) . -2623) (2623 . 2633)) nil (25901 28336 131666 410000) 0 nil])
([nil nil ((2635 . 2637) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 2635) (undo-tree-id1643 . -17) (2634 . 2635)) nil (25901 28336 131664 867000) 0 nil])
([nil nil ((2634 . 2636)) nil (25901 28336 131663 635000) 0 nil])
([nil nil ((#("arg database.CreateFeedParams" 0 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (fontified t) 4 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 29 (face tree-sitter-hl-face:property fontified t)) . 2641)) nil (25901 28336 131662 883000) 0 nil])
([nil nil ((apply yas--snippet-revive 2623 2642 #s(yas--snippet nil (#s(yas--field 1 2634 2639 nil nil nil t #s(yas--field 2 2641 2641 nil nil nil t nil)) #s(yas--field 2 2641 2641 nil nil nil t nil)) nil 34 nil #s(yas--field 2 2641 2641 nil nil nil t nil) nil nil))) nil (25901 28336 131662 312000) 0 nil])
([nil nil ((2615 . 2617)) nil (25901 28336 131661 741000) 0 nil])
([nil nil ((2617 . 2625)) nil (25901 28336 131661 410000) 0 nil])
([nil nil ((980 . 982)) nil (25901 28336 131660 960000) 0 nil])
([nil nil ((982 . 991)) nil (25901 28336 131660 629000) 0 nil])
([nil nil ((#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -987) (undo-tree-id1639 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -988) (undo-tree-id1640 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -989) (undo-tree-id1641 . -1) (#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -990) (undo-tree-id1642 . -1) 991) nil (25901 28336 131659 857000) 0 nil])
([nil nil ((987 . 991)) nil (25901 28336 131657 693000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -990) (undo-tree-id1638 . -1) 991) nil (25901 28336 131657 413000) 0 nil])
([nil nil ((990 . 994)) nil (25901 28336 131656 431000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -993) (undo-tree-id1637 . -1) 994) nil (25901 28336 131656 20000) 0 nil])
([nil nil ((993 . 1004)) nil (25901 28336 131649 658000) 0 nil])
([nil nil ((1004 . 1011)) nil (25901 28336 131649 408000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1013) (1013 . 1014) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1013) (1013 . 1014) (1010 . 1014)) nil (25901 28336 131648 937000) 0 nil])
([nil nil ((1014 . 1015) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1014) (1014 . 1015) (1013 . 1015)) nil (25901 28336 131648 456000) 0 nil])
([nil nil ((1015 . 1027)) nil (25901 28336 131648 65000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -1028) (1028 . 1029) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1028) (1028 . 1029) (1027 . 1029) (#("`" 0 1 (fontified nil)) . -1027) (1027 . 1028)) nil (25901 28336 131647 444000) 0 nil])
([nil nil ((1034 . 1038) (1033 . 1035) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1033) (1028 . 1034)) nil (25901 28336 131646 793000) 0 nil])
([nil nil ((1040 . 1042)) nil (25901 28336 131646 272000) 0 nil])
([nil nil ((1042 . 1053)) nil (25901 28336 131645 881000) 0 nil])
([nil nil ((1060 . 1063) (1059 . 1061) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1059) (1054 . 1060) (1053 . 1055) (#("`" 0 1 (fontified nil)) . -1053) (1053 . 1054)) nil (25901 28336 131642 775000) 0 nil])
([nil nil ((2705 . 2706) (#("	" 0 1 (fontified nil)) . 2704) (undo-tree-id1788 . -1) (2705 . 2706) (t 25901 28336 146847 444000)) nil (25901 28431 672340 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2705 . 2706) (#("
" 0 1 (fontified nil)) . -2891) (2704 . 2892)) nil (25901 28431 672339 156000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2759) (undo-tree-id1777 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2760) (undo-tree-id1778 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2761) (undo-tree-id1779 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2762) (undo-tree-id1780 . -1) (#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2763) (undo-tree-id1781 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2764) (undo-tree-id1782 . -1) (#("q" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2765) (undo-tree-id1783 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2766) (undo-tree-id1784 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2767) (undo-tree-id1785 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2768) (undo-tree-id1786 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -2769) (undo-tree-id1787 . -1) 2770) nil (25901 28431 672337 42000) 0 nil])
([nil nil ((2759 . 2762)) nil (25901 28431 672332 844000) 0 nil])
([nil nil ((apply yas--snippet-revive 2753 2770 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (2753 . 2770) (#("CreateFeedRequest" 0 17 (fontified nil)) . 2753) (2753 . 2770) (#("CreateFee" 0 9 (fontified nil)) . 2753) (2753 . 2762) (#("CreateFeedRequest" 0 17 (fontified nil)) . -2753) (2753 . 2770) (#("CreateFee" 0 9 (face tree-sitter-hl-face:type fontified t)) . -2753) (undo-tree-id1775 . -9) (undo-tree-id1776 . -9) 2762) nil (25901 28431 672332 122000) 0 nil])
([nil nil ((2742 . 2743) (#("us" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 2742) (2745 . 2747) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2745) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) 2746 (2797 . 2798) (#("us" 0 2 (face tree-sitter-hl-face:variable fontified t)) . 2797) (2800 . 2802) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . 2800) 2797) nil (25901 28431 672330 690000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2851) (undo-tree-id1770 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2852) (undo-tree-id1771 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -2853) (undo-tree-id1772 . -1) 2854) nil (25901 28431 672329 297000) 0 nil])
([nil nil ((2851 . 2854)) nil (25901 28431 672328 85000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2857) (undo-tree-id1750 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2858) (undo-tree-id1751 . -1) (#("m" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2859) (undo-tree-id1752 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2860) (undo-tree-id1753 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2861) (undo-tree-id1754 . -1) (#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2862) (undo-tree-id1755 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2863) (undo-tree-id1756 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2864) (undo-tree-id1757 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2865) (undo-tree-id1758 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -2866) (undo-tree-id1759 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2867) (undo-tree-id1760 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2868) (undo-tree-id1761 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2869) (undo-tree-id1762 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2870) (undo-tree-id1763 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -2871) (undo-tree-id1764 . -1) (#("w" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2872) (undo-tree-id1765 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2873) (undo-tree-id1766 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2874) (undo-tree-id1767 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2875) (undo-tree-id1768 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -2876) (undo-tree-id1769 . -1) 2877) nil (25901 28431 672326 41000) 0 nil])
([nil nil ((2857 . 2868)) nil (25901 28431 672318 597000) 0 nil])
([nil nil ((#("5" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1591) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1592) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1593) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) 1594) nil (25901 28431 672317 906000) 0 nil])
([nil nil ((1591 . 1594)) nil (25901 28431 672314 499000) 0 nil])
([nil nil ((#("I" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1597) (undo-tree-id1723 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1598) (undo-tree-id1724 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1599) (undo-tree-id1725 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1600) (undo-tree-id1726 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1601) (undo-tree-id1727 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1602) (undo-tree-id1728 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1603) (undo-tree-id1729 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1604) (undo-tree-id1730 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1605) (undo-tree-id1731 . -1) (#("S" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1606) (undo-tree-id1732 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1607) (undo-tree-id1733 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1608) (undo-tree-id1734 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1609) (undo-tree-id1735 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1610) (undo-tree-id1736 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1611) (undo-tree-id1737 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -1612) (undo-tree-id1738 . -1) (#("E" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1613) (undo-tree-id1739 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1614) (undo-tree-id1740 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1615) (undo-tree-id1741 . -1) (#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1616) (undo-tree-id1742 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1617) (undo-tree-id1743 . -1) 1618) nil (25901 28431 672311 874000) 0 nil])
([nil nil ((1597 . 1608)) nil (25901 28431 672294 772000) 0 nil])
([nil nil ((2882 . 2888) (t 25901 28431 686573 266000)) nil (25901 28555 657373 824000) 0 nil])
([nil nil ((apply yas--snippet-revive 2882 2907 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (2882 . 2907) (#("database.CreateFeedParams" 0 25 (fontified nil)) . 2882) (2882 . 2907) (#("Create" 0 6 (fontified nil)) . 2882) (2882 . 2888) (#("database.CreateFeedParams" 0 25 (fontified nil)) . -2882) (2882 . 2907) (#("Create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -2882) (undo-tree-id1832 . -6) (undo-tree-id1833 . -6) 2888) nil (25901 28555 657372 651000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2908) (2908 . 2909) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2908) (2908 . 2909) (2907 . 2909)) nil (25901 28555 657370 838000) 0 nil])
([nil nil ((2909 . 2911)) nil (25901 28555 657370 47000) 0 nil])
([nil nil ((2911 . 2916)) nil (25901 28555 657369 365000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2917 . 2918) (#("
" 0 1 (fontified nil)) . -3049) (2916 . 3050) 2915) nil (25901 28555 657368 854000) 0 nil])
([nil nil ((#("	feed.
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 2910) (undo-tree-id1825 . -6) (undo-tree-id1826 . -6) (undo-tree-id1827 . -6) (undo-tree-id1828 . -6) (undo-tree-id1829 . -6) (undo-tree-id1830 . -6) (undo-tree-id1831 . -1) 2911) nil (25901 28555 657367 943000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2874) (undo-tree-id1821 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2875) (undo-tree-id1822 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2876) (undo-tree-id1823 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2877) (undo-tree-id1824 . -1) 2878) nil (25901 28555 657365 97000) 0 nil])
([nil nil ((2874 . 2879)) nil (25901 28555 657363 534000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3034) (undo-tree-id1817 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3035) (undo-tree-id1818 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3036) (undo-tree-id1819 . -1) (#("q" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3037) (undo-tree-id1820 . -1) 3038) nil (25901 28555 657362 993000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3031) (undo-tree-id1814 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3032) (undo-tree-id1815 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3033) (undo-tree-id1816 . -1) 3034) nil (25901 28555 657360 699000) 0 nil])
([nil nil ((3031 . 3033)) nil (25901 28555 657359 597000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3032) (undo-tree-id1813 . -1) 3033) nil (25901 28555 657359 256000) 0 nil])
([nil nil ((3032 . 3034)) nil (25901 28555 657358 735000) 0 nil])
([nil nil ((apply yas--snippet-revive 3031 3043 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (3031 . 3043) (#("feedReq.Name" 0 12 (fontified nil)) . 3031) (3031 . 3043) (#("fee" 0 3 (fontified nil)) . 3031) (3031 . 3034) (#("feedReq.Name" 0 12 (fontified nil)) . -3031) (3031 . 3043) (#("fee" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3031) (undo-tree-id1811 . -3) (undo-tree-id1812 . -3) 3034) nil (25901 28555 657358 34000) 0 nil])
([nil nil ((#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3039) (undo-tree-id1806 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3040) (undo-tree-id1807 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3041) (undo-tree-id1808 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3042) (undo-tree-id1809 . -1) (#("." 0 1 (fontified t)) . -3043) (undo-tree-id1810 . -1) 3044) nil (25901 28555 657356 301000) 0 nil])
([nil nil ((3043 . 3045)) nil (25901 28555 657354 668000) 0 nil])
([nil nil ((3045 . 3048)) nil (25901 28555 657354 427000) 0 nil])
([nil nil ((apply yas--snippet-revive 3045 3050 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (3045 . 3050) (#("dbObj" 0 5 (fontified nil)) . 3045) (3045 . 3050) (#("dbO" 0 3 (fontified nil)) . 3045) (3045 . 3048) (#("dbObj" 0 5 (fontified nil)) . -3045) (3045 . 3050) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3045) (undo-tree-id1804 . -3) (undo-tree-id1805 . -3) 3048) nil (25901 28555 657353 546000) 0 nil])
([nil nil ((3050 . 3051)) nil (25901 28555 657351 832000) 0 nil])
([nil nil ((apply yas--snippet-revive 3051 3057 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (3051 . 3057) (#("UserID" 0 6 (fontified nil)) . 3051) (3051 . 3057) (#("UserID" 0 6 (fontified nil)) . -3051) (3051 . 3057)) nil (25901 28555 657351 341000) 0 nil])
([nil nil ((3057 . 3059)) nil (25901 28555 657350 810000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3058) (undo-tree-id1803 . -1) 3059) nil (25901 28555 657350 430000) 0 nil])
([nil nil ((3058 . 3065)) nil (25901 28555 657349 728000) 0 nil])
([nil nil ((apply yas--snippet-revive 3065 3067 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (3065 . 3067) (#("ID" 0 2 (fontified nil)) . 3065) (3065 . 3067) (#("ID" 0 2 (fontified nil)) . -3065) (3065 . 3067)) nil (25901 28555 657349 167000) 0 nil])
([nil nil ((3093 . 3096)) nil (25901 28555 657348 606000) 0 nil])
([nil nil ((apply yas--snippet-revive 3093 3098 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (3093 . 3098) (#("dbObj" 0 5 (fontified nil)) . 3093) (3093 . 3098) (#("dbO" 0 3 (fontified nil)) . 3093) (3093 . 3096) (#("dbObj" 0 5 (fontified nil)) . -3093) (3093 . 3098) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3093) (undo-tree-id1801 . -3) (undo-tree-id1802 . -3) 3096) nil (25901 28555 657347 885000) 0 nil])
([nil nil ((3070 . 3078)) nil (25901 28555 657346 582000) 0 nil])
([nil nil ((3074 . 3079)) nil (25901 28555 657346 342000) 0 nil])
([nil nil ((3112 . 3114)) nil (25901 28555 657345 841000) 0 nil])
([nil nil ((3114 . 3117)) nil (25901 28555 657345 641000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3114) (undo-tree-id1798 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3115) (undo-tree-id1799 . -1) (#(" " 0 1 (fontified t)) . -3116) (undo-tree-id1800 . -1) 3117) nil (25901 28555 657345 190000) 0 nil])
([nil nil ((3114 . 3118)) nil (25901 28555 657343 787000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3117) (undo-tree-id1797 . -1) 3118) nil (25901 28555 657343 417000) 0 nil])
([nil nil ((3117 . 3122)) nil (25901 28555 657342 866000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3129) (3129 . 3130) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3129) (3129 . 3130) (3122 . 3130)) nil (25901 28555 657342 405000) 0 nil])
([nil nil ((3130 . 3132) (3131 . 3132) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 3130) (3130 . 3132) (3129 . 3131)) nil (25901 28555 657341 914000) 0 nil])
([nil nil ((3132 . 3142)) nil (25901 28555 657341 463000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3138) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3139) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3140) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3141) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) 3142) nil (25901 28555 657340 711000) 0 nil])
([nil nil ((3129 . 3132)) nil (25901 28555 657331 374000) 0 nil])
([nil nil ((3132 . 3138)) nil (25901 28555 657331 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3155 3156 nil nil nil t #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil))) #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil)) #s(yas--field 3 3163 3186 nil nil nil t nil)) nil 42 nil #s(yas--field 3 3163 3186 nil nil nil t nil) nil nil)) (3138 . 3199) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3138) (3138 . 3214) (#("RespondWithError" 0 16 (fontified nil)) . -3138) (3138 . 3154)) nil (25901 28555 657330 272000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 3156) (3155 . 3156)) nil (25901 28555 657329 651000) 0 nil])
([nil nil ((3159 . 3161) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 3159) (3158 . 3159)) nil (25901 28555 657328 929000) 0 nil])
([nil nil ((3164 . 3169) (3163 . 3165) (#("\"" 0 1 (fontified nil)) . -3163) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 3164) (3163 . 3164)) nil (25901 28555 657327 847000) 0 nil])
([nil nil ((3169 . 3185)) nil (25901 28555 657327 346000) 0 nil])
([nil nil ((apply yas--snippet-revive 3138 3187 #s(yas--snippet nil (#s(yas--field 1 3155 3156 nil nil nil t #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil))) #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil)) #s(yas--field 3 3163 3186 nil nil nil t nil)) nil 42 nil #s(yas--field 3 3163 3186 nil nil nil t nil) nil nil))) nil (25901 28555 657326 936000) 0 nil])
([nil nil ((3231 . 3235)) nil (25901 28555 657324 271000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2589) (undo-tree-id1875 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2590) (undo-tree-id1876 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2591) (undo-tree-id1877 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2592) (undo-tree-id1878 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2593) (undo-tree-id1879 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2594) (undo-tree-id1880 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2595) (undo-tree-id1881 . -1) 2596 (t 25901 28555 667225 160000)) nil (25901 28588 257874 332000) 0 nil])
([nil nil ((2589 . 2593)) nil (25901 28588 257871 267000) 0 nil])
([nil nil ((#("	userRes := UserResponse{}
	userRes.ID = user.ID
	userRes.Name = user.Name
	userRes.CreatedAt = user.CreatedAt
	userRes.UpdatedAt = user.UpdatedAt
	userRes.Apikey = user.Apikey
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:variable fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 11 (face tree-sitter-hl-face:operator fontified t) 11 12 (fontified t) 12 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 35 (face tree-sitter-hl-face:variable fontified t) 35 36 (fontified t) 36 38 (face tree-sitter-hl-face:property fontified t) 38 39 (fontified t) 39 40 (face tree-sitter-hl-face:operator fontified t) 40 41 (fontified t) 41 45 (face tree-sitter-hl-face:variable fontified t) 45 46 (fontified t) 46 48 (face tree-sitter-hl-face:property fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 62 (face tree-sitter-hl-face:property fontified t) 62 63 (fontified t) 63 64 (face tree-sitter-hl-face:operator fontified t) 64 65 (fontified t) 65 69 (face tree-sitter-hl-face:variable fontified t) 69 70 (fontified t) 70 74 (face tree-sitter-hl-face:property fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 83 (face tree-sitter-hl-face:variable fontified t) 83 84 (fontified t) 84 93 (face tree-sitter-hl-face:property fontified t) 93 94 (fontified t) 94 95 (face tree-sitter-hl-face:operator fontified t) 95 96 (fontified t) 96 100 (face tree-sitter-hl-face:variable fontified t) 100 101 (fontified t) 101 110 (face tree-sitter-hl-face:property fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 119 (face tree-sitter-hl-face:variable fontified t) 119 120 (fontified t) 120 127 (face tree-sitter-hl-face:property fontified t) 127 129 (face tree-sitter-hl-face:property fontified t) 129 130 (fontified t) 130 131 (face tree-sitter-hl-face:operator fontified t) 131 132 (fontified t) 132 136 (face tree-sitter-hl-face:variable fontified t) 136 137 (fontified t) 137 146 (face tree-sitter-hl-face:property fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 155 (face tree-sitter-hl-face:variable fontified t) 155 156 (fontified t) 156 158 (face tree-sitter-hl-face:property fontified t) 158 159 (face tree-sitter-hl-face:property fontified t) 159 162 (face tree-sitter-hl-face:property fontified t) 162 163 (fontified t) 163 164 (face tree-sitter-hl-face:operator fontified t) 164 165 (fontified t) 165 169 (face tree-sitter-hl-face:variable fontified t) 169 170 (fontified t) 170 176 (face tree-sitter-hl-face:property fontified t) 176 177 (fontified t)) . 2381) (undo-tree-id1834 . -167) (undo-tree-id1835 . 1) (undo-tree-id1836 . -176) (undo-tree-id1837 . -20) (undo-tree-id1838 . -167) (undo-tree-id1839 . -167) (undo-tree-id1840 . -48) (undo-tree-id1841 . -26) (undo-tree-id1842 . -26) (undo-tree-id1843 . -26) (undo-tree-id1844 . -26) (undo-tree-id1845 . -26) (undo-tree-id1846 . -48) (undo-tree-id1847 . -47) (undo-tree-id1848 . -47) (undo-tree-id1849 . -47) (undo-tree-id1850 . -47) (undo-tree-id1851 . -47) (undo-tree-id1852 . -47) (undo-tree-id1853 . -177) (undo-tree-id1854 . -20) (undo-tree-id1855 . -167) (undo-tree-id1856 . -20) (undo-tree-id1857 . -20) (undo-tree-id1858 . -147) (undo-tree-id1859 . -167) (undo-tree-id1860 . -167) (undo-tree-id1861 . -132) (undo-tree-id1862 . -136) (undo-tree-id1863 . -165) (undo-tree-id1864 . -169) (undo-tree-id1865 . -41) (undo-tree-id1866 . -45) (undo-tree-id1867 . -65) (undo-tree-id1868 . -69) (undo-tree-id1869 . -96) (undo-tree-id1870 . -100) (undo-tree-id1871 . -167) (undo-tree-id1872 . -167) (undo-tree-id1873 . -167) (undo-tree-id1874 . -177) 2548) nil (25901 28588 257868 331000) 0 nil])
([nil nil ((3815 . 3816) (#("	" 0 1 (fontified nil)) . 3814) (undo-tree-id1926 . -1) (3813 . 3816) (t 25901 28588 371134 531000)) nil (25901 28704 329639 601000) 0 nil])
([nil nil ((3816 . 3821)) nil (25901 28704 329638 909000) 0 nil])
([nil nil ((apply yas--snippet-revive 3816 3824 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (3816 . 3824) (#("v1Router" 0 8 (fontified nil)) . 3816) (3816 . 3824) (#("v1Rou" 0 5 (fontified nil)) . 3816) (3816 . 3821) (#("v1Router" 0 8 (fontified nil)) . -3816) (3816 . 3824) (#("v1Rou" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -3816) (undo-tree-id1924 . -5) (undo-tree-id1925 . -5) 3821) nil (25901 28704 329637 827000) 0 nil])
([nil nil ((3824 . 3828)) nil (25901 28704 329636 54000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3830 3838 nil nil nil t #s(yas--field 2 3840 3878 nil nil nil t nil)) #s(yas--field 2 3840 3878 nil nil nil t nil)) nil 44 nil #s(yas--field 2 3840 3878 nil nil nil t nil) nil nil)) (3825 . 3873) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 3825) (3825 . 3883) (#("Pos" 0 3 (fontified nil)) . 3825) (3825 . 3828) (#("Post" 0 4 (fontified nil)) . -3825) (3825 . 3829) (#("Pos" 0 3 (face tree-sitter-hl-face:property fontified t)) . -3825) (undo-tree-id1922 . -3) (undo-tree-id1923 . -3) 3828) nil (25901 28704 329635 333000) 0 nil])
([nil nil ((3830 . 3832) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3830) (undo-tree-id1920 . -1) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 3831) (undo-tree-id1921 . -14) (3830 . 3831)) nil (25901 28704 329633 830000) 0 nil])
([nil nil ((3831 . 3837)) nil (25901 28704 329632 237000) 0 nil])
([nil nil ((3841 . 3843) (#("handlerFn http.HandlerFunc" 0 9 (face tree-sitter-hl-face:variable fontified nil) 9 10 (fontified nil) 10 14 (face tree-sitter-hl-face:variable fontified nil) 14 15 (fontified nil) 15 26 (face tree-sitter-hl-face:property fontified nil)) . 3841) (undo-tree-id1919 . -26) (3840 . 3841)) nil (25901 28704 329631 646000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3840) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3841) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3842) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) 3843) nil (25901 28704 329630 564000) 0 nil])
([nil nil ((3840 . 3843)) nil (25901 28704 329627 318000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3860 3877 nil nil nil t nil)) nil 45 nil #s(yas--field 1 3860 3877 nil nil nil t nil) #s(yas--field 2 3840 3878 nil nil nil t nil) nil)) (3840 . 3882) (#("apiCfg.authenticate(${1:handler authedHandler})" 0 47 (fontified nil)) . 3840) (undo-tree-id1900 . -47) (3840 . 3887) (#("api" 0 3 (fontified nil)) . 3840) (undo-tree-id1901 . -3) (3840 . 3843) (#("apiCfg.authenticate" 0 19 (fontified nil)) . -3840) (undo-tree-id1902 . -19) (3840 . 3859) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3840) (undo-tree-id1903 . -3) (undo-tree-id1904 . -3) (undo-tree-id1905 . -3) (undo-tree-id1906 . -3) (undo-tree-id1907 . -3) (undo-tree-id1908 . -3) (undo-tree-id1909 . -3) 3843) nil (25901 28704 329626 516000) 0 nil])
([nil nil ((3861 . 3863) (#("handler authedHandler" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 21 (face tree-sitter-hl-face:variable fontified nil)) . 3861) (undo-tree-id1897 . -21) (undo-tree-id1898 . -8) (undo-tree-id1899 . -9) (3860 . 3861)) nil (25901 28704 329622 328000) 0 nil])
([nil nil ((apply yas--snippet-revive 3860 3877 #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 1 3860 3877 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 1 3860 3877 nil nil nil t nil) nil)) (3860 . 3877) (#("apiCfg.CreateFeed" 0 17 (fontified nil)) . 3860) (undo-tree-id1882 . -17) (3860 . 3877) (#("api" 0 3 (fontified nil)) . 3860) (undo-tree-id1883 . -3) (3860 . 3863) (#("apiCfg.CreateFeed" 0 17 (fontified nil)) . -3860) (undo-tree-id1884 . -17) (3860 . 3877) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3860) (undo-tree-id1885 . -3) (undo-tree-id1886 . -3) (undo-tree-id1887 . -3) (undo-tree-id1888 . -1) (undo-tree-id1889 . -2) (undo-tree-id1890 . -3) (undo-tree-id1891 . -3) (undo-tree-id1892 . -3) (undo-tree-id1893 . -3) (undo-tree-id1894 . -3) (undo-tree-id1895 . -3) (undo-tree-id1896 . -3) 3863) nil (25901 28704 329620 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 3840 3878 #s(yas--snippet nil (#s(yas--field 1 3860 3877 nil nil nil t nil)) nil 45 nil #s(yas--field 1 3860 3877 nil nil nil t nil) #s(yas--field 2 3840 3878 nil nil nil t nil) nil))) nil (25901 28704 329608 803000) 0 nil])
([nil nil ((apply yas--snippet-revive 3825 3879 #s(yas--snippet nil (#s(yas--field 1 3830 3838 nil nil nil t #s(yas--field 2 3840 3878 nil nil nil t nil)) #s(yas--field 2 3840 3878 nil nil nil t nil)) nil 44 nil #s(yas--field 2 3840 3878 nil nil nil t nil) nil nil))) nil (25901 28704 329605 517000) 0 nil])
([nil nil ((2887 . 2889) (t 25901 28704 344816 581000)) nil (25901 28786 437912 880000) 0 nil])
([nil nil ((2889 . 2892)) nil (25901 28786 437912 650000) 0 nil])
([nil nil ((apply yas--snippet-revive 2889 2894 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (2889 . 2894) (#("dbObj" 0 5 (fontified nil)) . 2889) (2889 . 2894) (#("dbO" 0 3 (fontified nil)) . 2889) (2889 . 2892) (#("dbObj" 0 5 (fontified nil)) . -2889) (2889 . 2894) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -2889) (undo-tree-id1941 . -3) (undo-tree-id1942 . -3) 2892) nil (25901 28786 437911 708000) 0 nil])
([nil nil ((2894 . 2895)) nil (25901 28786 437910 345000) 0 nil])
([nil nil ((apply yas--snippet-revive 2895 2898 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (2895 . 2898) (#("Url" 0 3 (fontified nil)) . 2895) (2895 . 2898) (#("Url" 0 3 (fontified nil)) . -2895) (2895 . 2898)) nil (25901 28786 437909 754000) 0 nil])
([nil nil ((2898 . 2905)) nil (25901 28786 437908 682000) 0 nil])
([nil nil ((apply yas--snippet-revive 2901 2912 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (2901 . 2912) (#("feedReq.Url" 0 11 (fontified nil)) . 2901) (2901 . 2912) (#("feed" 0 4 (fontified nil)) . 2901) (2901 . 2905) (#("feedReq.Url" 0 11 (fontified nil)) . -2901) (2901 . 2912) (#("feed" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -2901) (undo-tree-id1927 . -4) (undo-tree-id1928 . -4) (undo-tree-id1929 . -1) (undo-tree-id1930 . -2) (undo-tree-id1931 . -3) (undo-tree-id1932 . -4) (undo-tree-id1933 . -4) (undo-tree-id1934 . -4) (undo-tree-id1935 . -4) (undo-tree-id1936 . -4) (undo-tree-id1937 . -4) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) 2905) nil (25901 28786 437905 486000) 0 nil])
([nil nil ((3904 . 3906) (t 25901 28786 454594 387000)) nil (25901 28910 43027 733000) 0 nil])
([nil nil ((3906 . 3907)) nil (25901 28910 43027 523000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3904) (undo-tree-id1967 . -1) (#("	" 0 1 (fontified t)) . -3905) (undo-tree-id1968 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3906) (undo-tree-id1969 . -1) 3907) nil (25901 28910 43027 112000) 0 nil])
([nil nil ((3083 . 3085)) nil (25901 28910 43025 820000) 0 nil])
([nil nil ((3085 . 3091)) nil (25901 28910 43025 660000) 0 nil])
([nil nil ((3090 . 3092)) nil (25901 28910 43025 509000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -3091) (undo-tree-id1964 . -1) (undo-tree-id1965 . 1) (undo-tree-id1966 . -1) 3092) nil (25901 28910 43025 119000) 0 nil])
([nil nil ((3092 . 3097)) nil (25901 28910 43023 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 3094 3103 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (3094 . 3103) (#("apiConfig" 0 9 (fontified nil)) . 3094) (3094 . 3103) (#("api" 0 3 (fontified nil)) . 3094) (3094 . 3097) (#("apiConfig" 0 9 (fontified nil)) . -3094) (3094 . 3103) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3094) (undo-tree-id1962 . -3) (undo-tree-id1963 . -3) 3097) nil (25901 28910 43023 55000) 0 nil])
([nil nil ((3103 . 3109) (#(")" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -3103) (3103 . 3104)) nil (25901 28910 43021 943000) 0 nil])
([nil nil ((#("a" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -3108) (undo-tree-id1961 . -1) 3109) nil (25901 28910 43021 572000) 0 nil])
([nil nil ((3108 . 3113)) nil (25901 28910 43021 131000) 0 nil])
([nil nil ((3113 . 3116)) nil (25901 28910 43020 961000) 0 nil])
([nil nil ((#("D" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -3112) (undo-tree-id1957 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -3113) (undo-tree-id1958 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -3114) (undo-tree-id1959 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t)) . -3115) (undo-tree-id1960 . -1) 3116) nil (25901 28910 43020 269000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -3117) (3117 . 3118) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -3117) (3117 . 3118) (3112 . 3118)) nil (25901 28910 43018 727000) 0 nil])
([nil nil ((3117 . 3120)) nil (25901 28910 43018 336000) 0 nil])
([nil nil ((#("j" 0 1 (face tree-sitter-hl-face:type fontified t)) . -3119) (undo-tree-id1956 . -1) 3120) nil (25901 28910 43017 675000) 0 nil])
([nil nil ((3119 . 3127)) nil (25901 28910 43017 114000) 0 nil])
([nil nil ((apply yas--snippet-revive 3124 3138 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (3124 . 3138) (#("ResponseWriter" 0 14 (fontified nil)) . 3124) (3124 . 3138) (#("Res" 0 3 (fontified nil)) . 3124) (3124 . 3127) (#("ResponseWriter" 0 14 (fontified nil)) . -3124) (3124 . 3138) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -3124) (undo-tree-id1954 . -3) (undo-tree-id1955 . -3) 3127) nil (25901 28910 43016 372000) 0 nil])
([nil nil ((3138 . 3151)) nil (25901 28910 43014 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 3148 3155 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (3148 . 3155) (#("Request" 0 7 (fontified nil)) . 3148) (3148 . 3155) (#("Req" 0 3 (fontified nil)) . 3148) (3148 . 3151) (#("Request" 0 7 (fontified nil)) . -3148) (3148 . 3155) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -3148) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) 3151) nil (25901 28910 43014 188000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3159) (3159 . 3160) (#("}" 0 1 (fontified nil)) . -3159) (3158 . 3160) (3156 . 3159)) nil (25901 28910 43012 535000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3158) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) 3159) nil (25901 28910 43011 753000) 0 nil])
([nil nil ((3159 . 3160) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 3159) (3159 . 3160) (3158 . 3160)) nil (25901 28910 42999 410000) 0 nil])
([nil nil ((3160 . 3167) (t 25901 28910 149263 178000)) nil (25901 29019 538291 736000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3160) (undo-tree-id1992 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3161) (undo-tree-id1993 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3162) (undo-tree-id1994 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3163) (undo-tree-id1995 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3164) (undo-tree-id1996 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -3165) (undo-tree-id1997 . -1) (#(" " 0 1 (fontified t)) . -3166) (undo-tree-id1998 . -1) 3167) nil (25901 29019 538289 993000) 0 nil])
([nil nil ((3160 . 3166)) nil (25901 29019 538286 466000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3160) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3161) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3162) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3163) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3164) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (#("." 0 1 (fontified t)) . -3165) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) 3166) nil (25901 29019 538285 504000) 0 nil])
([nil nil ((3160 . 3163)) nil (25901 29019 538137 728000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3162) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) 3163) nil (25901 29019 538137 357000) 0 nil])
([nil nil ((3162 . 3177)) nil (25901 29019 538136 566000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3174) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3175) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3176) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) 3177) nil (25901 29019 538136 4000) 0 nil])
([nil nil ((3174 . 3178)) nil (25901 29019 538132 999000) 0 nil])
([nil nil ((apply yas--snippet-revive 3174 3182 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (3174 . 3182) (#("database" 0 8 (fontified nil)) . 3174) (3174 . 3182) (#("data" 0 4 (fontified nil)) . 3174) (3174 . 3178) (#("database" 0 8 (fontified nil)) . -3174) (3174 . 3182) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -3174) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) 3178) nil (25901 29019 538131 797000) 0 nil])
([nil nil ((3182 . 3186)) nil (25901 29019 538121 838000) 0 nil])
([nil nil ((3196 . 3197) (#(")" 0 1 (fontified nil)) . -3195) (3195 . 3196) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3195) (3195 . 3196) (3186 . 3196)) nil (25901 29019 538119 103000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3174) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3175) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3176) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3177) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3178) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3179) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3180) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3181) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) 3182 (t 25901 29019 551872 976000)) nil (25901 29058 131438 198000) 0 nil])
([nil nil ((3174 . 3176)) nil (25901 29058 131297 775000) 0 nil])
([nil nil ((3176 . 3177)) nil (25901 29058 131297 635000) 0 nil])
([nil nil ((3177 . 3178)) nil (25901 29058 131297 395000) 0 nil])
([nil nil ((3191 . 3194)) nil (25901 29058 131297 184000) 0 nil])
([nil nil ((3194 . 3196)) nil (25901 29058 131297 34000) 0 nil])
([nil nil ((3198 . 3200)) nil (25901 29058 131296 864000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3215) (3215 . 3216) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3215) (3215 . 3216) (3200 . 3216)) nil (25901 29058 131296 473000) 0 nil])
([nil nil ((3216 . 3218) (3217 . 3218) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 3216) (3216 . 3218) (3215 . 3217)) nil (25901 29058 131296 12000) 0 nil])
([nil nil ((3218 . 3224)) nil (25901 29058 131295 681000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3241 3242 nil nil nil t #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil))) #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil)) #s(yas--field 3 3249 3272 nil nil nil t nil)) nil 54 nil #s(yas--field 3 3249 3272 nil nil nil t nil) nil nil)) (3224 . 3285) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3224) (3224 . 3300) (#("RespondWithError" 0 16 (fontified nil)) . -3224) (3224 . 3240)) nil (25901 29058 131294 970000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 3242) (undo-tree-id2002 . -21) (3241 . 3242)) nil (25901 29058 131294 489000) 0 nil])
([nil nil ((3245 . 3247) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 3245) (undo-tree-id2001 . -8) (3244 . 3245)) nil (25901 29058 131293 708000) 0 nil])
([nil nil ((3250 . 3270) (3249 . 3251) (#("\"" 0 1 (fontified nil)) . -3249) (undo-tree-id1999 . -1) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 3250) (undo-tree-id2000 . -10) (3249 . 3250)) nil (25901 29058 131292 375000) 0 nil])
([nil nil ((3270 . 3271)) nil (25901 29058 131284 591000) 0 nil])
([nil nil ((apply yas--snippet-revive 3224 3273 #s(yas--snippet nil (#s(yas--field 1 3241 3242 nil nil nil t #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil))) #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil)) #s(yas--field 3 3249 3272 nil nil nil t nil)) nil 54 nil #s(yas--field 3 3249 3272 nil nil nil t nil) nil nil))) nil (25901 29058 131281 765000) 0 nil])
([nil nil ((3276 . 3278) (t 25901 29058 240627 682000)) nil (25901 29161 26141 287000) 0 nil])
([nil nil ((3278 . 3284)) nil (25901 29161 26141 87000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil)) #s(yas--field 3 3333 3352 nil nil nil nil nil)) nil 55 nil #s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) nil nil)) (3284 . 3353) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 3284) (3284 . 3369) (#("RespondWithJSON" 0 15 (fontified nil)) . -3284) (3284 . 3299)) nil (25901 29161 26140 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 3284 3353 #s(yas--snippet nil (#s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil)) #s(yas--field 3 3333 3352 nil nil nil nil nil)) nil 55 nil #s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) nil nil))) nil (25901 29161 26140 205000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3283) (3283 . 3284) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3283) (3283 . 3284) (3276 . 3284)) nil (25901 29161 26139 774000) 0 nil])
([nil nil ((3284 . 3286) (3285 . 3286) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 3284) (3284 . 3286) (3283 . 3285)) nil (25901 29161 26139 263000) 0 nil])
([nil nil ((#("	utils.RespondWithJSON(w http.ResponseWriter, code int, payload interface{})
" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t) 7 22 (face tree-sitter-hl-face:type fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (face tree-sitter-hl-face:variable fontified t) 24 25 (fontified t) 25 29 (face tree-sitter-hl-face:variable fontified t) 29 30 (fontified t) 30 44 (face tree-sitter-hl-face:property fontified t) 44 46 (fontified t) 46 50 (face tree-sitter-hl-face:variable fontified t) 50 51 (fontified t) 51 54 (face tree-sitter-hl-face:variable fontified t) 54 56 (fontified t) 56 63 (face tree-sitter-hl-face:variable fontified t) 63 64 (fontified t) 64 72 (face tree-sitter-hl-face:keyword fontified t) 72 73 (face tree-sitter-hl-face:keyword fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t) 75 76 (face (rainbow-delimiters-depth-2-face) fontified t) 76 77 (fontified t)) . 3290) (undo-tree-id2031 . -77) (undo-tree-id2032 . 74) (undo-tree-id2033 . -76) (undo-tree-id2034 . -77) (undo-tree-id2035 . -2) (undo-tree-id2036 . -23) (undo-tree-id2037 . -3) (undo-tree-id2038 . -2) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -77) 3292) nil (25901 29161 26138 572000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3284 . 3285) (#("
" 0 1 (fontified nil)) . -3360) (3283 . 3361) 3274) nil (25901 29161 26133 983000) 0 nil])
([nil nil ((#("		
" 0 3 (fontified t)) . 3361) (undo-tree-id2019 . -2) (undo-tree-id2020 . -1) (undo-tree-id2021 . 1) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -3) 3362) nil (25901 29161 26132 891000) 0 nil])
([nil nil ((3285 . 3287)) nil (25901 29161 26119 657000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3309) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (#(" " 0 1 (fontified t)) . -3310) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3311) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3312) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3313) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3314) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (#("." 0 1 (fontified t)) . -3315) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3316) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3317) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3318) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3319) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3320) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3321) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3322) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3323) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (#("W" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3324) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3325) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3326) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3327) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3328) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3329) (undo-tree-id2124 . -1) 3330 (t 25901 29161 134019 257000)) nil (25901 29200 726896 628000) 0 nil])
([nil nil ((3309 . 3310)) nil (25901 29200 726876 701000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3312) (undo-tree-id2073 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3313) (undo-tree-id2074 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3314) (undo-tree-id2075 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3315) (undo-tree-id2076 . -1) (#(" " 0 1 (fontified t)) . -3316) (undo-tree-id2077 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3317) (undo-tree-id2078 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3318) (undo-tree-id2079 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3319) (undo-tree-id2080 . -1) 3320) nil (25901 29200 726875 559000) 0 nil])
([nil nil ((3312 . 3315)) nil (25901 29200 726871 0) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3318) (undo-tree-id2053 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3319) (undo-tree-id2054 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3320) (undo-tree-id2055 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3321) (undo-tree-id2056 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3322) (undo-tree-id2057 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3323) (undo-tree-id2058 . -1) (#(" " 0 1 (fontified t)) . -3324) (undo-tree-id2059 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3325) (undo-tree-id2060 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3326) (undo-tree-id2061 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3327) (undo-tree-id2062 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3328) (undo-tree-id2063 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3329) (undo-tree-id2064 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3330) (undo-tree-id2065 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3331) (undo-tree-id2066 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3332) (undo-tree-id2067 . -1) (#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -3333) (undo-tree-id2068 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3334) (undo-tree-id2069 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3335) (undo-tree-id2070 . -1) (undo-tree-id2071 . 1) (undo-tree-id2072 . -1) 3336) nil (25901 29200 726868 976000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -3317) (undo-tree-id2052 . -1) 3318) nil (25901 29200 726860 480000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -3073) (undo-tree-id2051 . -1) 3074) nil (25901 29200 726859 228000) 0 nil])
([nil nil ((3073 . 3074)) nil (25901 29200 726858 226000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -1828) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) 1829) nil (25901 29200 726857 355000) 0 nil])
([nil nil ((1828 . 1829)) nil (25901 29200 726845 793000) 0 nil])
([nil nil ((3318 . 3320) (3317 . 3319) (#("\"" 0 1 (fontified nil)) . -3317) (3317 . 3318) (t 25901 29200 740800 208000)) nil (25901 29209 785957 906000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -3317) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (#("O" 0 1 (fontified t)) . -3318) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (#("K" 0 1 (fontified t)) . -3319) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3320) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) 3321 (t 25901 29209 798751 175000)) nil (25901 29215 110798 234000) 0 nil])
([nil nil ((3317 . 3322)) nil (25901 29215 110770 121000) 0 nil])
([nil nil ((#("é" 0 1 (face tree-sitter-hl-face:string fontified t)) . -3257) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) 3258 (t 25901 29215 220722 6000)) nil (25901 29222 634156 717000) 0 nil])
([nil nil ((3257 . 3258)) nil (25901 29222 634143 893000) 0 nil])
([nil nil ((3044 . 3046) (t 25901 29222 648682 271000)) nil (25901 29305 338073 356000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2381 . 2382) (#("
" 0 1 (fontified nil)) . -2557) (2380 . 2558) 2379) nil (25901 29305 338072 745000) 0 nil])
([nil nil ((2593 . 2594)) nil (25901 29305 338072 274000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2593) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) 2594) nil (25901 29305 338071 222000) 0 nil])
([nil nil ((2593 . 2596)) nil (25901 29305 338058 578000) 0 nil])
([nil nil ((1068 . 1069) (#(" " 0 1 (fontified nil)) . 1067) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (1068 . 1069) (t 25901 29305 444255 578000)) nil (25901 29544 474179 552000) 0 nil])
([nil nil ((1069 . 1085)) nil (25901 29544 474178 500000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1084) (undo-tree-id2236 . -1) 1085) nil (25901 29544 474178 119000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1095) (1095 . 1096) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1095) (1095 . 1096) (1084 . 1096)) nil (25901 29544 474177 428000) 0 nil])
([nil nil ((1096 . 1097) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1096) (1096 . 1097) (1095 . 1097)) nil (25901 29544 474176 887000) 0 nil])
([nil nil ((1097 . 1100)) nil (25901 29544 474176 516000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1101 . 1102) (#("
" 0 1 (fontified nil)) . -1250) (1100 . 1251) 1099) nil (25901 29544 474176 215000) 0 nil])
([nil nil ((#("	ID 
" 0 1 (fontified t) 1 3 (face tree-sitter-hl-face:type fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1096) (undo-tree-id2234 . -4) (undo-tree-id2235 . -1) 1097) nil (25901 29544 474175 654000) 0 nil])
([nil nil ((1245 . 1247)) nil (25901 29544 474174 783000) 0 nil])
([nil nil ((1247 . 1249)) nil (25901 29544 474174 622000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1248) (undo-tree-id2233 . -1) 1249) nil (25901 29544 474174 342000) 0 nil])
([nil nil ((1248 . 1256)) nil (25901 29544 474173 751000) 0 nil])
([nil nil ((apply yas--snippet-revive 1251 1257 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (1251 . 1257) (#("string" 0 6 (fontified nil)) . 1251) (1251 . 1257) (#("strin" 0 5 (fontified nil)) . 1251) (1251 . 1256) (#("string" 0 6 (fontified nil)) . -1251) (1251 . 1257) (#("strin" 0 5 (face tree-sitter-hl-face:type fontified t)) . -1251) (undo-tree-id2231 . -5) (undo-tree-id2232 . -5) 1256) nil (25901 29544 474173 190000) 0 nil])
([nil nil ((1257 . 1258)) nil (25901 29544 474171 967000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -1259) (1259 . 1260) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1259) (1259 . 1260) (1258 . 1260) (#("`" 0 1 (fontified nil)) . -1258) (1258 . 1259)) nil (25901 29544 474171 627000) 0 nil])
([nil nil ((1265 . 1268) (1264 . 1266) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -1264) (1259 . 1265)) nil (25901 29544 474170 715000) 0 nil])
([nil nil ((1270 . 1272)) nil (25901 29544 474170 374000) 0 nil])
([nil nil ((#("type UserResponse struct {
	ID        uuid.UUID `json:\"id\"`
	CreatedAt time.Time `json:\"created_at\"`
	UpdatedAt time.Time `json:\"updated_at\"`
	Name      string    `json:\"name\"`
	Apikey    string    `json:\"api_key\"`
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 17 (face tree-sitter-hl-face:type fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:keyword fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 28 (fontified t) 28 30 (face tree-sitter-hl-face:property fontified t) 30 43 (fontified t) 43 47 (face tree-sitter-hl-face:type fontified t) 47 48 (fontified t) 48 59 (face tree-sitter-hl-face:string fontified t) 59 61 (fontified t) 61 70 (face tree-sitter-hl-face:property fontified t) 70 76 (fontified t) 76 80 (face tree-sitter-hl-face:type fontified t) 80 81 (fontified t) 81 100 (face tree-sitter-hl-face:string fontified t) 100 102 (fontified t) 102 111 (face tree-sitter-hl-face:property fontified t) 111 117 (fontified t) 117 121 (face tree-sitter-hl-face:type fontified t) 121 122 (fontified t) 122 141 (face tree-sitter-hl-face:string fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 147 (face tree-sitter-hl-face:property fontified t) 147 153 (fontified t) 153 159 (face tree-sitter-hl-face:type fontified t) 159 160 (fontified t) 160 163 (fontified t) 163 176 (face tree-sitter-hl-face:string fontified t) 176 177 (fontified t) 177 178 (fontified t) 178 184 (face tree-sitter-hl-face:property fontified t) 184 188 (fontified t) 188 194 (face tree-sitter-hl-face:type fontified t) 194 195 (fontified t) 195 198 (fontified t) 198 204 (face tree-sitter-hl-face:string fontified t) 204 213 (face tree-sitter-hl-face:string fontified t) 213 214 (face tree-sitter-hl-face:string fontified t) 214 215 (fontified t) 215 216 (face (rainbow-delimiters-depth-1-face) fontified t) 216 217 (fontified t)) . 764) (undo-tree-id2224 . -215) (undo-tree-id2225 . -216) (undo-tree-id2226 . -176) (undo-tree-id2227 . -213) (undo-tree-id2228 . -215) (undo-tree-id2229 . -175) (undo-tree-id2230 . -215)) nil (25901 29544 474169 92000) 0 nil])
([nil nil ((#("type FeedResponse struct {
	ID        uuid.UUID `json:\"id\"`
	CreatedAt time.Time `json:\"created_at\"`
	UpdatedAt time.Time `json:\"updated_at\"`
	Name      string    `json:\"name\"`
	Url string `json:\"url\"`
	
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 17 (face tree-sitter-hl-face:type fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:keyword fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t) 27 28 (fontified t rear-nonsticky t) 28 30 (face tree-sitter-hl-face:property fontified t) 30 43 (fontified t) 43 47 (face tree-sitter-hl-face:type fontified t) 47 48 (fontified t) 48 59 (face tree-sitter-hl-face:string fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 70 (face tree-sitter-hl-face:property fontified t) 70 76 (fontified t) 76 80 (face tree-sitter-hl-face:type fontified t) 80 81 (fontified t) 81 100 (face tree-sitter-hl-face:string fontified t) 100 102 (fontified t) 102 111 (face tree-sitter-hl-face:property fontified t) 111 117 (fontified t) 117 121 (face tree-sitter-hl-face:type fontified t) 121 122 (fontified t) 122 141 (face tree-sitter-hl-face:string fontified t) 141 142 (fontified t) 142 143 (fontified t) 143 147 (face tree-sitter-hl-face:property fontified t) 147 153 (fontified t) 153 159 (face tree-sitter-hl-face:type fontified t) 159 160 (fontified t) 160 163 (fontified t) 163 176 (face tree-sitter-hl-face:string fontified t) 176 177 (fontified t) 177 178 (fontified t) 178 181 (face tree-sitter-hl-face:property fontified t) 181 182 (fontified t) 182 188 (face tree-sitter-hl-face:type fontified t) 188 189 (fontified t) 189 195 (face tree-sitter-hl-face:string fontified t) 195 200 (face tree-sitter-hl-face:string fontified t) 200 201 (face tree-sitter-hl-face:string fontified t) 201 203 (fontified t) 203 204 (fontified t) 204 205 (face (rainbow-delimiters-depth-1-face) fontified t) 205 206 (fontified t)) . 852) (undo-tree-id2214 . -204) (undo-tree-id2215 . -205) (undo-tree-id2216 . -204) (undo-tree-id2217 . 7) (undo-tree-id2218 . -204) (undo-tree-id2219 . -204) (undo-tree-id2220 . 2) (undo-tree-id2221 . -205) (undo-tree-id2222 . 181) (undo-tree-id2223 . -26) 1056) nil (25901 29544 474165 95000) 0 nil])
([nil nil ((#("	userRes := UserResponse{}
	userRes.ID = user.ID
	userRes.Name = user.Name
	userRes.CreatedAt = user.CreatedAt
	userRes.UpdatedAt = user.UpdatedAt
	userRes.Apikey = user.Apikey
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:variable fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 11 (face tree-sitter-hl-face:operator fontified t) 11 12 (fontified t) 12 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 28 (fontified t) 28 35 (face tree-sitter-hl-face:variable fontified t) 35 36 (fontified t) 36 38 (face tree-sitter-hl-face:property fontified t) 38 39 (fontified t) 39 40 (face tree-sitter-hl-face:operator fontified t) 40 41 (fontified t) 41 45 (face tree-sitter-hl-face:variable fontified t) 45 46 (fontified t) 46 48 (face tree-sitter-hl-face:property fontified t) 48 50 (fontified t) 50 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 62 (face tree-sitter-hl-face:property fontified t) 62 63 (fontified t) 63 64 (face tree-sitter-hl-face:operator fontified t) 64 65 (fontified t) 65 69 (face tree-sitter-hl-face:variable fontified t) 69 70 (fontified t) 70 74 (face tree-sitter-hl-face:property fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 83 (face tree-sitter-hl-face:variable fontified t) 83 84 (fontified t) 84 93 (face tree-sitter-hl-face:property fontified t) 93 94 (fontified t) 94 95 (face tree-sitter-hl-face:operator fontified t) 95 96 (fontified t) 96 100 (face tree-sitter-hl-face:variable fontified t) 100 101 (fontified t) 101 110 (face tree-sitter-hl-face:property fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 119 (face tree-sitter-hl-face:variable fontified t) 119 120 (fontified t) 120 129 (face tree-sitter-hl-face:property fontified t) 129 130 (fontified t) 130 131 (face tree-sitter-hl-face:operator fontified t) 131 132 (fontified t) 132 136 (face tree-sitter-hl-face:variable fontified t) 136 137 (fontified t) 137 146 (face tree-sitter-hl-face:property fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 155 (face tree-sitter-hl-face:variable fontified t) 155 156 (fontified t) 156 162 (face tree-sitter-hl-face:property fontified t) 162 163 (fontified t) 163 164 (face tree-sitter-hl-face:operator fontified t) 164 165 (fontified t) 165 169 (face tree-sitter-hl-face:variable fontified t) 169 170 (fontified t) 170 176 (face tree-sitter-hl-face:property fontified t) 176 177 (fontified t)) . 1406) (undo-tree-id2206 . -175) (undo-tree-id2207 . -176) (undo-tree-id2208 . -175) (undo-tree-id2209 . -26) (undo-tree-id2210 . -176) (undo-tree-id2211 . -26) (undo-tree-id2212 . -26) (undo-tree-id2213 . -175) 1432) nil (25901 29544 474160 576000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1441) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1442) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1443) (undo-tree-id2203 . 1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) 1444) nil (25901 29544 474155 166000) 0 nil])
([nil nil ((#("	userRes := UserResponse{}
	userRes.ID = user.ID
	userRes.Name = user.Name
	userRes.CreatedAt = user.CreatedAt
	userRes.UpdatedAt = user.UpdatedAt
	userRes.Apikey = user.Apikey
" 0 1 (fontified t rear-nonsticky t) 1 2 (face tree-sitter-hl-face:variable fontified t) 2 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t) 9 11 (face tree-sitter-hl-face:operator fontified t) 11 12 (fontified t) 12 24 (face tree-sitter-hl-face:type fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 28 (fontified t) 28 35 (face tree-sitter-hl-face:variable fontified t) 35 36 (fontified t) 36 38 (face tree-sitter-hl-face:property fontified t) 38 39 (fontified t) 39 40 (face tree-sitter-hl-face:operator fontified t) 40 41 (fontified t) 41 45 (face tree-sitter-hl-face:variable fontified t) 45 46 (fontified t) 46 48 (face tree-sitter-hl-face:property fontified t) 48 50 (fontified t) 50 57 (face tree-sitter-hl-face:variable fontified t) 57 58 (fontified t) 58 62 (face tree-sitter-hl-face:property fontified t) 62 63 (fontified t) 63 64 (face tree-sitter-hl-face:operator fontified t) 64 65 (fontified t) 65 69 (face tree-sitter-hl-face:variable fontified t) 69 70 (fontified t) 70 74 (face tree-sitter-hl-face:property fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 83 (face tree-sitter-hl-face:variable fontified t) 83 84 (fontified t) 84 93 (face tree-sitter-hl-face:property fontified t) 93 94 (fontified t) 94 95 (face tree-sitter-hl-face:operator fontified t) 95 96 (fontified t) 96 100 (face tree-sitter-hl-face:variable fontified t) 100 101 (fontified t) 101 110 (face tree-sitter-hl-face:property fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 119 (face tree-sitter-hl-face:variable fontified t) 119 120 (fontified t) 120 129 (face tree-sitter-hl-face:property fontified t) 129 130 (fontified t) 130 131 (face tree-sitter-hl-face:operator fontified t) 131 132 (fontified t) 132 136 (face tree-sitter-hl-face:variable fontified t) 136 137 (fontified t) 137 146 (face tree-sitter-hl-face:property fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 155 (face tree-sitter-hl-face:variable fontified t) 155 156 (fontified t) 156 162 (face tree-sitter-hl-face:property fontified t) 162 163 (fontified t) 163 164 (face tree-sitter-hl-face:operator fontified t) 164 165 (fontified t) 165 167 (face tree-sitter-hl-face:variable fontified t) 167 169 (face tree-sitter-hl-face:variable fontified t) 169 170 (fontified t) 170 176 (face tree-sitter-hl-face:property fontified t) 176 177 (fontified t)) . 1984) (undo-tree-id2271 . -175) (undo-tree-id2272 . -176) (undo-tree-id2273 . -175) (undo-tree-id2274 . -26) (undo-tree-id2275 . -177) (undo-tree-id2276 . -177) (undo-tree-id2277 . -177) (undo-tree-id2278 . -177) (undo-tree-id2279 . -177) (undo-tree-id2280 . -177) (undo-tree-id2281 . -177) (undo-tree-id2282 . -177) (undo-tree-id2283 . -177) (undo-tree-id2284 . -26) (undo-tree-id2285 . -12) (undo-tree-id2286 . -24) (undo-tree-id2287 . -26) (undo-tree-id2288 . -175) 2010 (t 25901 29544 582158 965000)) nil (25901 29552 924729 914000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2019) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2020) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -2021) (undo-tree-id2266 . 1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) 2022) nil (25901 29552 924722 811000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2648) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (t 25901 29552 940123 580000)) nil (25901 29562 160284 90000) 0 nil])
([nil nil ((2560 . 2562) (t 25901 29562 267084 294000)) nil (25901 29770 242091 177000) 0 nil])
([nil nil ((2562 . 2570)) nil (25901 29770 242090 927000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2574 2585 nil nil nil t nil)) nil 57 nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil nil)) (2566 . 2583) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 2566) (2566 . 2588) (#("Prin" 0 4 (fontified nil)) . 2566) (2566 . 2570) (#("Println" 0 7 (fontified nil)) . -2566) (2566 . 2573) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2566) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) 2570) nil (25901 29770 242090 115000) 0 nil])
([nil nil ((2575 . 2578) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 2575) (undo-tree-id2293 . -8) (undo-tree-id2294 . -5) (undo-tree-id2295 . -6) (2574 . 2575)) nil (25901 29770 242088 562000) 0 nil])
([nil nil ((apply yas--snippet-revive 2578 2585 #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil)) (2578 . 2585) (#("Error()" 0 7 (fontified nil)) . 2578) (undo-tree-id2291 . -7) (2578 . 2585) (#("Error" 0 5 (fontified nil)) . -2578) (undo-tree-id2292 . -5) (2578 . 2583)) nil (25901 29770 242086 47000) 0 nil])
([nil nil ((apply yas--snippet-revive 2566 2586 #s(yas--snippet nil (#s(yas--field 1 2574 2585 nil nil nil t nil)) nil 57 nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil nil))) nil (25901 29770 242074 386000) 0 nil])
([nil nil ((3778 . 3780) (t 25901 29770 257254 786000)) nil (25901 29860 562254 805000) 0 nil])
([nil nil ((3780 . 3783)) nil (25901 29860 562254 475000) 0 nil])
([nil nil ((apply yas--snippet-revive 3780 3788 #s(yas--snippet nil nil nil 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 59 nil nil nil nil)) (3780 . 3788) (#("v1Router" 0 8 (fontified nil)) . 3780) (3780 . 3788) (#("v1R" 0 3 (fontified nil)) . 3780) (3780 . 3783) (#("v1Router" 0 8 (fontified nil)) . -3780) (3780 . 3788) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -3780) (undo-tree-id2314 . -3) (undo-tree-id2315 . -3) 3783) nil (25901 29860 562253 824000) 0 nil])
([nil nil ((3788 . 3792)) nil (25901 29860 562252 571000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3793 3801 nil nil nil t #s(yas--field 2 3803 3821 nil nil nil t nil)) #s(yas--field 2 3803 3821 nil nil nil t nil)) nil 60 nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil nil)) (3789 . 3836) (#("Get(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 57 (fontified nil)) . 3789) (3789 . 3846) (#("Get" 0 3 (fontified nil)) . 3789) (3789 . 3792) (#("Get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -3789) (undo-tree-id2312 . -3) (undo-tree-id2313 . -3) 3792) nil (25901 29860 562252 40000) 0 nil])
([nil nil ((3794 . 3800) (3793 . 3795) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3793) (undo-tree-id2310 . -1) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 3794) (undo-tree-id2311 . -14) (3793 . 3794)) nil (25901 29860 562250 487000) 0 nil])
([nil nil ((3804 . 3808) (#("handlerFn http.HandlerFunc" 0 9 (face tree-sitter-hl-face:variable fontified nil) 9 10 (fontified nil) 10 14 (face tree-sitter-hl-face:variable fontified nil) 14 15 (fontified nil) 15 26 (face tree-sitter-hl-face:property fontified nil)) . 3804) (undo-tree-id2309 . -26) (3803 . 3804)) nil (25901 29860 562249 125000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3806) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (#("C" 0 1 (face tree-sitter-hl-face:property fontified t)) . -3807) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) 3808) nil (25901 29860 562247 582000) 0 nil])
([nil nil ((3806 . 3807)) nil (25901 29860 562244 727000) 0 nil])
([nil nil ((apply yas--snippet-revive 3803 3821 #s(yas--snippet nil nil nil 61 nil nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 61 nil nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil)) (3803 . 3821) (#("apiCfg.GetAllFeeds" 0 18 (fontified nil)) . 3803) (undo-tree-id2298 . -18) (3803 . 3821) (#("apiC" 0 4 (fontified nil)) . 3803) (undo-tree-id2299 . -4) (3803 . 3807) (#("apiCfg.GetAllFeeds" 0 18 (fontified nil)) . -3803) (undo-tree-id2300 . -18) (3803 . 3821) (#("apiC" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -3803) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -4) 3807) nil (25901 29860 562243 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 3789 3822 #s(yas--snippet nil (#s(yas--field 1 3793 3801 nil nil nil t #s(yas--field 2 3803 3821 nil nil nil t nil)) #s(yas--field 2 3803 3821 nil nil nil t nil)) nil 60 nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil nil))) nil (25901 29860 562195 434000) 0 nil])
([nil nil ((#("	fmt.Println(err.Error())
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 12 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 16 (face tree-sitter-hl-face:variable fontified t) 16 17 (fontified t) 17 22 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 2561) (undo-tree-id2316 . -18) (undo-tree-id2317 . -25) (undo-tree-id2318 . -18) (undo-tree-id2319 . -17) (undo-tree-id2320 . -22) 2579 (t 25901 29860 669917 74000)) nil (25901 29901 561639 313000) 0 nil])
([nil nil ((3589 . 3590) (#("	" 0 1 (fontified nil)) . 3588) (3588 . 3589) (3588 . 3589) (t 25905 12377 480566 294000)) nil (25905 19233 368401 305000) 0 nil])
([nil nil ((3590 . 3598)) nil (25905 19233 368400 492000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -3597) (undo-tree-id521 . -1) 3598) nil (25905 19233 368399 936000) 0 nil])
([nil nil ((3597 . 3607)) nil (25905 19233 368398 794000) 0 nil])
([nil nil ((3707 . 3708) (#("	" 0 1 (fontified nil)) . 3706) (3706 . 3707) (3706 . 3707)) nil (25905 19233 368398 223000) 0 nil])
([nil nil ((3708 . 3719)) nil (25905 19233 368397 502000) 0 nil])
([nil nil ((3719 . 3725)) nil (25905 19233 368397 75000) 0 nil])
([nil nil ((3836 . 3837) (#("	" 0 1 (fontified nil)) . 3835) (3835 . 3836) (3835 . 3836)) nil (25905 19233 368396 486000) 0 nil])
([nil nil ((3837 . 3844)) nil (25905 19233 368395 840000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -3843) (undo-tree-id520 . -1) 3844) nil (25905 19233 368395 220000) 0 nil])
([nil nil ((3843 . 3861)) nil (25905 19233 368394 126000) 0 nil])
([nil nil ((3861 . 3863)) nil (25905 19233 368393 697000) 0 nil])
([nil nil ((3863 . 3866)) nil (25905 19233 368393 277000) 0 nil])
([nil nil ((3863 . 3871) (#("v1r" 0 3 (fontified nil)) . 3863) (3863 . 3866) (#("v1Router" 0 8 (fontified nil)) . -3863) (3863 . 3871) (#("v1r" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3863) (undo-tree-id518 . -3) (undo-tree-id519 . -3) 3866) nil (25905 19233 368392 552000) 0 nil])
([nil nil ((3871 . 3875)) nil (25905 19233 368390 346000) 0 nil])
([nil nil ((3872 . 3930) (#("Pos" 0 3 (fontified nil)) . 3872) (3872 . 3875) (#("Post" 0 4 (fontified nil)) . -3872) (3872 . 3876) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3872) (undo-tree-id516 . -3) (undo-tree-id517 . -3) 3875) nil (25905 19233 368389 341000) 0 nil])
([nil nil ((#("F" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -3909) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -3910) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#(" " 0 1 (fontified t)) . -3911) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3912) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3913) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3914) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3915) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("." 0 1 (fontified t)) . -3916) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3917) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3918) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3919) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3920) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3921) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3922) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3923) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3924) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3925) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3926) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3927) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3928) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . 1) (undo-tree-id509 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -3929) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . 1) (undo-tree-id515 . -1) 3930) nil (25905 19233 368382 391000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3888) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3889) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3890) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3891) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3892) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3893) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3894) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3895) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("," 0 1 (fontified t)) . -3896) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#(" " 0 1 (fontified t)) . -3897) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("$" 0 1 (fontified t)) . -3898) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3899) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . 1) (undo-tree-id363 . -1) (#("2" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3900) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#(":" 0 1 (fontified t)) . -3901) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3902) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3903) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3904) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3905) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3906) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3907) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3908) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) 3909) nil (25905 19233 368300 216000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3886) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3887) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) 3888) nil (25905 19233 368217 491000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3874) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3875) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -3876) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("$" 0 1 (fontified t)) . -3877) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3878) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3879) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#(":" 0 1 (fontified t)) . -3880) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3881) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3882) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3883) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3884) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3885) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 3886) nil (25905 19233 368206 453000) 0 nil])
([nil nil ((3874 . 3875)) nil (25905 19233 368158 878000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3877 3892 nil nil nil t #s(yas--field 2 3894 3953 nil nil nil t nil)) #s(yas--field 2 3894 3953 nil nil nil t nil)) nil 0 nil #s(yas--field 2 3894 3953 nil nil nil t nil) nil nil)) (3872 . 3920) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 3872) (3872 . 3930) (#("Pos" 0 3 (fontified nil)) . 3872) (3872 . 3875) (#("Post" 0 4 (fontified nil)) . -3872) (3872 . 3876) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3872) (undo-tree-id211 . -2) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -2) 3875) nil (25905 19233 368157 905000) 0 nil])
([nil nil ((3878 . 3890) (3877 . 3879) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3877) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 3878) (3877 . 3878)) nil (25905 19233 368154 49000) 0 nil])
([nil nil ((3890 . 3891)) nil (25905 19233 368153 175000) 0 nil])
([nil nil ((3895 . 3897) (#("handlerFn http.HandlerFunc" 0 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 14 (fontified nil face tree-sitter-hl-face:variable) 14 15 (fontified nil) 15 26 (fontified nil face tree-sitter-hl-face:property)) . 3895) (3894 . 3895)) nil (25905 19233 368152 599000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3914 3952 nil nil nil t nil)) nil 1 nil #s(yas--field 1 3914 3952 nil nil nil t nil) #s(yas--field 2 3894 3953 nil nil nil t nil) nil)) (3894 . 3936) (#("apiCfg.authenticate(${1:handler authedHandler})" 0 47 (fontified nil)) . 3894) (3894 . 3941) (#("api" 0 3 (fontified nil)) . 3894) (3894 . 3897) (#("apiCfg.authenticate" 0 19 (fontified nil)) . -3894) (3894 . 3913) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3894) (undo-tree-id209 . -3) (undo-tree-id210 . -3) 3897) nil (25905 19233 368151 544000) 0 nil])
([nil nil ((3915 . 3919) (#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 3915) (3914 . 3915)) nil (25905 19233 368148 933000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3920 3920 nil nil nil t #s(yas--field 2 3922 3951 nil nil nil nil nil)) #s(yas--field 2 3922 3951 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 3920 3920 nil nil nil t #s(yas--field 2 3922 3951 nil nil nil nil nil)) #s(yas--field 1 3914 3952 nil nil nil t nil) nil)) (3914 . 3986) (#("apiCfg.DB.CreateFeed(${1:ctx context.Context}, ${2:arg database.CreateFeedParams})" 0 82 (fontified nil)) . 3914) (3914 . 3996) (#("apiDf" 0 5 (fontified nil)) . 3914) (3914 . 3919) (#("apiCfg.DB.CreateFeed" 0 20 (fontified nil)) . -3914) (3914 . 3934) (#("apiDf" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -3914) (undo-tree-id207 . -5) (undo-tree-id208 . -5) 3919) nil (25905 19233 368147 455000) 0 nil])
([nil nil ((#("ctx context.Context" 0 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t) 4 11 (fontified t face tree-sitter-hl-face:variable) 11 12 (fontified t) 12 19 (fontified t face tree-sitter-hl-face:property)) . 3935)) nil (25905 19233 368145 177000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3920) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3921) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3922) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("." 0 1 (fontified t)) . -3923) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3924) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3925) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3926) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3927) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3928) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3929) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3930) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3931) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3932) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3933) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -3934) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . 1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 3935) nil (25905 19233 368141 888000) 0 nil])
([nil nil ((apply yas--snippet-revive 3872 3954 #s(yas--snippet nil (#s(yas--field 1 3877 3892 nil nil nil t #s(yas--field 2 3894 3953 nil nil nil t nil)) #s(yas--field 2 3894 3953 nil nil nil t nil)) nil 0 nil #s(yas--field 2 3894 3953 nil nil nil t nil) nil nil)) (apply yas--snippet-revive 3894 3953 #s(yas--snippet nil (#s(yas--field 1 3914 3952 nil nil nil t nil)) nil 1 nil #s(yas--field 1 3914 3952 nil nil nil t nil) #s(yas--field 2 3894 3953 nil nil nil t nil) nil)) (apply yas--snippet-revive 3914 3952 #s(yas--snippet nil (#s(yas--field 1 3920 3920 nil nil nil t #s(yas--field 2 3922 3951 nil nil nil nil nil)) #s(yas--field 2 3922 3951 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 3920 3920 nil nil nil t #s(yas--field 2 3922 3951 nil nil nil nil nil)) #s(yas--field 1 3914 3952 nil nil nil t nil) nil))) nil (25905 19233 368103 296000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3932) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3933) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("." 0 1 (fontified t)) . -3934) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3935) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3936) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3937) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3938) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3939) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3940) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3941) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3942) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3943) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3944) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3945) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3946) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3947) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3948) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3949) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3950) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3951) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . 1) (undo-tree-id141 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -3952) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . 1) (undo-tree-id145 . -1) 3953) nil (25905 19233 368098 731000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3920) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#(" " 0 1 (fontified t)) . -3921) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3922) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3923) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3924) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#(" " 0 1 (fontified t)) . -3925) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3926) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3927) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3928) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3929) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3930) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3931) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 3932) nil (25905 19233 367980 1000) 0 nil])
([nil nil ((3920 . 3923)) nil (25905 19233 367807 851000) 0 nil])
([nil nil ((3923 . 3926)) nil (25905 19233 367807 448000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3924) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3925) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 3926) nil (25905 19233 367806 549000) 0 nil])
([nil nil ((3924 . 3937)) nil (25905 19233 367803 660000) 0 nil])
([nil nil ((3938 . 3939)) nil (25905 19233 367803 245000) 0 nil])
([nil nil ((3938 . 3939) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -3938) (3938 . 3939)) nil (25905 19233 367802 667000) 0 nil])
([nil nil ((2931 . 2933)) nil (25905 19233 367802 76000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2939) (2939 . 2940) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2939) (2939 . 2940) (2933 . 2940)) nil (25905 19233 367801 394000) 0 nil])
([nil nil ((2939 . 2945)) nil (25905 19233 367800 602000) 0 nil])
([nil nil ((apply yas--snippet-revive 2942 2951 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (2942 . 2951) (#("apiConfig" 0 9 (fontified nil)) . 2942) (2942 . 2951) (#("api" 0 3 (fontified nil)) . 2942) (2942 . 2945) (#("apiConfig" 0 9 (fontified nil)) . -2942) (2942 . 2951) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2942) (undo-tree-id40 . -3) (undo-tree-id41 . -3) 2945) nil (25905 19233 367799 558000) 0 nil])
([nil nil ((2952 . 2959)) nil (25905 19233 367797 34000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2971) (2971 . 2972) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2971) (2971 . 2972) (2959 . 2972)) nil (25905 19233 367796 216000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -2969) (undo-tree-id39 . -1) 2970) nil (25905 19233 367795 312000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2973) (2973 . 2974) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2973) (2973 . 2974) (2971 . 2974)) nil (25905 19233 367793 904000) 0 nil])
([nil nil ((2970 . 2977)) nil (25905 19233 367793 151000) 0 nil])
([nil nil ((2977 . 2980)) nil (25905 19233 367792 729000) 0 nil])
([nil nil ((apply yas--snippet-revive 2977 2991 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (2977 . 2991) (#("ResponseWriter" 0 14 (fontified nil)) . 2977) (2977 . 2991) (#("Res" 0 3 (fontified nil)) . 2977) (2977 . 2980) (#("ResponseWriter" 0 14 (fontified nil)) . -2977) (2977 . 2991) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2977) (undo-tree-id37 . -3) (undo-tree-id38 . -3) 2980) nil (25905 19233 367791 709000) 0 nil])
([nil nil ((2991 . 3004)) nil (25905 19233 367788 923000) 0 nil])
([nil nil ((apply yas--snippet-revive 3001 3008 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (3001 . 3008) (#("Request" 0 7 (fontified nil)) . 3001) (3001 . 3008) (#("Req" 0 3 (fontified nil)) . 3001) (3001 . 3004) (#("Request" 0 7 (fontified nil)) . -3001) (3001 . 3008) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -3001) (undo-tree-id35 . -3) (undo-tree-id36 . -3) 3004) nil (25905 19233 367787 986000) 0 nil])
([nil nil ((3012 . 3013) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3012) (3012 . 3013) (3011 . 3013)) nil (25905 19233 367785 349000) 0 nil])
([nil nil ((851 . 852)) nil (25905 19233 367784 712000) 0 nil])
([nil nil ((852 . 873)) nil (25905 19233 367784 307000) 0 nil])
([nil nil ((873 . 874)) nil (25905 19233 367783 928000) 0 nil])
([nil nil ((874 . 883)) nil (25905 19233 367783 187000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -882) (undo-tree-id34 . -1) 883) nil (25905 19233 367782 635000) 0 nil])
([nil nil ((882 . 884)) nil (25905 19233 367781 414000) 0 nil])
([nil nil ((apply yas--snippet-revive 881 887 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (881 . 887) (#("struct" 0 6 (fontified nil)) . 881) (881 . 887) (#("str" 0 3 (fontified nil)) . 881) (881 . 884) (#("struct" 0 6 (fontified nil)) . -881) (881 . 887) (#("str" 0 3 (fontified t face tree-sitter-hl-face:type)) . -881) (undo-tree-id32 . -3) (undo-tree-id33 . -3) 884) nil (25905 19233 367780 261000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -889) (889 . 890) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -889) (889 . 890) (887 . 890)) nil (25905 19233 367777 469000) 0 nil])
([nil nil ((890 . 891) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 890) (890 . 891) (889 . 891)) nil (25905 19233 367776 393000) 0 nil])
([nil nil ((891 . 893)) nil (25905 19233 367775 704000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:type)) . -891) (undo-tree-id30 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -892) (undo-tree-id31 . -1) 893) nil (25905 19233 367774 932000) 0 nil])
([nil nil ((905 . 907) (#("`" 0 1 (fontified nil)) . -905) (891 . 906)) nil (25905 19233 367772 945000) 0 nil])
([nil nil ((912 . 916) (911 . 913) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -911) (906 . 912)) nil (25905 19233 367771 903000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -912) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -913) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:string)) . -914) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -915) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 916) nil (25905 19233 367769 487000) 0 nil])
([nil nil ((912 . 919)) nil (25905 19233 367721 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3086 . 3087) (#("
" 0 1 (fontified nil)) . -3263) (3085 . 3264) 3084 (t 25905 19233 397807 758000)) nil (25905 19285 163431 952000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 3084) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1)) nil (25905 19285 163430 287000) 0 nil])
([nil nil ((3080 . 3082)) nil (25905 19285 163418 748000) 0 nil])
([nil nil ((3082 . 3091)) nil (25905 19285 163418 136000) 0 nil])
([nil nil ((3091 . 3096)) nil (25905 19285 163417 252000) 0 nil])
([nil nil ((apply yas--snippet-revive 3096 3100 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (3096 . 3100) (#("User" 0 4 (fontified nil)) . 3096) (3096 . 3100) (#("User" 0 4 (fontified nil)) . -3096) (3096 . 3100)) nil (25905 19285 163413 88000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3162) (undo-tree-id529 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3163) (undo-tree-id530 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3164) (undo-tree-id531 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3165) (undo-tree-id532 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3166) (undo-tree-id533 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3167) (undo-tree-id534 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3168) (undo-tree-id535 . -1) 3169 (t 25905 19285 185896 886000)) nil (25905 19437 617347 105000) 0 nil])
([nil nil ((3162 . 3164)) nil (25905 19437 617341 67000) 0 nil])
([nil nil ((apply yas--snippet-revive 3152 3175 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (3152 . 3175) (#("CreateFeedFollowRequest" 0 23 (fontified nil)) . 3152) (3152 . 3175) (#("CreateFeedFo" 0 12 (fontified nil)) . 3152) (3152 . 3164) (#("CreateFeedFollowRequest" 0 23 (fontified nil)) . -3152) (3152 . 3175) (#("CreateFeedFo" 0 12 (fontified t face tree-sitter-hl-face:type)) . -3152) (undo-tree-id527 . -12) (undo-tree-id528 . -12) 3164) nil (25905 19437 617339 313000) 0 nil])
([nil nil ((3145 . 3151) (3206 . 3212) 3202) nil (25905 19437 617326 962000) 0 nil])
([nil nil ((3299 . 3301) (t 25905 19437 646188 129000)) nil (25905 19472 861881 807000) 0 nil])
([nil nil ((3301 . 3307)) nil (25905 19472 861881 53000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3306) (undo-tree-id544 . -1) 3307) nil (25905 19472 861880 279000) 0 nil])
([nil nil ((3306 . 3307)) nil (25905 19472 861878 852000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3305) (undo-tree-id542 . -1) (#("," 0 1 (fontified t)) . -3306) (undo-tree-id543 . -1) 3307) nil (25905 19472 861877 849000) 0 nil])
([nil nil ((3305 . 3316)) nil (25905 19472 861875 610000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3315) (undo-tree-id541 . -1) 3316) nil (25905 19472 861874 219000) 0 nil])
([nil nil ((3315 . 3319)) nil (25905 19472 861872 335000) 0 nil])
([nil nil ((#("	feed, err := a.DB.
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 7 (fontified t) 7 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 15 (fontified t face tree-sitter-hl-face:variable) 15 16 (fontified t) 16 18 (fontified t face tree-sitter-hl-face:property) 18 19 (fontified t) 19 20 (fontified t)) . 3300) (undo-tree-id536 . 1) (undo-tree-id537 . -19) (undo-tree-id538 . -19) (undo-tree-id539 . -18) (undo-tree-id540 . 1) 3318) nil (25905 19472 861869 73000) 0 nil])
([nil nil ((3299 . 3301) (t 25905 19472 894259 947000)) nil (25905 19910 538035 195000) 0 nil])
([nil nil ((3301 . 3310)) nil (25905 19910 538034 684000) 0 nil])
([nil nil ((3310 . 3311)) nil (25905 19910 538034 227000) 0 nil])
([nil nil ((3311 . 3314)) nil (25905 19910 538033 708000) 0 nil])
([nil nil ((3314 . 3316)) nil (25905 19910 538033 334000) 0 nil])
([nil nil ((3316 . 3317)) nil (25905 19910 538032 858000) 0 nil])
([nil nil ((3317 . 3319)) nil (25905 19910 538032 462000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3331 3336 nil nil nil t #s(yas--field 2 3338 3358 nil nil nil t nil)) #s(yas--field 2 3338 3358 nil nil nil t nil)) nil 9 nil #s(yas--field 2 3338 3358 nil nil nil t nil) nil nil)) (3319 . 3365) (#("GetFeedById(${1:ctx context.Context}, ${2:id uuid.UUID})" 0 56 (fontified nil)) . 3319) (3319 . 3375) (#("GetFeedById" 0 11 (fontified nil)) . -3319) (3319 . 3330)) nil (25905 19910 538031 860000) 0 nil])
([nil nil ((#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 3332) (3331 . 3332)) nil (25905 19910 538030 878000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3331) (undo-tree-id606 . -1) (undo-tree-id607 . -1) 3332) nil (25905 19910 538030 247000) 0 nil])
([nil nil ((3331 . 3333)) nil (25905 19910 538028 620000) 0 nil])
([nil nil ((3333 . 3334)) nil (25905 19910 538028 159000) 0 nil])
([nil nil ((3334 . 3336)) nil (25905 19910 538027 712000) 0 nil])
([nil nil ((apply yas--snippet-revive 3333 3336 #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 3331 3336 nil nil nil t #s(yas--field 2 3338 3358 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil #s(yas--field 1 3331 3336 nil nil nil t #s(yas--field 2 3338 3358 nil nil nil t nil)) nil)) (3333 . 3336) (#("ctx" 0 3 (fontified nil)) . 3333) (3333 . 3336) (#("ctx" 0 3 (fontified nil)) . 3333) (3333 . 3336) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3333) (undo-tree-id604 . -3) (undo-tree-id605 . -3) 3336) nil (25905 19910 538026 916000) 0 nil])
([nil nil ((3339 . 3342) (#("id uuid.UUID" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 12 (fontified nil face tree-sitter-hl-face:property)) . 3339) (3338 . 3339)) nil (25905 19910 538024 508000) 0 nil])
([nil nil ((apply yas--snippet-revive 3338 3351 #s(yas--snippet nil nil nil 11 nil nil #s(yas--field 2 3338 3358 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil #s(yas--field 2 3338 3358 nil nil nil t nil) nil)) (3338 . 3351) (#("feedFollowReq" 0 13 (fontified nil)) . 3338) (3338 . 3351) (#("feed" 0 4 (fontified nil)) . 3338) (3338 . 3342) (#("feedFollowReq" 0 13 (fontified nil)) . -3338) (3338 . 3351) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3338) (undo-tree-id602 . -4) (undo-tree-id603 . -4) 3342) nil (25905 19910 538022 915000) 0 nil])
([nil nil ((3351 . 3352)) nil (25905 19910 538020 479000) 0 nil])
([nil nil ((apply yas--snippet-revive 3352 3358 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 3338 3358 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 3338 3358 nil nil nil t nil) nil)) (3352 . 3358) (#("FeedId" 0 6 (fontified nil)) . 3352) (3352 . 3358) (#("FeedId" 0 6 (fontified nil)) . -3352) (3352 . 3358)) nil (25905 19910 538019 750000) 0 nil])
([nil nil ((apply yas--snippet-revive 3319 3359 #s(yas--snippet nil (#s(yas--field 1 3331 3336 nil nil nil t #s(yas--field 2 3338 3358 nil nil nil t nil)) #s(yas--field 2 3338 3358 nil nil nil t nil)) nil 9 nil #s(yas--field 2 3338 3358 nil nil nil t nil) nil nil))) nil (25905 19910 538018 715000) 0 nil])
([nil nil ((3359 . 3360)) nil (25905 19910 538018 290000) 0 nil])
([nil nil ((3299 . 3301)) nil (25905 19910 538017 893000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3299) (undo-tree-id600 . -1) (#("	" 0 1 (fontified t)) . -3300) (undo-tree-id601 . -1) 3301) nil (25905 19910 538017 204000) 0 nil])
([nil nil ((3299 . 3301)) nil (25905 19910 538015 326000) 0 nil])
([nil nil ((3301 . 3307)) nil (25905 19910 538014 942000) 0 nil])
([nil nil ((3307 . 3308)) nil (25905 19910 538014 548000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3307) (undo-tree-id599 . -1) 3308) nil (25905 19910 538014 20000) 0 nil])
([nil nil ((3307 . 3317)) nil (25905 19910 538012 863000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3316) (undo-tree-id598 . -1) 3317) nil (25905 19910 538012 253000) 0 nil])
([nil nil ((3316 . 3318)) nil (25905 19910 538011 55000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3316) (undo-tree-id596 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3317) (undo-tree-id597 . -1) 3318) nil (25905 19910 538010 186000) 0 nil])
([nil nil ((3316 . 3321)) nil (25905 19910 538008 473000) 0 nil])
([nil nil ((3321 . 3322)) nil (25905 19910 538008 56000) 0 nil])
([nil nil ((3322 . 3324)) nil (25905 19910 538007 642000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3327 3347 nil nil nil t nil)) nil 13 nil #s(yas--field 1 3327 3347 nil nil nil t nil) nil nil)) (3321 . 3336) (#("Parse(${1:s string})" 0 20 (fontified nil)) . 3321) (3321 . 3341) (#("Par" 0 3 (fontified nil)) . 3321) (3321 . 3324) (#("Parse" 0 5 (fontified nil)) . -3321) (3321 . 3326) (#("Par" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3321) (undo-tree-id594 . -3) (undo-tree-id595 . -3) 3324) nil (25905 19910 538006 813000) 0 nil])
([nil nil ((3328 . 3330) (#("s string" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 8 (fontified nil face tree-sitter-hl-face:variable)) . 3328) (3327 . 3328)) nil (25905 19910 538004 450000) 0 nil])
([nil nil ((3330 . 3331)) nil (25905 19910 538003 775000) 0 nil])
([nil nil ((apply yas--snippet-revive 3327 3347 #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 3327 3347 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil #s(yas--field 1 3327 3347 nil nil nil t nil) nil)) (3327 . 3347) (#("feedFollowReq.FeedId" 0 20 (fontified nil)) . 3327) (3327 . 3347) (#("feed" 0 4 (fontified nil)) . 3327) (3327 . 3331) (#("feedFollowReq.FeedId" 0 20 (fontified nil)) . -3327) (3327 . 3347) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3327) (undo-tree-id592 . -4) (undo-tree-id593 . -4) 3331) nil (25905 19910 538002 458000) 0 nil])
([nil nil ((apply yas--snippet-revive 3321 3348 #s(yas--snippet nil (#s(yas--field 1 3327 3347 nil nil nil t nil)) nil 13 nil #s(yas--field 1 3327 3347 nil nil nil t nil) nil nil))) nil (25905 19910 537732 75000) 0 nil])
([nil nil ((3348 . 3349)) nil (25905 19910 537731 753000) 0 nil])
([nil nil ((3349 . 3351)) nil (25905 19910 537731 435000) 0 nil])
([nil nil ((3351 . 3357)) nil (25905 19910 537731 25000) 0 nil])
([nil nil ((3357 . 3358)) nil (25905 19910 537730 701000) 0 nil])
([nil nil ((3358 . 3364)) nil (25905 19910 537730 354000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3366) (3366 . 3367) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3366) (3366 . 3367) (3364 . 3367)) nil (25905 19910 537729 743000) 0 nil])
([nil nil ((3367 . 3369) (3368 . 3369) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3367) (3367 . 3369) (3366 . 3368)) nil (25905 19910 537728 848000) 0 nil])
([nil nil ((3369 . 3373)) nil (25905 19910 537728 100000) 0 nil])
([nil nil ((3373 . 3375)) nil (25905 19910 537727 385000) 0 nil])
([nil nil ((3375 . 3378)) nil (25905 19910 537727 31000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3392 3393 nil nil nil t #s(yas--field 2 3395 3398 nil nil nil t #s(yas--field 3 3400 3421 nil nil nil t nil))) #s(yas--field 2 3395 3398 nil nil nil t #s(yas--field 3 3400 3421 nil nil nil t nil)) #s(yas--field 3 3400 3421 nil nil nil t nil)) nil 15 nil #s(yas--field 3 3400 3421 nil nil nil t nil) nil nil)) (3375 . 3436) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3375) (3375 . 3451) (#("Res" 0 3 (fontified nil)) . 3375) (3375 . 3378) (#("RespondWithError" 0 16 (fontified nil)) . -3375) (3375 . 3391) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3375) (undo-tree-id590 . -3) (undo-tree-id591 . -3) 3378) nil (25905 19910 537725 741000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3393) (3392 . 3393)) nil (25905 19910 537722 667000) 0 nil])
([nil nil ((3396 . 3398) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3396) (3395 . 3396)) nil (25905 19910 537721 973000) 0 nil])
([nil nil ((3401 . 3420) (3400 . 3402) (#("\"" 0 1 (fontified nil)) . -3400) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3401) (3400 . 3401)) nil (25905 19910 537721 72000) 0 nil])
([nil nil ((apply yas--snippet-revive 3375 3422 #s(yas--snippet nil (#s(yas--field 1 3392 3393 nil nil nil t #s(yas--field 2 3395 3398 nil nil nil t #s(yas--field 3 3400 3421 nil nil nil t nil))) #s(yas--field 2 3395 3398 nil nil nil t #s(yas--field 3 3400 3421 nil nil nil t nil)) #s(yas--field 3 3400 3421 nil nil nil t nil)) nil 15 nil #s(yas--field 3 3400 3421 nil nil nil t nil) nil nil))) nil (25905 19910 537720 211000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3465) (undo-tree-id576 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3466) (undo-tree-id577 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3467) (undo-tree-id578 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3468) (undo-tree-id579 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3469) (undo-tree-id580 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3470) (undo-tree-id581 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3471) (undo-tree-id582 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3472) (undo-tree-id583 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3473) (undo-tree-id584 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3474) (undo-tree-id585 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3475) (undo-tree-id586 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3476) (undo-tree-id587 . -1) (#("." 0 1 (fontified t)) . -3477) (undo-tree-id588 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3478) (undo-tree-id589 . -1) 3479) nil (25905 19910 537717 830000) 0 nil])
([nil nil ((3472 . 3474)) nil (25905 19910 537708 372000) 0 nil])
([nil nil ((3474 . 3477)) nil (25905 19910 537707 919000) 0 nil])
([nil nil ((3422 . 3425)) nil (25905 19910 537707 444000) 0 nil])
([nil nil ((3425 . 3431)) nil (25905 19910 537707 27000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -3487) (3487 . 3488) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3487) (3487 . 3488) (3486 . 3488)) nil (25905 19910 537706 111000) 0 nil])
([nil nil ((3487 . 3491)) nil (25905 19910 537705 368000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3487) (undo-tree-id572 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3488) (undo-tree-id573 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3489) (undo-tree-id574 . -1) (#(" " 0 1 (fontified t)) . -3490) (undo-tree-id575 . -1) 3491) nil (25905 19910 537703 942000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3486) (undo-tree-id571 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 3487)) nil (25905 19910 537700 438000) 0 nil])
([nil nil ((3486 . 3487)) nil (25905 19910 537699 252000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3486) (undo-tree-id570 . -1) 3487) nil (25905 19910 537698 613000) 0 nil])
([nil nil ((3486 . 3497)) nil (25905 19910 537697 528000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3498) (3498 . 3499) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3498) (3498 . 3499) (3497 . 3499)) nil (25905 19910 537696 560000) 0 nil])
([nil nil ((3499 . 3501) (3500 . 3501) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3499) (3499 . 3501) (3498 . 3500)) nil (25905 19910 537695 733000) 0 nil])
([nil nil ((3501 . 3507)) nil (25905 19910 537694 894000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3524 3525 nil nil nil t #s(yas--field 2 3527 3530 nil nil nil t #s(yas--field 3 3532 3555 nil nil nil t nil))) #s(yas--field 2 3527 3530 nil nil nil t #s(yas--field 3 3532 3555 nil nil nil t nil)) #s(yas--field 3 3532 3555 nil nil nil t nil)) nil 16 nil #s(yas--field 3 3532 3555 nil nil nil t nil) nil nil)) (3507 . 3568) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3507) (3507 . 3583) (#("RespondWithError" 0 16 (fontified nil)) . -3507) (3507 . 3523)) nil (25905 19910 537694 233000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3525) (undo-tree-id569 . -21) (3524 . 3525)) nil (25905 19910 537693 177000) 0 nil])
([nil nil ((3528 . 3530) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3528) (undo-tree-id568 . -8) (3527 . 3528)) nil (25905 19910 537691 841000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3527) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3528) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3529) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) 3530) nil (25905 19910 537690 113000) 0 nil])
([nil nil ((3527 . 3530)) nil (25905 19910 537684 97000) 0 nil])
([nil nil ((3533 . 3536) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3533) (undo-tree-id558 . -10) (3532 . 3533)) nil (25905 19910 537683 350000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3532) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3533) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3534) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3535) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 3536) nil (25905 19910 537681 80000) 0 nil])
([nil nil ((3533 . 3553) (3532 . 3534) (#("\"" 0 1 (fontified nil)) . -3532) (undo-tree-id545 . -1) (3532 . 3533)) nil (25905 19910 537672 251000) 0 nil])
([nil nil ((3553 . 3554)) nil (25905 19910 537662 947000) 0 nil])
([nil nil ((apply yas--snippet-revive 3507 3556 #s(yas--snippet nil (#s(yas--field 1 3524 3525 nil nil nil t #s(yas--field 2 3527 3530 nil nil nil t #s(yas--field 3 3532 3555 nil nil nil t nil))) #s(yas--field 2 3527 3530 nil nil nil t #s(yas--field 3 3532 3555 nil nil nil t nil)) #s(yas--field 3 3532 3555 nil nil nil t nil)) nil 16 nil #s(yas--field 3 3532 3555 nil nil nil t nil) nil nil))) nil (25905 19910 537658 889000) 0 nil])
([nil nil ((3556 . 3559) (t 25905 19910 568196 724000)) nil (25905 21104 315000 939000) 0 nil])
([nil nil ((3559 . 3565)) nil (25905 21104 315000 318000) 0 nil])
([nil nil ((3568 . 3570)) nil (25905 21104 314999 802000) 0 nil])
([nil nil ((3568 . 3570)) nil (25905 21104 314999 457000) 0 nil])
([nil nil ((3570 . 3571)) nil (25905 21104 314999 31000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3570) (undo-tree-id655 . -1) 3571) nil (25905 21104 314998 445000) 0 nil])
([nil nil ((3570 . 3581)) nil (25905 21104 314997 305000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3580) (undo-tree-id654 . -1) 3581) nil (25905 21104 314996 712000) 0 nil])
([nil nil ((3580 . 3589)) nil (25905 21104 314995 651000) 0 nil])
([nil nil ((3589 . 3594)) nil (25905 21104 314995 242000) 0 nil])
([nil nil ((3594 . 3601)) nil (25905 21104 314994 834000) 0 nil])
([nil nil ((3601 . 3602)) nil (25905 21104 314994 324000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3612 3617 nil nil nil t #s(yas--field 2 3619 3655 nil nil nil nil nil)) #s(yas--field 2 3619 3655 nil nil nil nil nil)) nil 17 nil #s(yas--field 2 3619 3655 nil nil nil nil nil) nil nil)) (3594 . 3670) (#("CreateFeedFollows(${1:ctx context.Context}, ${2:arg database.CreateFeedFollowsParams})" 0 86 (fontified nil)) . 3594) (3594 . 3680) (#("CreateFo" 0 8 (fontified nil)) . 3594) (3594 . 3602) (#("CreateFeedFollows" 0 17 (fontified nil)) . -3594) (3594 . 3611) (#("CreateFo" 0 8 (fontified t face tree-sitter-hl-face:property)) . -3594) (undo-tree-id651 . -7) (undo-tree-id652 . -8) (undo-tree-id653 . -8) 3602) nil (25905 21104 314993 232000) 0 nil])
([nil nil ((3613 . 3617) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 3613) (3612 . 3613)) nil (25905 21104 314990 72000) 0 nil])
([nil nil ((apply yas--snippet-revive 3614 3617 #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 3612 3617 nil nil nil t #s(yas--field 2 3619 3655 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil #s(yas--field 1 3612 3617 nil nil nil t #s(yas--field 2 3619 3655 nil nil nil nil nil)) nil)) (3614 . 3617) (#("ctx" 0 3 (fontified nil)) . 3614) (3614 . 3617) (#("ctx" 0 3 (fontified nil)) . 3614) (3614 . 3617) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3614) (undo-tree-id649 . -3) (undo-tree-id650 . -3) 3617) nil (25905 21104 314989 10000) 0 nil])
([nil nil ((apply yas--snippet-revive 3594 3656 #s(yas--snippet nil (#s(yas--field 1 3612 3617 nil nil nil t #s(yas--field 2 3619 3655 nil nil nil nil nil)) #s(yas--field 2 3619 3655 nil nil nil nil nil)) nil 17 nil #s(yas--field 2 3619 3655 nil nil nil nil nil) nil nil))) nil (25905 21104 314986 293000) 0 nil])
([nil nil ((3568 . 3570)) nil (25905 21104 314985 553000) 0 nil])
([nil nil ((3570 . 3573)) nil (25905 21104 314984 885000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3572) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 3573) nil (25905 21104 314984 277000) 0 nil])
([nil nil ((3572 . 3574)) nil (25905 21104 314982 605000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3570) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3571) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3572) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3573) (undo-tree-id645 . -1) (undo-tree-id646 . -1) 3574) nil (25905 21104 314981 421000) 0 nil])
([nil nil ((3570 . 3578)) nil (25905 21104 314975 749000) 0 nil])
([nil nil ((3578 . 3583)) nil (25905 21104 314975 361000) 0 nil])
([nil nil ((apply yas--snippet-revive 3579 3587 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (3579 . 3587) (#("database" 0 8 (fontified nil)) . 3579) (3579 . 3587) (#("data" 0 4 (fontified nil)) . 3579) (3579 . 3583) (#("database" 0 8 (fontified nil)) . -3579) (3579 . 3587) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3579) (undo-tree-id637 . -4) (undo-tree-id638 . -4) 3583) nil (25905 21104 314974 437000) 0 nil])
([nil nil ((3587 . 3591)) nil (25905 21104 314972 246000) 0 nil])
([nil nil ((apply yas--snippet-revive 3588 3611 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (3588 . 3611) (#("CreateFeedFollowsParams" 0 23 (fontified nil)) . 3588) (3588 . 3611) (#("Cre" 0 3 (fontified nil)) . 3588) (3588 . 3591) (#("CreateFeedFollowsParams" 0 23 (fontified nil)) . -3588) (3588 . 3611) (#("Cre" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3588) (undo-tree-id635 . -3) (undo-tree-id636 . -3) 3591) nil (25905 21104 314970 996000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3612) (3612 . 3613) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3612) (3612 . 3613) (3611 . 3613)) nil (25905 21104 314968 540000) 0 nil])
([nil nil ((3613 . 3615)) nil (25905 21104 314967 779000) 0 nil])
([nil nil ((3615 . 3618)) nil (25905 21104 314967 372000) 0 nil])
([nil nil ((apply yas--snippet-revive 3615 3623 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (3615 . 3623) (#("dbObj.ID" 0 8 (fontified nil)) . 3615) (3615 . 3623) (#("dbO" 0 3 (fontified nil)) . 3615) (3615 . 3618) (#("dbObj.ID" 0 8 (fontified nil)) . -3615) (3615 . 3623) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3615) (undo-tree-id633 . -3) (undo-tree-id634 . -3) 3618) nil (25905 21104 314966 399000) 0 nil])
([nil nil ((3623 . 3626)) nil (25905 21104 314964 37000) 0 nil])
([nil nil ((3626 . 3628)) nil (25905 21104 314963 556000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3626) (undo-tree-id631 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3627) (undo-tree-id632 . -1) 3628) nil (25905 21104 314962 790000) 0 nil])
([nil nil ((3626 . 3634)) nil (25905 21104 314961 43000) 0 nil])
([nil nil ((apply yas--snippet-revive 3631 3636 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (3631 . 3636) (#("New()" 0 5 (fontified nil)) . 3631) (3631 . 3636) (#("New" 0 3 (fontified nil)) . 3631) (3631 . 3634) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3631) (undo-tree-id629 . -3) (undo-tree-id630 . -3) 3634) nil (25905 21104 314960 143000) 0 nil])
([nil nil ((3636 . 3637)) nil (25905 21104 314957 736000) 0 nil])
([nil nil ((3637 . 3639)) nil (25905 21104 314957 325000) 0 nil])
([nil nil ((3639 . 3644)) nil (25905 21104 314956 867000) 0 nil])
([nil nil ((3644 . 3645)) nil (25905 21104 314956 181000) 0 nil])
([nil nil ((3637 . 3639)) nil (25905 21104 314955 740000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3638) (undo-tree-id628 . -1) 3639) nil (25905 21104 314955 27000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3639 . 3640) (#("
" 0 1 (fontified nil)) . -3663) (3638 . 3664)) nil (25905 21104 314953 889000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3638)) nil (25905 21104 314953 185000) 0 nil])
([nil nil ((3670 . 3673)) nil (25905 21104 314952 784000) 0 nil])
([nil nil ((apply yas--snippet-revive 3670 3679 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (3670 . 3679) (#("CreatedAt" 0 9 (fontified nil)) . 3670) (3670 . 3679) (#("cre" 0 3 (fontified nil)) . 3670) (3670 . 3673) (#("CreatedAt" 0 9 (fontified nil)) . -3670) (3670 . 3679) (#("cre" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3670) (undo-tree-id626 . -3) (undo-tree-id627 . -3) 3673) nil (25905 21104 314951 610000) 0 nil])
([nil nil ((3679 . 3685)) nil (25905 21104 314949 227000) 0 nil])
([nil nil ((apply yas--snippet-revive 3682 3691 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (3682 . 3691) (#("timeStamp" 0 9 (fontified nil)) . 3682) (3682 . 3691) (#("tim" 0 3 (fontified nil)) . 3682) (3682 . 3685) (#("timeStamp" 0 9 (fontified nil)) . -3682) (3682 . 3691) (#("tim" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3682) (undo-tree-id624 . -3) (undo-tree-id625 . -3) 3685) nil (25905 21104 314947 980000) 0 nil])
([nil nil ((3691 . 3692)) nil (25905 21104 314945 228000) 0 nil])
([nil nil ((3692 . 3694)) nil (25905 21104 314944 441000) 0 nil])
([nil nil ((3694 . 3697)) nil (25905 21104 314943 873000) 0 nil])
([nil nil ((apply yas--snippet-revive 3694 3709 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (3694 . 3709) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . 3694) (3694 . 3709) (#("dbO" 0 3 (fontified nil)) . 3694) (3694 . 3697) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . -3694) (3694 . 3709) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3694) (undo-tree-id622 . -3) (undo-tree-id623 . -3) 3697) nil (25905 21104 314942 869000) 0 nil])
([nil nil ((3709 . 3716)) nil (25905 21104 314940 339000) 0 nil])
([nil nil ((apply yas--snippet-revive 3712 3721 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (3712 . 3721) (#("timeStamp" 0 9 (fontified nil)) . 3712) (3712 . 3721) (#("time" 0 4 (fontified nil)) . 3712) (3712 . 3716) (#("timeStamp" 0 9 (fontified nil)) . -3712) (3712 . 3721) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3712) (undo-tree-id620 . -4) (undo-tree-id621 . -4) 3716) nil (25905 21104 314938 976000) 0 nil])
([nil nil ((3721 . 3722)) nil (25905 21104 314936 197000) 0 nil])
([nil nil ((3722 . 3724)) nil (25905 21104 314935 399000) 0 nil])
([nil nil ((3724 . 3730)) nil (25905 21104 314934 723000) 0 nil])
([nil nil ((apply yas--snippet-revive 3730 3736 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (3730 . 3736) (#("FeedID" 0 6 (fontified nil)) . 3730) (3730 . 3736) (#("FeedID" 0 6 (fontified nil)) . -3730) (3730 . 3736)) nil (25905 21104 314933 830000) 0 nil])
([nil nil ((3736 . 3744)) nil (25905 21104 314932 927000) 0 nil])
([nil nil ((apply yas--snippet-revive 3744 3746 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (3744 . 3746) (#("ID" 0 2 (fontified nil)) . 3744) (3744 . 3746) (#("ID" 0 2 (fontified nil)) . -3744) (3744 . 3746)) nil (25905 21104 314932 234000) 0 nil])
([nil nil ((3746 . 3747)) nil (25905 21104 314931 359000) 0 nil])
([nil nil ((3747 . 3749)) nil (25905 21104 314930 897000) 0 nil])
([nil nil ((3749 . 3752)) nil (25905 21104 314930 423000) 0 nil])
([nil nil ((3752 . 3757)) nil (25905 21104 314929 908000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3755) (undo-tree-id618 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3756) (undo-tree-id619 . -1) 3757) nil (25905 21104 314929 98000) 0 nil])
([nil nil ((3755 . 3759)) nil (25905 21104 314927 32000) 0 nil])
([nil nil ((apply yas--snippet-revive 3755 3761 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (3755 . 3761) (#("UserID" 0 6 (fontified nil)) . 3755) (3755 . 3761) (#("User" 0 4 (fontified nil)) . 3755) (3755 . 3759) (#("UserID" 0 6 (fontified nil)) . -3755) (3755 . 3761) (#("User" 0 4 (fontified t face tree-sitter-hl-face:property)) . -3755) (undo-tree-id616 . -4) (undo-tree-id617 . -4) 3759) nil (25905 21104 314925 538000) 0 nil])
([nil nil ((3761 . 3769)) nil (25905 21104 314923 162000) 0 nil])
([nil nil ((apply yas--snippet-revive 3769 3771 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (3769 . 3771) (#("ID" 0 2 (fontified nil)) . 3769) (3769 . 3771) (#("ID" 0 2 (fontified nil)) . -3769) (3769 . 3771)) nil (25905 21104 314922 433000) 0 nil])
([nil nil ((3771 . 3772)) nil (25905 21104 314921 489000) 0 nil])
([nil nil ((#("arg database.CreateFeedFollowsParams" 0 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t) 4 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 36 (fontified t face tree-sitter-hl-face:property)) . 3823) (undo-tree-id610 . -35) (undo-tree-id611 . 34) (undo-tree-id612 . -35) (undo-tree-id613 . -35) (undo-tree-id614 . -35) (undo-tree-id615 . -35) 3858) nil (25905 21104 314920 681000) 0 nil])
([nil nil ((3823 . 3826)) nil (25905 21104 314916 140000) 0 nil])
([nil nil ((apply yas--snippet-revive 3823 3828 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (3823 . 3828) (#("dbObj" 0 5 (fontified nil)) . 3823) (3823 . 3828) (#("dbO" 0 3 (fontified nil)) . 3823) (3823 . 3826) (#("dbObj" 0 5 (fontified nil)) . -3823) (3823 . 3828) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3823) (undo-tree-id608 . -3) (undo-tree-id609 . -3) 3826) nil (25905 21104 314914 513000) 0 nil])
([nil nil ((3829 . 3830)) nil (25905 21104 314901 884000) 0 nil])
([nil nil ((3830 . 3832) (t 25905 21104 345853 652000)) nil (25905 21133 62287 120000) 0 nil])
([nil nil ((3832 . 3836)) nil (25905 21133 62286 575000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3847) (3847 . 3848) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3847) (3847 . 3848) (3836 . 3848)) nil (25905 21133 62285 924000) 0 nil])
([nil nil ((3848 . 3850) (3849 . 3850) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3848) (3848 . 3850) (3847 . 3849)) nil (25905 21133 62284 913000) 0 nil])
([nil nil ((3850 . 3857)) nil (25905 21133 62283 919000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3856) (undo-tree-id661 . -1) 3857) nil (25905 21133 62283 257000) 0 nil])
([nil nil ((3856 . 3857)) nil (25905 21133 62282 45000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -3856) (undo-tree-id660 . -1) 3857) nil (25905 21133 62281 303000) 0 nil])
([nil nil ((3847 . 3850)) nil (25905 21133 62279 772000) 0 nil])
([nil nil ((3850 . 3856)) nil (25905 21133 62279 76000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3873 3874 nil nil nil t #s(yas--field 2 3876 3879 nil nil nil t #s(yas--field 3 3881 3904 nil nil nil t nil))) #s(yas--field 2 3876 3879 nil nil nil t #s(yas--field 3 3881 3904 nil nil nil t nil)) #s(yas--field 3 3881 3904 nil nil nil t nil)) nil 32 nil #s(yas--field 3 3881 3904 nil nil nil t nil) nil nil)) (3856 . 3917) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3856) (3856 . 3932) (#("RespondWithError" 0 16 (fontified nil)) . -3856) (3856 . 3872)) nil (25905 21133 62278 244000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3874) (undo-tree-id659 . -21) (3873 . 3874)) nil (25905 21133 62277 218000) 0 nil])
([nil nil ((3877 . 3879) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3877) (undo-tree-id658 . -8) (3876 . 3877)) nil (25905 21133 62275 761000) 0 nil])
([nil nil ((3882 . 3902) (3881 . 3883) (#("\"" 0 1 (fontified nil)) . -3881) (undo-tree-id656 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3882) (undo-tree-id657 . -10) (3881 . 3882)) nil (25905 21133 62273 559000) 0 nil])
([nil nil ((3902 . 3903)) nil (25905 21133 62264 296000) 0 nil])
([nil nil ((apply yas--snippet-revive 3856 3905 #s(yas--snippet nil (#s(yas--field 1 3873 3874 nil nil nil t #s(yas--field 2 3876 3879 nil nil nil t #s(yas--field 3 3881 3904 nil nil nil t nil))) #s(yas--field 2 3876 3879 nil nil nil t #s(yas--field 3 3881 3904 nil nil nil t nil)) #s(yas--field 3 3881 3904 nil nil nil t nil)) nil 32 nil #s(yas--field 3 3881 3904 nil nil nil t nil) nil nil))) nil (25905 21133 62260 602000) 0 nil])
([nil nil ((3905 . 3906) (t 25905 21133 90980 797000)) nil (25905 21134 950258 191000) 0 nil])
([nil nil ((3918 . 3920) (t 25905 21134 980989 120000)) nil (25905 21155 578082 914000) 0 nil])
([nil nil ((3920 . 3926)) nil (25905 21155 578082 418000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3942 3943 nil nil nil t #s(yas--field 2 3945 3948 nil nil nil t #s(yas--field 3 3950 3960 nil nil nil t nil))) #s(yas--field 2 3945 3948 nil nil nil t #s(yas--field 3 3950 3960 nil nil nil t nil)) #s(yas--field 3 3950 3960 nil nil nil t nil)) nil 33 nil #s(yas--field 3 3950 3960 nil nil nil t nil) nil nil)) (3926 . 3995) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 3926) (3926 . 4011) (#("RespondWithJSON" 0 15 (fontified nil)) . -3926) (3926 . 3941)) nil (25905 21155 578081 516000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3943) (undo-tree-id675 . -21) (3942 . 3943)) nil (25905 21155 578080 456000) 0 nil])
([nil nil ((3946 . 3948) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3946) (undo-tree-id674 . -8) (3945 . 3946)) nil (25905 21155 578079 70000) 0 nil])
([nil nil ((3950 . 3952) (#("\"" 0 1 (fontified nil)) . -3950) (undo-tree-id672 . -1) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 3951) (undo-tree-id673 . -19) (3950 . 3951)) nil (25905 21155 578077 653000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -3950) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 3951) (undo-tree-id671 . -1)) nil (25905 21155 578074 967000) 0 nil])
([nil nil ((3950 . 3954)) nil (25905 21155 578072 113000) 0 nil])
([nil nil ((apply yas--snippet-revive 3950 3960 #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 3 3950 3960 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil #s(yas--field 3 3950 3960 nil nil nil t nil) nil)) (3950 . 3960) (#("feedFollow" 0 10 (fontified nil)) . 3950) (undo-tree-id662 . -10) (3950 . 3960) (#("feed" 0 4 (fontified nil)) . 3950) (undo-tree-id663 . -4) (3950 . 3954) (#("feedFollow" 0 10 (fontified nil)) . -3950) (undo-tree-id664 . -10) (3950 . 3960) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3950) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) 3954) nil (25905 21155 578070 559000) 0 nil])
([nil nil ((apply yas--snippet-revive 3926 3961 #s(yas--snippet nil (#s(yas--field 1 3942 3943 nil nil nil t #s(yas--field 2 3945 3948 nil nil nil t #s(yas--field 3 3950 3960 nil nil nil t nil))) #s(yas--field 2 3945 3948 nil nil nil t #s(yas--field 3 3950 3960 nil nil nil t nil)) #s(yas--field 3 3950 3960 nil nil nil t nil)) nil 33 nil #s(yas--field 3 3950 3960 nil nil nil t nil) nil nil))) nil (25905 21155 578058 331000) 0 nil])
([nil nil ((3961 . 3962)) nil (25905 21155 578054 630000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 3963) (undo-tree-id676 . -1) (undo-tree-id677 . -2) (undo-tree-id678 . -1) (undo-tree-id679 . -2) (undo-tree-id680 . -2) (t 25905 21155 608079 685000)) nil (25905 21161 68626 392000) 0 nil])
([nil nil ((3964 . 3966) (t 25905 21161 105103 731000)) nil (25905 21790 448037 749000) 0 nil])
([nil nil ((3966 . 3971)) nil (25905 21790 448037 239000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -3972) (3972 . 3973) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -3972) (3972 . 3973) (3971 . 3973)) nil (25905 21790 448036 610000) 0 nil])
([nil nil ((3972 . 3978)) nil (25905 21790 448035 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 3975 3984 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (3975 . 3984) (#("apiConfig" 0 9 (fontified nil)) . 3975) (3975 . 3984) (#("api" 0 3 (fontified nil)) . 3975) (3975 . 3978) (#("apiConfig" 0 9 (fontified nil)) . -3975) (3975 . 3984) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -3975) (undo-tree-id690 . -3) (undo-tree-id691 . -3) 3978) nil (25905 21790 448034 646000) 0 nil])
([nil nil ((3985 . 3992)) nil (25905 21790 448032 198000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3986) (undo-tree-id684 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3987) (undo-tree-id685 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3988) (undo-tree-id686 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3989) (undo-tree-id687 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3990) (undo-tree-id688 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3991) (undo-tree-id689 . -1) 3992) nil (25905 21790 448031 118000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4003) (4003 . 4004) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4003) (4003 . 4004) (3986 . 4004)) nil (25905 21790 448026 23000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4006) (4006 . 4007) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4006) (4006 . 4007) (4004 . 4007)) nil (25905 21790 448024 942000) 0 nil])
([nil nil ((4007 . 4008) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4007) (4007 . 4008) (4006 . 4008)) nil (25905 21790 448023 405000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -3814) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) 3815) nil (25905 21790 448020 179000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . 3604) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (t 25905 21790 479224 477000)) nil (25905 21797 234481 394000) 0 nil])
([nil nil ((4001 . 4007) (t 25905 21797 265225 196000)) nil (25905 21880 410399 287000) 0 nil])
([nil nil ((4007 . 4008)) nil (25905 21880 410398 683000) 0 nil])
([nil nil ((4008 . 4011)) nil (25905 21880 410398 125000) 0 nil])
([nil nil ((apply yas--snippet-revive 4008 4022 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (4008 . 4022) (#("ResponseWriter" 0 14 (fontified nil)) . 4008) (4008 . 4022) (#("Res" 0 3 (fontified nil)) . 4008) (4008 . 4011) (#("ResponseWriter" 0 14 (fontified nil)) . -4008) (4008 . 4022) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4008) (undo-tree-id699 . -3) (undo-tree-id700 . -3) 4011) nil (25905 21880 410396 949000) 0 nil])
([nil nil ((4022 . 4026)) nil (25905 21880 410394 400000) 0 nil])
([nil nil ((4026 . 4035)) nil (25905 21880 410393 983000) 0 nil])
([nil nil ((apply yas--snippet-revive 4032 4039 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (4032 . 4039) (#("Request" 0 7 (fontified nil)) . 4032) (4032 . 4039) (#("Req" 0 3 (fontified nil)) . 4032) (4032 . 4035) (#("Request" 0 7 (fontified nil)) . -4032) (4032 . 4039) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4032) (undo-tree-id697 . -3) (undo-tree-id698 . -3) 4035) nil (25905 21880 410392 818000) 0 nil])
([nil nil ((4039 . 4053)) nil (25905 21880 410389 386000) 0 nil])
([nil nil ((apply yas--snippet-revive 4050 4054 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (4050 . 4054) (#("User" 0 4 (fontified nil)) . 4050) (4050 . 4054) (#("Use" 0 3 (fontified nil)) . 4050) (4050 . 4053) (#("User" 0 4 (fontified nil)) . -4050) (4050 . 4054) (#("Use" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4050) (undo-tree-id695 . -3) (undo-tree-id696 . -3) 4053) nil (25905 21880 410386 77000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4061 . 4062) (#("
" 0 1 (fontified nil)) . -4089) (4059 . 4090) 4058 (t 25905 21880 441254 639000)) nil (25905 21995 14897 281000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 4058) (undo-tree-id732 . -1)) nil (25905 21995 14896 349000) 0 nil])
([nil nil ((5098 . 5100)) nil (25905 21995 14895 245000) 0 nil])
([nil nil ((5100 . 5103)) nil (25905 21995 14894 808000) 0 nil])
([nil nil ((apply yas--snippet-revive 5100 5108 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (5100 . 5108) (#("v1Router" 0 8 (fontified nil)) . 5100) (5100 . 5108) (#("v1R" 0 3 (fontified nil)) . 5100) (5100 . 5103) (#("v1Router" 0 8 (fontified nil)) . -5100) (5100 . 5108) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5100) (undo-tree-id730 . -3) (undo-tree-id731 . -3) 5103) nil (25905 21995 14893 874000) 0 nil])
([nil nil ((5108 . 5112)) nil (25905 21995 14891 476000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5116 5135 nil nil nil t #s(yas--field 2 5137 5181 nil nil nil t nil)) #s(yas--field 2 5137 5181 nil nil nil t nil)) nil 40 nil #s(yas--field 2 5137 5181 nil nil nil t nil) nil nil)) (5109 . 5159) (#("Delete(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 60 (fontified nil)) . 5109) (5109 . 5169) (#("Del" 0 3 (fontified nil)) . 5109) (5109 . 5112) (#("Delete" 0 6 (fontified nil)) . -5109) (5109 . 5115) (#("Del" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5109) (undo-tree-id728 . -3) (undo-tree-id729 . -3) 5112) nil (25905 21995 14890 169000) 0 nil])
([nil nil ((5117 . 5121) (5116 . 5118) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5116) (undo-tree-id726 . -1) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 5117) (undo-tree-id727 . -14) (5116 . 5117)) nil (25905 21995 14887 599000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5131) (5131 . 5132) (#("}" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -5131) (5131 . 5132) (5121 . 5132)) nil (25905 21995 14885 74000) 0 nil])
([nil nil ((5131 . 5137)) nil (25905 21995 14884 155000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5131) (undo-tree-id720 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5132) (undo-tree-id721 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5133) (undo-tree-id722 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5134) (undo-tree-id723 . -1) (#("_" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5135) (undo-tree-id724 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5136) (undo-tree-id725 . -1) 5137) nil (25905 21995 14882 964000) 0 nil])
([nil nil ((5131 . 5133)) nil (25905 21995 14878 770000) 0 nil])
([nil nil ((5138 . 5147) (#("handlerFn http.HandlerFunc" 0 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 14 (fontified nil face tree-sitter-hl-face:variable) 14 15 (fontified nil) 15 26 (fontified nil face tree-sitter-hl-face:property)) . 5138) (undo-tree-id719 . -26) (5137 . 5138)) nil (25905 21995 14878 226000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5157 5180 nil nil nil t nil)) nil 41 nil #s(yas--field 1 5157 5180 nil nil nil t nil) #s(yas--field 2 5137 5181 nil nil nil t nil) nil)) (5144 . 5179) (#("authenticate(${1:handler authedHandler})" 0 40 (fontified nil)) . 5144) (undo-tree-id713 . -40) (5144 . 5184) (#("aut" 0 3 (fontified nil)) . 5144) (undo-tree-id714 . -3) (5144 . 5147) (#("authenticate" 0 12 (fontified nil)) . -5144) (undo-tree-id715 . -12) (5144 . 5156) (#("aut" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5144) (undo-tree-id716 . -3) (undo-tree-id717 . -3) (undo-tree-id718 . -3) 5147) nil (25905 21995 14876 158000) 0 nil])
([nil nil ((5158 . 5163) (#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 5158) (undo-tree-id712 . -21) (5157 . 5158)) nil (25905 21995 14870 959000) 0 nil])
([nil nil ((apply yas--snippet-revive 5157 5180 #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 5157 5180 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil #s(yas--field 1 5157 5180 nil nil nil t nil) nil)) (5157 . 5180) (#("apiCfg.DeleteFeedFollow" 0 23 (fontified nil)) . 5157) (undo-tree-id701 . -23) (5157 . 5180) (#("apiCfg" 0 6 (fontified nil)) . 5157) (undo-tree-id702 . -6) (5157 . 5163) (#("apiCfg.DeleteFeedFollow" 0 23 (fontified nil)) . -5157) (undo-tree-id703 . -23) (5157 . 5180) (#("apiCfg" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -5157) (undo-tree-id704 . -6) (undo-tree-id705 . -6) (undo-tree-id706 . -6) (undo-tree-id707 . -6) (undo-tree-id708 . -6) (undo-tree-id709 . -6) (undo-tree-id710 . -6) (undo-tree-id711 . -6) 5163) nil (25905 21995 14868 627000) 0 nil])
([nil nil ((apply yas--snippet-revive 5144 5181 #s(yas--snippet nil (#s(yas--field 1 5157 5180 nil nil nil t nil)) nil 41 nil #s(yas--field 1 5157 5180 nil nil nil t nil) #s(yas--field 2 5137 5181 nil nil nil t nil) nil))) nil (25905 21995 14853 287000) 0 nil])
([nil nil ((apply yas--snippet-revive 5109 5182 #s(yas--snippet nil (#s(yas--field 1 5116 5135 nil nil nil t #s(yas--field 2 5137 5181 nil nil nil t nil)) #s(yas--field 2 5137 5181 nil nil nil t nil)) nil 40 nil #s(yas--field 2 5137 5181 nil nil nil t nil) nil nil))) nil (25905 21995 14849 749000) 0 nil])
([nil nil ((5182 . 5183) (t 25905 21995 47349 967000)) nil (25905 21996 653630 38000) 0 nil])
([nil nil ((5185 . 5186) (#("	" 0 1 (fontified nil)) . 5184) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (5183 . 5186) (t 25905 21996 679351 727000)) nil (25905 22000 497099 368000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -5185) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) 5186) nil (25905 22000 497092 488000) 0 nil])
([nil nil ((4087 . 4088) (4058 . 4059) (#("		" 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . -4058) (4087 . 4088) (t 25905 22000 528355 917000)) nil (25905 22131 959134 251000) 0 nil])
([nil nil ((4088 . 4095)) nil (25905 22131 959133 501000) 0 nil])
([nil nil ((4095 . 4100)) nil (25905 22131 959133 22000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4121 4126 nil nil nil t #s(yas--field 2 4128 4130 nil nil nil t nil)) #s(yas--field 2 4128 4130 nil nil nil t nil)) nil 43 nil #s(yas--field 2 4128 4130 nil nil nil t nil) nil nil)) (4100 . 4155) (#("DeleteFeedFollowById(${1:ctx context.Context}, ${2:id uuid.UUID})" 0 65 (fontified nil)) . 4100) (4100 . 4165) (#("DeleteFeedFollowById" 0 20 (fontified nil)) . -4100) (4100 . 4120)) nil (25905 22131 959132 256000) 0 nil])
([nil nil ((4122 . 4126) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 4122) (4121 . 4122)) nil (25905 22131 959131 270000) 0 nil])
([nil nil ((apply yas--snippet-revive 4123 4126 #s(yas--snippet nil nil nil 44 nil nil #s(yas--field 1 4121 4126 nil nil nil t #s(yas--field 2 4128 4130 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil #s(yas--field 1 4121 4126 nil nil nil t #s(yas--field 2 4128 4130 nil nil nil t nil)) nil)) (4123 . 4126) (#("ctx" 0 3 (fontified nil)) . 4123) (4123 . 4126) (#("ctx" 0 3 (fontified nil)) . 4123) (4123 . 4126) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4123) (undo-tree-id749 . -3) (undo-tree-id750 . -3) 4126) nil (25905 22131 959129 960000) 0 nil])
([nil nil ((4129 . 4130) (#("id uuid.UUID" 0 2 (fontified nil face tree-sitter-hl-face:variable) 2 3 (fontified nil) 3 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 12 (fontified nil face tree-sitter-hl-face:property)) . 4129) (4128 . 4129)) nil (25905 22131 959127 331000) 0 nil])
([nil nil ((apply yas--snippet-revive 4100 4131 #s(yas--snippet nil (#s(yas--field 1 4121 4126 nil nil nil t #s(yas--field 2 4128 4130 nil nil nil t nil)) #s(yas--field 2 4128 4130 nil nil nil t nil)) nil 43 nil #s(yas--field 2 4128 4130 nil nil nil t nil) nil nil))) nil (25905 22131 959126 762000) 0 nil])
([nil nil ((4131 . 4132)) nil (25905 22131 959126 313000) 0 nil])
([nil nil ((4132 . 4134)) nil (25905 22131 959125 880000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4149) (4149 . 4150) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4149) (4149 . 4150) (4134 . 4150)) nil (25905 22131 959125 79000) 0 nil])
([nil nil ((4150 . 4152) (4151 . 4152) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4150) (4150 . 4152) (4149 . 4151)) nil (25905 22131 959123 981000) 0 nil])
([nil nil ((4152 . 4158)) nil (25905 22131 959122 927000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4175 4176 nil nil nil t #s(yas--field 2 4178 4181 nil nil nil t #s(yas--field 3 4183 4196 nil nil nil t nil))) #s(yas--field 2 4178 4181 nil nil nil t #s(yas--field 3 4183 4196 nil nil nil t nil)) #s(yas--field 3 4183 4196 nil nil nil t nil)) nil 45 nil #s(yas--field 3 4183 4196 nil nil nil t nil) nil nil)) (4158 . 4219) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4158) (4158 . 4234) (#("RespondWithError" 0 16 (fontified nil)) . -4158) (4158 . 4174)) nil (25905 22131 959122 39000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4176) (undo-tree-id748 . -21) (4175 . 4176)) nil (25905 22131 959120 880000) 0 nil])
([nil nil ((4179 . 4181) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4179) (undo-tree-id747 . -8) (4178 . 4179)) nil (25905 22131 959119 550000) 0 nil])
([nil nil ((4184 . 4188) (4183 . 4185) (#("\"" 0 1 (fontified nil)) . -4183) (undo-tree-id745 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4184) (undo-tree-id746 . -10) (4183 . 4184)) nil (25905 22131 959117 469000) 0 nil])
([nil nil ((4188 . 4195)) nil (25905 22131 959107 813000) 0 nil])
([nil nil ((apply yas--snippet-revive 4158 4197 #s(yas--snippet nil (#s(yas--field 1 4175 4176 nil nil nil t #s(yas--field 2 4178 4181 nil nil nil t #s(yas--field 3 4183 4196 nil nil nil t nil))) #s(yas--field 2 4178 4181 nil nil nil t #s(yas--field 3 4183 4196 nil nil nil t nil)) #s(yas--field 3 4183 4196 nil nil nil t nil)) nil 45 nil #s(yas--field 3 4183 4196 nil nil nil t nil) nil nil))) nil (25905 22131 959104 66000) 0 nil])
([nil nil ((4197 . 4198) (t 25905 22131 989530 897000)) nil (25905 22133 643459 366000) 0 nil])
([nil nil ((4201 . 4202) (t 25905 22133 672533 504000)) nil (25905 22136 317676 79000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4201) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) 4202) nil (25905 22136 317674 616000) 0 nil])
([nil nil ((4201 . 4203)) nil (25905 22136 317658 285000) 0 nil])
([nil nil ((#(";
	timeStamp := time.Now()
	dbObj.CreatedAt = timeStamp;
	dbObj.UpdatedAt = timeStamp;
	dbObj.FeedID = feed.ID;
	dbObj.UserID = user.ID;
	feedFollow, err := a.DB.CreateFeedFollow(a.ctx, dbObj);
	if err != nil {
		utils.RespondWithError(w, 500, \"internal Server Error\");
		return
	}
	utils.RespondWithJSON(w, 201, feedFollow);
}

func (a *apiConfig) DeleteFeedFollow(w http.ResponseWriter, r *http.Request, database.User) {
	id := chi.URLParam(r, \"id\")
	err := a.DB.DeleteFeedFollowById(a.ctx, id);
	if err != nil {
		utils.RespondWithError(w, 400, \"Bad Request\");
	}" 0 2 (fontified t) 2 3 (fontified t rear-nonsticky t) 3 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 15 (fontified t face tree-sitter-hl-face:operator) 15 16 (fontified t) 16 17 (fontified t face tree-sitter-hl-face:variable) 17 20 (fontified t face tree-sitter-hl-face:variable) 20 21 (fontified t) 21 24 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 28 (fontified t) 28 33 (fontified t face tree-sitter-hl-face:variable) 33 34 (fontified t) 34 43 (fontified t face tree-sitter-hl-face:property) 43 44 (fontified t) 44 45 (fontified t face tree-sitter-hl-face:operator) 45 46 (fontified t) 46 55 (fontified t face tree-sitter-hl-face:variable) 55 57 (fontified t) 57 58 (fontified t) 58 63 (fontified t face tree-sitter-hl-face:variable) 63 64 (fontified t) 64 73 (fontified t face tree-sitter-hl-face:property) 73 74 (fontified t) 74 75 (fontified t face tree-sitter-hl-face:operator) 75 76 (fontified t) 76 85 (fontified t face tree-sitter-hl-face:variable) 85 87 (fontified t) 87 88 (fontified t) 88 93 (fontified t face tree-sitter-hl-face:variable) 93 94 (fontified t) 94 100 (fontified t face tree-sitter-hl-face:property) 100 101 (fontified t) 101 102 (fontified t face tree-sitter-hl-face:operator) 102 103 (fontified t) 103 107 (fontified t face tree-sitter-hl-face:variable) 107 108 (fontified t) 108 110 (fontified t face tree-sitter-hl-face:property) 110 112 (fontified t) 112 113 (fontified t) 113 118 (fontified t face tree-sitter-hl-face:variable) 118 119 (fontified t) 119 125 (fontified t face tree-sitter-hl-face:property) 125 126 (fontified t) 126 127 (fontified t face tree-sitter-hl-face:operator) 127 128 (fontified t) 128 132 (fontified t face tree-sitter-hl-face:variable) 132 133 (fontified t) 133 135 (fontified t face tree-sitter-hl-face:property) 135 136 (fontified t) 136 137 (fontified t) 137 138 (fontified t) 138 148 (fontified t face tree-sitter-hl-face:variable) 148 150 (fontified t) 150 153 (fontified t face tree-sitter-hl-face:variable) 153 154 (fontified t) 154 156 (fontified t face tree-sitter-hl-face:operator) 156 157 (fontified t) 157 158 (fontified t face tree-sitter-hl-face:variable) 158 159 (fontified t) 159 161 (fontified t face tree-sitter-hl-face:property) 161 162 (fontified t) 162 178 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 178 179 (fontified t face (rainbow-delimiters-depth-2-face)) 179 180 (fontified t face tree-sitter-hl-face:variable) 180 181 (fontified t) 181 184 (fontified t face tree-sitter-hl-face:property) 184 186 (fontified t) 186 191 (fontified t face tree-sitter-hl-face:variable) 191 192 (fontified t face (rainbow-delimiters-depth-2-face)) 192 194 (fontified t) 194 195 (fontified t) 195 197 (fontified t face tree-sitter-hl-face:keyword) 197 198 (fontified t) 198 201 (fontified t face tree-sitter-hl-face:variable) 201 202 (fontified t) 202 204 (fontified t face tree-sitter-hl-face:operator) 204 205 (fontified t) 205 208 (fontified t face tree-sitter-hl-face:constant\.builtin) 208 209 (fontified t) 209 210 (fontified t face (rainbow-delimiters-depth-2-face)) 210 211 (fontified t) 211 213 (fontified t) 213 218 (fontified t face tree-sitter-hl-face:variable) 218 219 (fontified t) 219 235 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 235 236 (fontified t face (rainbow-delimiters-depth-3-face)) 236 237 (fontified t face tree-sitter-hl-face:variable) 237 239 (fontified t) 239 242 (fontified t face tree-sitter-hl-face:number) 242 244 (fontified t) 244 267 (fontified t face tree-sitter-hl-face:string) 267 268 (fontified t face (rainbow-delimiters-depth-3-face)) 268 269 (fontified t) 269 270 (fontified t) 270 272 (fontified t) 272 278 (fontified t face tree-sitter-hl-face:keyword) 278 279 (fontified t) 279 280 (fontified t) 280 281 (fontified t face (rainbow-delimiters-depth-2-face)) 281 282 (fontified t) 282 283 (fontified t) 283 288 (fontified t face tree-sitter-hl-face:variable) 288 289 (fontified t) 289 304 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 304 305 (fontified t face (rainbow-delimiters-depth-2-face)) 305 306 (fontified t face tree-sitter-hl-face:variable) 306 308 (fontified t) 308 311 (fontified t face tree-sitter-hl-face:number) 311 313 (fontified t) 313 323 (fontified t face tree-sitter-hl-face:variable) 323 324 (fontified t face (rainbow-delimiters-depth-2-face)) 324 325 (fontified t) 325 326 (fontified t) 326 327 (fontified t face (rainbow-delimiters-depth-1-face)) 327 328 (fontified t) 328 329 (fontified t) 329 333 (fontified t face tree-sitter-hl-face:keyword) 333 334 (fontified t) 334 335 (fontified t face (rainbow-delimiters-depth-1-face)) 335 336 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 336 337 (fontified t) 337 338 (fontified t face tree-sitter-hl-face:operator) 338 347 (fontified t face tree-sitter-hl-face:type) 347 348 (fontified t face (rainbow-delimiters-depth-1-face)) 348 349 (fontified t) 349 365 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property)) 365 366 (fontified t face (rainbow-delimiters-depth-1-face)) 366 367 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 367 368 (fontified t) 368 372 (fontified t) 372 373 (fontified t) 373 387 (fontified t face tree-sitter-hl-face:type) 387 389 (fontified t) 389 390 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 390 391 (fontified t) 391 392 (fontified t face tree-sitter-hl-face:operator) 392 396 (fontified t) 396 397 (fontified t) 397 404 (fontified t face tree-sitter-hl-face:type) 404 406 (fontified t) 406 414 (fontified t) 414 415 (fontified t) 415 419 (fontified t face tree-sitter-hl-face:type) 419 420 (fontified t face (rainbow-delimiters-depth-1-face)) 420 421 (fontified t) 421 422 (fontified t face (rainbow-delimiters-depth-1-face)) 422 423 (fontified t) 423 424 (fontified t) 424 426 (fontified t face tree-sitter-hl-face:variable) 426 427 (fontified t) 427 429 (fontified t face tree-sitter-hl-face:operator) 429 430 (fontified t) 430 433 (fontified t face tree-sitter-hl-face:variable) 433 434 (fontified t) 434 442 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 442 443 (fontified t face (rainbow-delimiters-depth-2-face)) 443 444 (fontified t face tree-sitter-hl-face:variable) 444 446 (fontified t) 446 450 (fontified t face tree-sitter-hl-face:string) 450 451 (fontified t face (rainbow-delimiters-depth-2-face)) 451 452 (fontified t) 452 453 (fontified t) 453 456 (fontified t face tree-sitter-hl-face:variable) 456 457 (fontified t) 457 459 (fontified t face tree-sitter-hl-face:operator) 459 460 (fontified t) 460 461 (fontified t face tree-sitter-hl-face:variable) 461 462 (fontified t) 462 464 (fontified t face tree-sitter-hl-face:property) 464 465 (fontified t) 465 485 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 485 486 (fontified t face (rainbow-delimiters-depth-2-face)) 486 487 (fontified t face tree-sitter-hl-face:variable) 487 488 (fontified t) 488 491 (fontified t face tree-sitter-hl-face:property) 491 493 (fontified t) 493 495 (fontified t face tree-sitter-hl-face:variable) 495 496 (fontified t face (rainbow-delimiters-depth-2-face)) 496 498 (fontified t) 498 499 (fontified t) 499 501 (fontified t face tree-sitter-hl-face:keyword) 501 502 (fontified t) 502 505 (fontified t face tree-sitter-hl-face:variable) 505 506 (fontified t) 506 508 (fontified t face tree-sitter-hl-face:operator) 508 509 (fontified t) 509 512 (fontified t face tree-sitter-hl-face:constant\.builtin) 512 513 (fontified t) 513 514 (fontified t face (rainbow-delimiters-depth-2-face)) 514 515 (fontified t) 515 517 (fontified t) 517 522 (fontified t face tree-sitter-hl-face:variable) 522 523 (fontified t) 523 539 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 539 540 (fontified t face (rainbow-delimiters-depth-3-face)) 540 541 (fontified t face tree-sitter-hl-face:variable) 541 543 (fontified t) 543 546 (fontified t face tree-sitter-hl-face:number) 546 548 (fontified t) 548 561 (fontified t face tree-sitter-hl-face:string) 561 562 (fontified t face (rainbow-delimiters-depth-3-face)) 562 563 (fontified t) 563 564 (fontified t) 564 565 (fontified t) 565 566 (fontified t face (rainbow-delimiters-depth-2-face))) . -3635) (undo-tree-id830 . -186) (undo-tree-id831 . 375) (undo-tree-id832 . -186) (undo-tree-id833 . -186) (undo-tree-id834 . -326) (undo-tree-id835 . -326) (undo-tree-id836 . -326) (undo-tree-id837 . -334) (undo-tree-id838 . -178) (undo-tree-id839 . -269) (undo-tree-id840 . -566) (undo-tree-id841 . -111) (undo-tree-id842 . -451) (undo-tree-id843 . -111) (undo-tree-id844 . -168) (undo-tree-id845 . -566) (undo-tree-id846 . 1) (undo-tree-id847 . -566) (undo-tree-id848 . 53) (undo-tree-id849 . -514) 4201 (t 25905 22136 348537 669000)) nil (25905 22263 632450 829000) 0 nil])
([nil nil ((3635 . 4201)) nil (25905 22263 632437 479000) 0 nil])
([nil nil ((4198 . 4201) (t 25905 22136 348537 669000)) nil (25905 22263 632437 93000) 0 nil])
([nil nil ((4201 . 4204)) nil (25905 22263 632436 544000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4201) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4202) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4203) (undo-tree-id828 . -1) (undo-tree-id829 . -1) 4204) nil (25905 22263 632435 405000) 0 nil])
([nil nil ((4201 . 4207)) nil (25905 22263 632431 123000) 0 nil])
([nil nil ((4210 . 4212)) nil (25905 22263 632430 691000) 0 nil])
([nil nil ((4212 . 4218)) nil (25905 22263 632430 281000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4234 4237 nil nil nil t #s(yas--field 2 4239 4247 nil nil nil nil #s(yas--field 3 4249 4268 nil nil nil nil nil))) #s(yas--field 2 4239 4247 nil nil nil nil #s(yas--field 3 4249 4268 nil nil nil nil nil)) #s(yas--field 3 4249 4268 nil nil nil nil nil)) nil 46 nil #s(yas--field 2 4239 4247 nil nil nil nil #s(yas--field 3 4249 4268 nil nil nil nil nil)) nil nil)) (4218 . 4287) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4218) (4218 . 4303) (#("RespondWithJSON" 0 15 (fontified nil)) . -4218) (4218 . 4233)) nil (25905 22263 632429 92000) 0 nil])
([nil nil ((4235 . 4237) (#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4235) (4234 . 4235)) nil (25905 22263 632428 96000) 0 nil])
([nil nil ((apply yas--snippet-revive 4218 4269 #s(yas--snippet nil (#s(yas--field 1 4234 4237 nil nil nil t #s(yas--field 2 4239 4247 nil nil nil nil #s(yas--field 3 4249 4268 nil nil nil nil nil))) #s(yas--field 2 4239 4247 nil nil nil nil #s(yas--field 3 4249 4268 nil nil nil nil nil)) #s(yas--field 3 4249 4268 nil nil nil nil nil)) nil 46 nil #s(yas--field 2 4239 4247 nil nil nil nil #s(yas--field 3 4249 4268 nil nil nil nil nil)) nil nil))) nil (25905 22263 632427 416000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4234) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4235) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4236) (undo-tree-id822 . -1) (undo-tree-id823 . -1) 4237) nil (25905 22263 632426 458000) 0 nil])
([nil nil ((4234 . 4235)) nil (25905 22263 632421 406000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4237) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4238) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4239) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4240) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#(" " 0 1 (fontified t)) . -4241) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4242) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4243) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4244) (undo-tree-id816 . -1) (undo-tree-id817 . -1) 4245) nil (25905 22263 632419 402000) 0 nil])
([nil nil ((4237 . 4240)) nil (25905 22263 632409 87000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4242) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4243) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4244) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4245) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4246) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4247) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4248) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (#(" " 0 1 (fontified t)) . -4249) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4250) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4251) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4252) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4253) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4254) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4255) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4256) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4257) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4258) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4259) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4260) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . 1) (undo-tree-id801 . -1) 4261) nil (25905 22263 632404 949000) 0 nil])
([nil nil ((4242 . 4245)) nil (25905 22263 632375 488000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4244) (undo-tree-id760 . -1) (undo-tree-id761 . -1) 4245) nil (25905 22263 632374 635000) 0 nil])
([nil nil ((4244 . 4246)) nil (25905 22263 632365 596000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4252) (4252 . 4253) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4252) (4252 . 4253) (4246 . 4253)) nil (25905 22263 632361 616000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4242) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4243) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4244) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4245) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4246) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4247) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4248) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4249) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4250) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4251) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4252) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . 1) (undo-tree-id873 . -1) 4253 (t 25905 22263 663758 497000)) nil (25905 22282 522022 5000) 0 nil])
([nil nil ((4243 . 4245) (4242 . 4244) (#("\"" 0 1 (fontified nil)) . -4242) (4242 . 4243)) nil (25905 22282 521841 947000) 0 nil])
([nil nil ((5345 . 5347) (t 25905 22282 552794 715000)) nil (25905 22682 357921 587000) 0 nil])
([nil nil ((5347 . 5348)) nil (25905 22682 357919 989000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -5347) (undo-tree-id959 . -1) 5348) nil (25905 22682 357918 67000) 0 nil])
([nil nil ((5347 . 5350)) nil (25905 22682 357914 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 5347 5355 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (5347 . 5355) (#("v1Router" 0 8 (fontified nil)) . 5347) (5347 . 5355) (#("v1R" 0 3 (fontified nil)) . 5347) (5347 . 5350) (#("v1Router" 0 8 (fontified nil)) . -5347) (5347 . 5355) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5347) (undo-tree-id957 . -3) (undo-tree-id958 . -3) 5350) nil (25905 22682 357911 813000) 0 nil])
([nil nil ((5355 . 5356)) nil (25905 22682 357901 776000) 0 nil])
([nil nil ((5356 . 5357)) nil (25905 22682 357900 425000) 0 nil])
([nil nil ((5357 . 5358)) nil (25905 22682 357899 315000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5357) (undo-tree-id956 . -1) 5358) nil (25905 22682 357897 751000) 0 nil])
([nil nil ((5357 . 5359)) nil (25905 22682 357894 786000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5360 5374 nil nil nil t #s(yas--field 2 5376 5402 nil nil nil nil nil)) #s(yas--field 2 5376 5402 nil nil nil nil nil)) nil 48 nil #s(yas--field 1 5360 5374 nil nil nil t #s(yas--field 2 5376 5402 nil nil nil nil nil)) nil nil)) (5356 . 5403) (#("Get(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 57 (fontified nil)) . 5356) (5356 . 5413) (#("GET" 0 3 (fontified nil)) . 5356) (5356 . 5359) (#("Get" 0 3 (fontified nil)) . -5356) (5356 . 5359) (#("GET" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5356) (undo-tree-id954 . -3) (undo-tree-id955 . -3) 5359) nil (25905 22682 357892 241000) 0 nil])
([nil nil ((5361 . 5373) (5360 . 5362) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5360) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 5361) (5360 . 5361)) nil (25905 22682 357885 244000) 0 nil])
([nil nil ((apply yas--snippet-revive 5356 5403 #s(yas--snippet nil (#s(yas--field 1 5360 5374 nil nil nil t #s(yas--field 2 5376 5402 nil nil nil nil nil)) #s(yas--field 2 5376 5402 nil nil nil nil nil)) nil 48 nil #s(yas--field 1 5360 5374 nil nil nil t #s(yas--field 2 5376 5402 nil nil nil nil nil)) nil nil))) nil (25905 22682 357882 971000) 0 nil])
([nil nil ((5279 . 5280)) nil (25905 22682 357881 861000) 0 nil])
([nil nil ((5362 . 5363)) nil (25905 22682 357880 750000) 0 nil])
([nil nil ((5375 . 5376)) nil (25905 22682 357879 629000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5375) (undo-tree-id953 . -1) 5376) nil (25905 22682 357878 256000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5403) (undo-tree-id952 . -1) 5404) nil (25905 22682 357874 977000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5382) (undo-tree-id931 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5383) (undo-tree-id932 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5384) (undo-tree-id933 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5385) (undo-tree-id934 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5386) (undo-tree-id935 . -1) (#(" " 0 1 (fontified t)) . -5387) (undo-tree-id936 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5388) (undo-tree-id937 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5389) (undo-tree-id938 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5390) (undo-tree-id939 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5391) (undo-tree-id940 . -1) (#("." 0 1 (fontified t)) . -5392) (undo-tree-id941 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5393) (undo-tree-id942 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5394) (undo-tree-id943 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5395) (undo-tree-id944 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5396) (undo-tree-id945 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5397) (undo-tree-id946 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5398) (undo-tree-id947 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5399) (undo-tree-id948 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5400) (undo-tree-id949 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5401) (undo-tree-id950 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5402) (undo-tree-id951 . -1) 5403) nil (25905 22682 357866 975000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5378) (undo-tree-id927 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5379) (undo-tree-id928 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5380) (undo-tree-id929 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5381) (undo-tree-id930 . -1) 5382) nil (25905 22682 357825 462000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4247) (undo-tree-id922 . 1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (#("	" 0 1 (fontified t)) . -4248) (undo-tree-id925 . -1) (undo-tree-id926 . -1) 4249) nil (25905 22682 357816 395000) 0 nil])
([nil nil ((4249 . 4251)) nil (25905 22682 357806 268000) 0 nil])
([nil nil ((4256 . 4258) (#(")" 0 1 (fontified nil)) . -4256) (4251 . 4257)) nil (25905 22682 357804 853000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -4256) (undo-tree-id920 . -1) (#("Ö" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4257) (undo-tree-id921 . -1) 4258) nil (25905 22682 357802 649000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4257) (4257 . 4258) (#(")" 0 1 (fontified nil)) . -4257) (4257 . 4258) (4256 . 4258)) nil (25905 22682 357797 501000) 0 nil])
([nil nil ((4257 . 4262)) nil (25905 22682 357794 767000) 0 nil])
([nil nil ((apply yas--snippet-revive 4259 4268 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (4259 . 4268) (#("apiConfig" 0 9 (fontified nil)) . 4259) (4259 . 4268) (#("api" 0 3 (fontified nil)) . 4259) (4259 . 4262) (#("apiConfig" 0 9 (fontified nil)) . -4259) (4259 . 4268) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4259) (undo-tree-id918 . -3) (undo-tree-id919 . -3) 4262) nil (25905 22682 357792 132000) 0 nil])
([nil nil ((4259 . 4260)) nil (25905 22682 357785 326000) 0 nil])
([nil nil ((4270 . 4271)) nil (25905 22682 357784 141000) 0 nil])
([nil nil ((4271 . 4272)) nil (25905 22682 357782 857000) 0 nil])
([nil nil ((4272 . 4288)) nil (25905 22682 357781 598000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -4289) (4289 . 4290) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4289) (4289 . 4290) (4288 . 4290)) nil (25905 22682 357779 670000) 0 nil])
([nil nil ((4040 . 4045)) nil (25905 22682 357777 5000) 0 nil])
([nil nil ((4091 . 4093)) nil (25905 22682 357775 701000) 0 nil])
([nil nil ((4093 . 4096)) nil (25905 22682 357774 481000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4093) (undo-tree-id915 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4094) (undo-tree-id916 . -1) (#(" " 0 1 (fontified t)) . -4095) (undo-tree-id917 . -1) 4096) nil (25905 22682 357772 394000) 0 nil])
([nil nil ((4093 . 4097)) nil (25905 22682 357765 994000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4093) (undo-tree-id911 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4094) (undo-tree-id912 . -1) (#("," 0 1 (fontified t)) . -4095) (undo-tree-id913 . -1) (#(" " 0 1 (fontified t)) . -4096) (undo-tree-id914 . -1) 4097) nil (25905 22682 357763 580000) 0 nil])
([nil nil ((4093 . 4102)) nil (25905 22682 357753 624000) 0 nil])
([nil nil ((4102 . 4103)) nil (25905 22682 357752 31000) 0 nil])
([nil nil ((4103 . 4104)) nil (25905 22682 357750 652000) 0 nil])
([nil nil ((4104 . 4111)) nil (25905 22682 357749 228000) 0 nil])
([nil nil ((4111 . 4112)) nil (25905 22682 357747 791000) 0 nil])
([nil nil ((4112 . 4116)) nil (25905 22682 357746 691000) 0 nil])
([nil nil ((4116 . 4118)) nil (25905 22682 357745 589000) 0 nil])
([nil nil ((4117 . 4118)) nil (25905 22682 357744 486000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4117) (undo-tree-id910 . -1) 4118) nil (25905 22682 357742 810000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4116) (undo-tree-id909 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 4117)) nil (25905 22682 357739 712000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4111) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4112) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4113) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4114) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4115) (undo-tree-id907 . -1) (undo-tree-id908 . -1) 4116) nil (25905 22682 357735 199000) 0 nil])
([nil nil ((4111 . 4115)) nil (25905 22682 357718 468000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4117 4119 nil nil nil t nil)) nil 50 nil #s(yas--field 1 4117 4119 nil nil nil t nil) nil nil)) (4111 . 4126) (#("Parse(${1:s string})" 0 20 (fontified nil)) . 4111) (4111 . 4131) (#("Pars" 0 4 (fontified nil)) . 4111) (4111 . 4115) (#("Parse" 0 5 (fontified nil)) . -4111) (4111 . 4116) (#("Pars" 0 4 (fontified t face tree-sitter-hl-face:property)) . -4111) (undo-tree-id897 . -4) (undo-tree-id898 . -4) 4115) nil (25905 22682 357716 106000) 0 nil])
([nil nil ((4117 . 4119) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4117) (#("s string" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 8 (fontified nil face tree-sitter-hl-face:variable)) . 4118) (4117 . 4118)) nil (25905 22682 357709 86000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -4117) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 4118)) nil (25905 22682 357706 710000) 0 nil])
([nil nil ((4117 . 4119)) nil (25905 22682 357702 288000) 0 nil])
([nil nil ((apply yas--snippet-revive 4111 4120 #s(yas--snippet nil (#s(yas--field 1 4117 4119 nil nil nil t nil)) nil 50 nil #s(yas--field 1 4117 4119 nil nil nil t nil) nil nil))) nil (25905 22682 357701 193000) 0 nil])
([nil nil ((4120 . 4121)) nil (25905 22682 357700 88000) 0 nil])
([nil nil ((4121 . 4123)) nil (25905 22682 357698 970000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4138) (4138 . 4139) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4138) (4138 . 4139) (4123 . 4139)) nil (25905 22682 357697 129000) 0 nil])
([nil nil ((4139 . 4141) (4140 . 4141) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4139) (4139 . 4141) (4138 . 4140)) nil (25905 22682 357694 426000) 0 nil])
([nil nil ((4141 . 4146)) nil (25905 22682 357692 131000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4164 4165 nil nil nil t #s(yas--field 2 4167 4170 nil nil nil t #s(yas--field 3 4172 4186 nil nil nil t nil))) #s(yas--field 2 4167 4170 nil nil nil t #s(yas--field 3 4172 4186 nil nil nil t nil)) #s(yas--field 3 4172 4186 nil nil nil t nil)) nil 51 nil #s(yas--field 3 4172 4186 nil nil nil t nil) nil nil)) (4141 . 4208) (#("utils.RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 82 (fontified nil)) . 4141) (4141 . 4223) (#("utils" 0 5 (fontified nil)) . 4141) (4141 . 4146) (#("utils.RespondWithError" 0 22 (fontified nil)) . -4141) (4141 . 4163) (#("utils" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -4141) (undo-tree-id893 . -5) (undo-tree-id894 . -5) 4146) nil (25905 22682 357689 528000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4165) (4164 . 4165)) nil (25905 22682 357682 15000) 0 nil])
([nil nil ((4168 . 4170) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4168) (4167 . 4168)) nil (25905 22682 357679 648000) 0 nil])
([nil nil ((4173 . 4186) (4172 . 4174) (#("\"" 0 1 (fontified nil)) . -4172) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4173) (4172 . 4173)) nil (25905 22682 357676 943000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -4185) (undo-tree-id892 . -1) 4186) nil (25905 22682 357673 504000) 0 nil])
([nil nil ((apply yas--snippet-revive 4141 4187 #s(yas--snippet nil (#s(yas--field 1 4164 4165 nil nil nil t #s(yas--field 2 4167 4170 nil nil nil t #s(yas--field 3 4172 4186 nil nil nil t nil))) #s(yas--field 2 4167 4170 nil nil nil t #s(yas--field 3 4172 4186 nil nil nil t nil)) #s(yas--field 3 4172 4186 nil nil nil t nil)) nil 51 nil #s(yas--field 3 4172 4186 nil nil nil t nil) nil nil))) nil (25905 22682 357669 740000) 0 nil])
([nil nil ((4187 . 4188)) nil (25905 22682 357668 407000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4233) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4234) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) 4235) nil (25905 22682 357664 881000) 0 nil])
([nil nil ((4233 . 4237)) nil (25905 22682 357628 153000) 0 nil])
([nil nil ((4188 . 4191) (t 25905 22682 391710 21000)) nil (25905 22689 888109 908000) 0 nil])
([nil nil ((4191 . 4198)) nil (25905 22689 888106 541000) 0 nil])
([nil nil ((4203 . 4204) (t 25905 22689 919729 317000)) nil (25905 22700 877390 878000) 0 nil])
([nil nil ((4255 . 4256)) nil (25905 22700 877390 179000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4255) (undo-tree-id960 . -1) (undo-tree-id961 . -1) 4256) nil (25905 22700 877388 626000) 0 nil])
([nil nil ((4255 . 4256)) nil (25905 22700 877377 136000) 0 nil])
([nil nil ((4408 . 4411) (t 25905 22700 909757 598000)) nil (25905 23014 801601 501000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4410) (undo-tree-id1111 . -1) 4411) nil (25905 23014 801599 965000) 0 nil])
([nil nil ((4410 . 4418)) nil (25905 23014 801597 636000) 0 nil])
([nil nil ((apply yas--snippet-revive 4415 4429 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (4415 . 4429) (#("ResponseWriter" 0 14 (fontified nil)) . 4415) (4415 . 4429) (#("Res" 0 3 (fontified nil)) . 4415) (4415 . 4418) (#("ResponseWriter" 0 14 (fontified nil)) . -4415) (4415 . 4429) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4415) (undo-tree-id1109 . -3) (undo-tree-id1110 . -3) 4418) nil (25905 23014 801596 389000) 0 nil])
([nil nil ((4429 . 4435)) nil (25905 23014 801593 922000) 0 nil])
([nil nil ((4435 . 4441)) nil (25905 23014 801593 228000) 0 nil])
([nil nil ((4441 . 4442)) nil (25905 23014 801592 808000) 0 nil])
([nil nil ((apply yas--snippet-revive 4439 4446 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (4439 . 4446) (#("Request" 0 7 (fontified nil)) . 4439) (4439 . 4446) (#("Req" 0 3 (fontified nil)) . 4439) (4439 . 4442) (#("Request" 0 7 (fontified nil)) . -4439) (4439 . 4446) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -4439) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) 4442) nil (25905 23014 801591 844000) 0 nil])
([nil nil ((4446 . 4453)) nil (25905 23014 801589 522000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4452) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) 4453) nil (25905 23014 801588 634000) 0 nil])
([nil nil ((4452 . 4457)) nil (25905 23014 801586 719000) 0 nil])
([nil nil ((apply yas--snippet-revive 4453 4484 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (4453 . 4484) (#("database.CreateFeedFollowParams" 0 31 (fontified nil)) . 4453) (4453 . 4484) (#("data" 0 4 (fontified nil)) . 4453) (4453 . 4457) (#("database.CreateFeedFollowParams" 0 31 (fontified nil)) . -4453) (4453 . 4484) (#("data" 0 4 (fontified t face tree-sitter-hl-face:type)) . -4453) (undo-tree-id1103 . -4) (undo-tree-id1104 . -4) 4457) nil (25905 23014 801585 289000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4463) (undo-tree-id1082 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4464) (undo-tree-id1083 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4465) (undo-tree-id1084 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -4466) (undo-tree-id1085 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4467) (undo-tree-id1086 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4468) (undo-tree-id1087 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4469) (undo-tree-id1088 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4470) (undo-tree-id1089 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4471) (undo-tree-id1090 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4472) (undo-tree-id1091 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4473) (undo-tree-id1092 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4474) (undo-tree-id1093 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4475) (undo-tree-id1094 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4476) (undo-tree-id1095 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4477) (undo-tree-id1096 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4478) (undo-tree-id1097 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4479) (undo-tree-id1098 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4480) (undo-tree-id1099 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4481) (undo-tree-id1100 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4482) (undo-tree-id1101 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4483) (undo-tree-id1102 . -1) 4484) nil (25905 23014 801579 833000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -4462) (undo-tree-id1081 . -1) 4463) nil (25905 23014 801562 220000) 0 nil])
([nil nil ((4462 . 4464)) nil (25905 23014 801560 862000) 0 nil])
([nil nil ((4464 . 4466)) nil (25905 23014 801560 119000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4469) (4469 . 4470) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -4469) (4469 . 4470) (4467 . 4470)) nil (25905 23014 801559 181000) 0 nil])
([nil nil ((4470 . 4471) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 4470) (4470 . 4471) (4469 . 4471)) nil (25905 23014 801557 934000) 0 nil])
([nil nil ((4471 . 4484)) nil (25905 23014 801557 123000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4478) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4479) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4480) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4481) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4482) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (#("." 0 1 (fontified t)) . -4483) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) 4484) nil (25905 23014 801554 993000) 0 nil])
([nil nil ((4478 . 4479)) nil (25905 23014 801546 399000) 0 nil])
([nil nil ((4479 . 4483)) nil (25905 23014 801545 961000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4509 4514 nil nil nil t #s(yas--field 2 4516 4523 nil nil nil t nil)) #s(yas--field 2 4516 4523 nil nil nil t nil)) nil 55 nil #s(yas--field 2 4516 4523 nil nil nil t nil) nil nil)) (4483 . 4547) (#("GetAllFeedFollowsByUserID(${1:ctx context.Context}, ${2:userID uuid.UUID})" 0 74 (fontified nil)) . 4483) (4483 . 4557) (#("GetAllFeedFollowsByUserID" 0 25 (fontified nil)) . -4483) (4483 . 4508)) nil (25905 23014 801545 84000) 0 nil])
([nil nil ((4510 . 4514) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 4510) (4509 . 4510)) nil (25905 23014 801543 857000) 0 nil])
([nil nil ((apply yas--snippet-revive 4511 4514 #s(yas--snippet nil nil nil 56 nil nil #s(yas--field 1 4509 4514 nil nil nil t #s(yas--field 2 4516 4523 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil #s(yas--field 1 4509 4514 nil nil nil t #s(yas--field 2 4516 4523 nil nil nil t nil)) nil)) (4511 . 4514) (#("ctx" 0 3 (fontified nil)) . 4511) (4511 . 4514) (#("ctx" 0 3 (fontified nil)) . 4511) (4511 . 4514) (#("ctx" 0 3 (fontified t face tree-sitter-hl-face:property)) . -4511) (undo-tree-id1067 . -3) (undo-tree-id1068 . -3) 4514) nil (25905 23014 801542 406000) 0 nil])
([nil nil ((4517 . 4520) (#("userID uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 4517) (4516 . 4517)) nil (25905 23014 801538 812000) 0 nil])
([nil nil ((4520 . 4521)) nil (25905 23014 801538 193000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -4520) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) 4521) nil (25905 23014 801537 580000) 0 nil])
([nil nil ((4520 . 4521)) nil (25905 23014 801535 902000) 0 nil])
([nil nil ((apply yas--snippet-revive 4521 4523 #s(yas--snippet nil nil nil 57 nil nil #s(yas--field 2 4516 4523 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 57 nil nil #s(yas--field 2 4516 4523 nil nil nil t nil) nil)) (4521 . 4523) (#("ID" 0 2 (fontified nil)) . 4521) (4521 . 4523) (#("ID" 0 2 (fontified nil)) . -4521) (4521 . 4523)) nil (25905 23014 801535 64000) 0 nil])
([nil nil ((apply yas--snippet-revive 4483 4524 #s(yas--snippet nil (#s(yas--field 1 4509 4514 nil nil nil t #s(yas--field 2 4516 4523 nil nil nil t nil)) #s(yas--field 2 4516 4523 nil nil nil t nil)) nil 55 nil #s(yas--field 2 4516 4523 nil nil nil t nil) nil nil))) nil (25905 23014 801534 249000) 0 nil])
([nil nil ((4524 . 4525)) nil (25905 23014 801533 886000) 0 nil])
([nil nil ((4471 . 4476)) nil (25905 23014 801533 540000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4475) (undo-tree-id1064 . -1) 4476) nil (25905 23014 801533 16000) 0 nil])
([nil nil ((4475 . 4485)) nil (25905 23014 801532 20000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4484) (undo-tree-id1063 . -1) 4485) nil (25905 23014 801531 491000) 0 nil])
([nil nil ((4538 . 4540)) nil (25905 23014 801530 501000) 0 nil])
([nil nil ((4540 . 4546)) nil (25905 23014 801530 158000) 0 nil])
([nil nil ((4546 . 4547)) nil (25905 23014 801529 784000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4555) (4555 . 4556) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -4555) (4555 . 4556) (4547 . 4556)) nil (25905 23014 801529 73000) 0 nil])
([nil nil ((4556 . 4558) (4557 . 4558) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 4556) (4556 . 4558) (4555 . 4557)) nil (25905 23014 801528 167000) 0 nil])
([nil nil ((4558 . 4564)) nil (25905 23014 801527 327000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4561) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4562) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4563) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) 4564) nil (25905 23014 801526 423000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4560) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) 4561) nil (25905 23014 801522 302000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4558) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4559) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) 4560) nil (25905 23014 801520 485000) 0 nil])
([nil nil ((4558 . 4564)) nil (25905 23014 801517 35000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4564 4613 nil nil nil t #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil))) #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil)) #s(yas--field 3 4625 4644 nil nil nil nil nil)) nil 58 nil #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil)) nil nil)) (4564 . 4633) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4564) (4564 . 4649) (#("RespondWithJSON" 0 15 (fontified nil)) . -4564) (4564 . 4579)) nil (25905 23014 801516 43000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified t face tree-sitter-hl-face:variable) 1 2 (fontified t) 2 6 (fontified t face tree-sitter-hl-face:variable) 6 7 (fontified t) 7 21 (fontified t face tree-sitter-hl-face:property)) . 4580)) nil (25905 23014 801514 744000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4575) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4576) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4577) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -4578) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4579) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) 4580) nil (25905 23014 801507 676000) 0 nil])
([nil nil ((4575 . 4576)) nil (25905 23014 801497 457000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4581 4582 nil nil nil t #s(yas--field 2 4584 4587 nil nil nil t #s(yas--field 3 4589 4591 nil nil nil t nil))) #s(yas--field 2 4584 4587 nil nil nil t #s(yas--field 3 4589 4591 nil nil nil t nil)) #s(yas--field 3 4589 4591 nil nil nil t nil)) nil 59 nil #s(yas--field 3 4589 4591 nil nil nil t nil) #s(yas--field 1 4564 4613 nil nil nil t #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil))) nil)) (4564 . 4625) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 4564) (4564 . 4640) (#("RespondWithE" 0 12 (fontified nil)) . 4564) (4564 . 4576) (#("RespondWithError" 0 16 (fontified nil)) . -4564) (4564 . 4580) (#("RespondWithE" 0 12 (fontified t face tree-sitter-hl-face:property)) . -4564) (undo-tree-id1033 . -12) (undo-tree-id1034 . -12) (undo-tree-id1035 . -11) 4576) nil (25905 23014 801496 146000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4582) (4581 . 4582)) nil (25905 23014 801493 145000) 0 nil])
([nil nil ((4585 . 4587) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4585) (4584 . 4585)) nil (25905 23014 801492 463000) 0 nil])
([nil nil ((4589 . 4591) (#("\"" 0 1 (fontified nil)) . -4589) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 4590) (4589 . 4590)) nil (25905 23014 801491 617000) 0 nil])
([nil nil ((apply yas--snippet-revive 4564 4592 #s(yas--snippet nil (#s(yas--field 1 4581 4582 nil nil nil t #s(yas--field 2 4584 4587 nil nil nil t #s(yas--field 3 4589 4591 nil nil nil t nil))) #s(yas--field 2 4584 4587 nil nil nil t #s(yas--field 3 4589 4591 nil nil nil t nil)) #s(yas--field 3 4589 4591 nil nil nil t nil)) nil 59 nil #s(yas--field 3 4589 4591 nil nil nil t nil) #s(yas--field 1 4564 4613 nil nil nil t #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil))) nil))) nil (25905 23014 801490 772000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face tree-sitter-hl-face:number)) . -4584) (undo-tree-id1032 . -1) 4585) nil (25905 23014 801490 174000) 0 nil])
([nil nil ((4584 . 4585)) nil (25905 23014 801489 20000) 0 nil])
([nil nil ((4590 . 4597)) nil (25905 23014 801488 615000) 0 nil])
([nil nil ((4597 . 4611)) nil (25905 23014 801488 210000) 0 nil])
([nil nil ((apply yas--snippet-revive 4564 4645 #s(yas--snippet nil (#s(yas--field 1 4564 4613 nil nil nil t #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil))) #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil)) #s(yas--field 3 4625 4644 nil nil nil nil nil)) nil 58 nil #s(yas--field 2 4615 4623 nil nil nil nil #s(yas--field 3 4625 4644 nil nil nil nil nil)) nil nil))) nil (25905 23014 801487 794000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4624) (undo-tree-id998 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4625) (undo-tree-id999 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4626) (undo-tree-id1000 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4627) (undo-tree-id1001 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4628) (undo-tree-id1002 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4629) (undo-tree-id1003 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4630) (undo-tree-id1004 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4631) (undo-tree-id1005 . -1) (#(" " 0 1 (fontified t)) . -4632) (undo-tree-id1006 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4633) (undo-tree-id1007 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -4634) (undo-tree-id1008 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -4635) (undo-tree-id1009 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -4636) (undo-tree-id1010 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -4637) (undo-tree-id1011 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4638) (undo-tree-id1012 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4639) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4640) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -4641) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -4642) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . 1) (undo-tree-id1025 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -4643) (undo-tree-id1026 . -1) (undo-tree-id1027 . 1) (undo-tree-id1028 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -4644) (undo-tree-id1029 . -1) (undo-tree-id1030 . 1) (undo-tree-id1031 . -1) 4645) nil (25905 23014 801484 112000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4613) (undo-tree-id987 . -1) (#(" " 0 1 (fontified t)) . -4614) (undo-tree-id988 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4615) (undo-tree-id989 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4616) (undo-tree-id990 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4617) (undo-tree-id991 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4618) (undo-tree-id992 . -1) (#(" " 0 1 (fontified t)) . -4619) (undo-tree-id993 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4620) (undo-tree-id994 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4621) (undo-tree-id995 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -4622) (undo-tree-id996 . -1) (#("," 0 1 (fontified t)) . -4623) (undo-tree-id997 . -1) 4624) nil (25905 23014 801459 380000) 0 nil])
([nil nil ((4613 . 4616)) nil (25905 23014 801451 675000) 0 nil])
([nil nil ((4616 . 4622)) nil (25905 23014 801451 311000) 0 nil])
([nil nil ((4622 . 4623)) nil (25905 23014 801450 892000) 0 nil])
([nil nil ((4626 . 4628)) nil (25905 23014 801450 395000) 0 nil])
([nil nil ((4628 . 4634)) nil (25905 23014 801450 16000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4650 4651 nil nil nil t #s(yas--field 2 4653 4656 nil nil nil t #s(yas--field 3 4658 4669 nil nil nil t nil))) #s(yas--field 2 4653 4656 nil nil nil t #s(yas--field 3 4658 4669 nil nil nil t nil)) #s(yas--field 3 4658 4669 nil nil nil t nil)) nil 60 nil #s(yas--field 3 4658 4669 nil nil nil t nil) nil nil)) (4634 . 4703) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 4634) (4634 . 4719) (#("RespondWithJSON" 0 15 (fontified nil)) . -4634) (4634 . 4649)) nil (25905 23014 801449 295000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 4651) (undo-tree-id984 . -21) (undo-tree-id985 . -2) (undo-tree-id986 . -3) (4650 . 4651)) nil (25905 23014 801448 281000) 0 nil])
([nil nil ((4654 . 4656) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 4654) (undo-tree-id981 . -8) (undo-tree-id982 . -5) (undo-tree-id983 . -6) (4653 . 4654)) nil (25905 23014 801445 533000) 0 nil])
([nil nil ((4659 . 4662) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 4659) (undo-tree-id978 . -19) (undo-tree-id979 . -8) (undo-tree-id980 . -9) (4658 . 4659)) nil (25905 23014 801442 770000) 0 nil])
([nil nil ((apply yas--snippet-revive 4658 4669 #s(yas--snippet nil nil nil 61 nil nil #s(yas--field 3 4658 4669 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 61 nil nil #s(yas--field 3 4658 4669 nil nil nil t nil) nil)) (4658 . 4669) (#("feedFollows" 0 11 (fontified nil)) . 4658) (undo-tree-id962 . -11) (4658 . 4669) (#("feed" 0 4 (fontified nil)) . 4658) (undo-tree-id963 . -4) (4658 . 4662) (#("feedFollows" 0 11 (fontified nil)) . -4658) (undo-tree-id964 . -11) (4658 . 4669) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -4658) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -1) (undo-tree-id969 . -2) (undo-tree-id970 . -3) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) 4662) nil (25905 23014 801438 660000) 0 nil])
([nil nil ((apply yas--snippet-revive 4634 4670 #s(yas--snippet nil (#s(yas--field 1 4650 4651 nil nil nil t #s(yas--field 2 4653 4656 nil nil nil t #s(yas--field 3 4658 4669 nil nil nil t nil))) #s(yas--field 2 4653 4656 nil nil nil t #s(yas--field 3 4658 4669 nil nil nil t nil)) #s(yas--field 3 4658 4669 nil nil nil t nil)) nil 60 nil #s(yas--field 3 4658 4669 nil nil nil t nil) nil nil))) nil (25905 23014 801421 334000) 0 nil])
([nil nil ((4670 . 4671)) nil (25905 23014 801416 961000) 0 nil])
([nil nil ((2719 . 2721) (t 25905 23014 834607 144000)) nil (25905 23341 619260 549000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -2720) (undo-tree-id1176 . -1) 2721) nil (25905 23341 619259 641000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2721 . 2722) (#("
" 0 1 (fontified nil)) . -3068) (2720 . 3069)) nil (25905 23341 619257 921000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2720)) nil (25905 23341 619257 241000) 0 nil])
([nil nil ((2726 . 2727)) nil (25905 23341 619256 827000) 0 nil])
([nil nil ((2771 . 2772)) nil (25905 23341 619256 491000) 0 nil])
([nil nil ((2821 . 2822)) nil (25905 23341 619256 83000) 0 nil])
([nil nil ((#("	timeStamp := time.Now()
" 0 1 (rear-nonsticky t fontified t) 1 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 15 (fontified t face tree-sitter-hl-face:variable) 15 18 (fontified t face tree-sitter-hl-face:variable) 18 19 (fontified t) 19 22 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (fontified t)) . 2790) (undo-tree-id1173 . 15) (undo-tree-id1174 . -24) (undo-tree-id1175 . -9) 2799) nil (25905 23341 619255 311000) 0 nil])
([nil nil ((2827 . 2828)) nil (25905 23341 619252 451000) 0 nil])
([nil nil ((2858 . 2859)) nil (25905 23341 619251 860000) 0 nil])
([nil nil ((2884 . 2885)) nil (25905 23341 619251 255000) 0 nil])
([nil nil ((923 . 925)) nil (25905 23341 619250 687000) 0 nil])
([nil nil ((925 . 936)) nil (25905 23341 619250 278000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -923) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("
" 0 1 (fontified t)) . -924) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -925) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -926) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -927) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -928) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#(" " 0 1 (fontified t)) . -929) (undo-tree-id1166 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -930) (undo-tree-id1167 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -931) (undo-tree-id1168 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -932) (undo-tree-id1169 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -933) (undo-tree-id1170 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -934) (undo-tree-id1171 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -935) (undo-tree-id1172 . -1) 936) nil (25905 23341 619247 986000) 0 nil])
([nil nil ((850 . 852)) nil (25905 23341 619234 811000) 0 nil])
([nil nil ((852 . 857)) nil (25905 23341 619234 287000) 0 nil])
([nil nil ((857 . 863)) nil (25905 23341 619233 606000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -858) (undo-tree-id1149 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -859) (undo-tree-id1150 . -1) (#("A" 0 1 (fontified t face tree-sitter-hl-face:type)) . -860) (undo-tree-id1151 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -861) (undo-tree-id1152 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -862) (undo-tree-id1153 . -1) 863) nil (25905 23341 619232 413000) 0 nil])
([nil nil ((858 . 879)) nil (25905 23341 619228 364000) 0 nil])
([nil nil ((879 . 882)) nil (25905 23341 619227 918000) 0 nil])
([nil nil ((882 . 883)) nil (25905 23341 619227 31000) 0 nil])
([nil nil ((883 . 885)) nil (25905 23341 619226 467000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -884) (884 . 885) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -884) (884 . 885)) nil (25905 23341 619225 584000) 0 nil])
([nil nil ((885 . 886) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 885) (885 . 886) (884 . 886)) nil (25905 23341 619224 504000) 0 nil])
([nil nil ((886 . 890)) nil (25905 23341 619223 330000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -889) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) 890) nil (25905 23341 619222 668000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -888) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) 889) nil (25905 23341 619220 598000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -886) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -887) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) 888) nil (25905 23341 619218 256000) 0 nil])
([nil nil ((886 . 889)) nil (25905 23341 619214 682000) 0 nil])
([nil nil ((889 . 891)) nil (25905 23341 619214 72000) 0 nil])
([nil nil ((891 . 895)) nil (25905 23341 619213 697000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -893) (undo-tree-id1139 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -894) (undo-tree-id1140 . -1) 895) nil (25905 23341 619212 970000) 0 nil])
([nil nil ((893 . 895)) nil (25905 23341 619211 104000) 0 nil])
([nil nil ((apply yas--snippet-revive 891 904 #s(yas--snippet nil nil nil 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 62 nil nil nil nil)) (891 . 904) (#("database.Feed" 0 13 (fontified nil)) . 891) (891 . 904) (#("Fee" 0 3 (fontified nil)) . 891) (891 . 894) (#("database.Feed" 0 13 (fontified nil)) . -891) (891 . 904) (#("Feed" 0 4 (fontified t face tree-sitter-hl-face:type)) . -891) (undo-tree-id1137 . -4) (undo-tree-id1138 . -4) 895) nil (25905 23341 619210 108000) 0 nil])
([nil nil ((904 . 909)) nil (25905 23341 619207 375000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -907) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -908) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) 909) nil (25905 23341 619206 527000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -905) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -906) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) 907) nil (25905 23341 619202 755000) 0 nil])
([nil nil ((911 . 913) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -911) (906 . 912) (905 . 907) (#("`" 0 1 (fontified nil)) . -905) (905 . 906)) nil (25905 23341 619198 692000) 0 nil])
([nil nil ((912 . 916)) nil (25905 23341 619197 102000) 0 nil])
([nil nil ((918 . 920)) nil (25905 23341 619196 396000) 0 nil])
([nil nil ((920 . 923)) nil (25905 23341 619195 847000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -922) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) 923) nil (25905 23341 619194 997000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -921) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 922) nil (25905 23341 619192 869000) 0 nil])
([nil nil ((921 . 924)) nil (25905 23341 619190 979000) 0 nil])
([nil nil ((924 . 925)) nil (25905 23341 619190 508000) 0 nil])
([nil nil ((925 . 926)) nil (25905 23341 619189 515000) 0 nil])
([nil nil ((926 . 927)) nil (25905 23341 619189 127000) 0 nil])
([nil nil ((927 . 928)) nil (25905 23341 619188 534000) 0 nil])
([nil nil ((928 . 929)) nil (25905 23341 619187 790000) 0 nil])
([nil nil ((929 . 930)) nil (25905 23341 619187 289000) 0 nil])
([nil nil ((930 . 931)) nil (25905 23341 619186 810000) 0 nil])
([nil nil ((931 . 935)) nil (25905 23341 619186 223000) 0 nil])
([nil nil ((935 . 940)) nil (25905 23341 619185 748000) 0 nil])
([nil nil ((940 . 943)) nil (25905 23341 619184 957000) 0 nil])
([nil nil ((apply yas--snippet-revive 940 950 #s(yas--snippet nil nil nil 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 63 nil nil nil nil)) (940 . 950) (#("Feedfollow" 0 10 (fontified nil)) . 940) (940 . 950) (#("Fee" 0 3 (fontified nil)) . 940) (940 . 943) (#("Feedfollow" 0 10 (fontified nil)) . -940) (940 . 950) (#("Fee" 0 3 (fontified t face tree-sitter-hl-face:type)) . -940) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -1) (undo-tree-id1115 . -2) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) (undo-tree-id1118 . -3) (undo-tree-id1119 . -3) (undo-tree-id1120 . -3) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) 943) nil (25905 23341 619183 26000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -952) (952 . 953) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -952) (952 . 953) (951 . 953) (#("`" 0 1 (fontified nil)) . -951) (950 . 952)) nil (25905 23341 618945 771000) 0 nil])
([nil nil ((958 . 959) (957 . 959) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -957) (952 . 958)) nil (25905 23341 618944 369000) 0 nil])
([nil nil ((959 . 969)) nil (25905 23341 618940 15000) 0 nil])
([nil nil ((3171 . 3173) (t 25905 23341 652548 950000)) nil (25905 23570 907920 751000) 0 nil])
([nil nil ((3173 . 3174)) nil (25905 23570 907920 33000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3173) (undo-tree-id1237 . -1) 3174) nil (25905 23570 907919 461000) 0 nil])
([nil nil ((3173 . 3193)) nil (25905 23570 907918 280000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3192) (undo-tree-id1236 . -1) 3193) nil (25905 23570 907917 532000) 0 nil])
([nil nil ((3192 . 3194)) nil (25905 23570 907916 177000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3192) (undo-tree-id1234 . -1) (#(" " 0 1 (fontified t)) . -3193) (undo-tree-id1235 . -1) 3194) nil (25905 23570 907915 321000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3178) (undo-tree-id1233 . -1) 3179) nil (25905 23570 907913 63000) 0 nil])
([nil nil ((3191 . 3197)) nil (25905 23570 907911 837000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3195) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (#("." 0 1 (fontified t)) . -3196) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) 3197) nil (25905 23570 907910 792000) 0 nil])
([nil nil ((3195 . 3198)) nil (25905 23570 907907 700000) 0 nil])
([nil nil ((apply yas--snippet-revive 3195 3218 #s(yas--snippet nil nil nil 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 64 nil nil nil nil)) (3195 . 3218) (#("CreateFeedFollowRequest" 0 23 (fontified nil)) . 3195) (3195 . 3218) (#("Cre" 0 3 (fontified nil)) . 3195) (3195 . 3198) (#("CreateFeedFollowRequest" 0 23 (fontified nil)) . -3195) (3195 . 3218) (#("Cre" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3195) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) 3198) nil (25905 23570 907906 737000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3205) (undo-tree-id1214 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3206) (undo-tree-id1215 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3207) (undo-tree-id1216 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3208) (undo-tree-id1217 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3209) (undo-tree-id1218 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3210) (undo-tree-id1219 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3211) (undo-tree-id1220 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3212) (undo-tree-id1221 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3213) (undo-tree-id1222 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3214) (undo-tree-id1223 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3215) (undo-tree-id1224 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3216) (undo-tree-id1225 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3217) (undo-tree-id1226 . -1) 3218) nil (25905 23570 907902 48000) 0 nil])
([nil nil ((3205 . 3207)) nil (25905 23570 907892 200000) 0 nil])
([nil nil ((apply yas--snippet-revive 3195 3212 #s(yas--snippet nil nil nil 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 65 nil nil nil nil)) (3195 . 3212) (#("CreateFeedRequest" 0 17 (fontified nil)) . 3195) (3195 . 3212) (#("CreateFeedRe" 0 12 (fontified nil)) . 3195) (3195 . 3207) (#("CreateFeedRequest" 0 17 (fontified nil)) . -3195) (3195 . 3212) (#("CreateFeedRe" 0 12 (fontified t face tree-sitter-hl-face:variable)) . -3195) (undo-tree-id1212 . -12) (undo-tree-id1213 . -12) 3207) nil (25905 23570 907890 696000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3213) (3213 . 3214) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3213) (3213 . 3214) (3212 . 3214)) nil (25905 23570 907887 558000) 0 nil])
([nil nil ((3214 . 3216)) nil (25905 23570 907886 670000) 0 nil])
([nil nil ((3216 . 3222)) nil (25905 23570 907886 199000) 0 nil])
([nil nil ((apply yas--snippet-revive 3216 3234 #s(yas--snippet nil nil nil 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 66 nil nil nil nil)) (3216 . 3234) (#("createFeedResponse" 0 18 (fontified nil)) . 3216) (3216 . 3234) (#("create" 0 6 (fontified nil)) . 3216) (3216 . 3222) (#("createFeedResponse" 0 18 (fontified nil)) . -3216) (3216 . 3234) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -3216) (undo-tree-id1210 . -6) (undo-tree-id1211 . -6) 3222) nil (25905 23570 907884 999000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3207) (undo-tree-id1205 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3208) (undo-tree-id1206 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3209) (undo-tree-id1207 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3210) (undo-tree-id1208 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3211) (undo-tree-id1209 . -1) 3212) nil (25905 23570 907881 662000) 0 nil])
([nil nil ((3207 . 3208)) nil (25905 23570 907877 639000) 0 nil])
([nil nil ((apply yas--snippet-revive 3195 3213 #s(yas--snippet nil nil nil 67 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 67 nil nil nil nil)) (3195 . 3213) (#("CreateFeedResponse" 0 18 (fontified nil)) . 3195) (3195 . 3213) (#("CreateFeedRes" 0 13 (fontified nil)) . 3195) (3195 . 3208) (#("CreateFeedResponse" 0 18 (fontified nil)) . -3195) (3195 . 3213) (#("CreateFeedRes" 0 13 (fontified t face tree-sitter-hl-face:type)) . -3195) (undo-tree-id1203 . -13) (undo-tree-id1204 . -13) 3208) nil (25905 23570 907876 584000) 0 nil])
([nil nil ((3235 . 3236)) nil (25905 23570 907874 105000) 0 nil])
([nil nil ((apply yas--snippet-revive 3236 3240 #s(yas--snippet nil nil nil 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 68 nil nil nil nil)) (3236 . 3240) (#("Feed" 0 4 (fontified nil)) . 3236) (3236 . 3240) (#("Feed" 0 4 (fontified nil)) . -3236) (3236 . 3240)) nil (25905 23570 907873 225000) 0 nil])
([nil nil ((3240 . 3247)) nil (25905 23570 907872 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 3243 3247 #s(yas--snippet nil nil nil 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 69 nil nil nil nil)) (3243 . 3247) (#("feed" 0 4 (fontified nil)) . 3243) (3243 . 3247) (#("feed" 0 4 (fontified nil)) . 3243) (3243 . 3247) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3243) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) 3247) nil (25905 23570 907871 239000) 0 nil])
([nil nil ((3247 . 3249)) nil (25905 23570 907868 791000) 0 nil])
([nil nil ((3249 . 3255)) nil (25905 23570 907868 336000) 0 nil])
([nil nil ((apply yas--snippet-revive 3249 3267 #s(yas--snippet nil nil nil 70 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 70 nil nil nil nil)) (3249 . 3267) (#("createFeedResponse" 0 18 (fontified nil)) . 3249) (3249 . 3267) (#("create" 0 6 (fontified nil)) . 3249) (3249 . 3255) (#("createFeedResponse" 0 18 (fontified nil)) . -3249) (3249 . 3267) (#("create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -3249) (undo-tree-id1199 . -6) (undo-tree-id1200 . -6) 3255) nil (25905 23570 907867 283000) 0 nil])
([nil nil ((3267 . 3271)) nil (25905 23570 907864 400000) 0 nil])
([nil nil ((apply yas--snippet-revive 3268 3278 #s(yas--snippet nil nil nil 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 71 nil nil nil nil)) (3268 . 3278) (#("FeedFollow" 0 10 (fontified nil)) . 3268) (3268 . 3278) (#("Fee" 0 3 (fontified nil)) . 3268) (3268 . 3271) (#("FeedFollow" 0 10 (fontified nil)) . -3268) (3268 . 3278) (#("Fee" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3268) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) 3271) nil (25905 23570 907863 268000) 0 nil])
([nil nil ((3278 . 3282)) nil (25905 23570 907860 822000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3281) (undo-tree-id1196 . -1) 3282) nil (25905 23570 907860 10000) 0 nil])
([nil nil ((3281 . 3285)) nil (25905 23570 907858 846000) 0 nil])
([nil nil ((apply yas--snippet-revive 3281 3291 #s(yas--snippet nil nil nil 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 72 nil nil nil nil)) (3281 . 3291) (#("feedFollow" 0 10 (fontified nil)) . 3281) (3281 . 3291) (#("feed" 0 4 (fontified nil)) . 3281) (3281 . 3285) (#("feedFollow" 0 10 (fontified nil)) . -3281) (3281 . 3291) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3281) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) 3285) nil (25905 23570 907857 462000) 0 nil])
([nil nil ((#("f" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -3323) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3324) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3325) (undo-tree-id1192 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3326) (undo-tree-id1193 . -1) 3327) nil (25905 23570 907853 851000) 0 nil])
([nil nil ((3323 . 3326)) nil (25905 23570 907848 631000) 0 nil])
([nil nil ((apply yas--snippet-revive 3323 3341 #s(yas--snippet nil nil nil 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 73 nil nil nil nil)) (3323 . 3341) (#("createFeedResponse" 0 18 (fontified nil)) . 3323) (3323 . 3341) (#("cre" 0 3 (fontified nil)) . 3323) (3323 . 3326) (#("createFeedResponse" 0 18 (fontified nil)) . -3323) (3323 . 3341) (#("cre" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3323) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -1) (undo-tree-id1180 . -2) (undo-tree-id1181 . -3) (undo-tree-id1182 . -3) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) 3326) nil (25905 23570 907846 768000) 0 nil])
([nil nil ((3342 . 3343)) nil (25905 23570 907827 611000) 0 nil])
([nil nil ((3081 . 3082) (t 25905 23570 943229 347000)) nil (25905 23622 336433 828000) 0 nil])
([nil nil ((6388 . 6392) (t 25905 23622 372383 445000)) nil (25905 23684 972991 870000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6408 6415 nil nil nil t nil)) nil 74 nil #s(yas--field 1 6408 6415 nil nil nil t nil) nil nil)) (6388 . 6430) (#("apiCfg.authenticate(${1:handler authedHandler})" 0 47 (fontified nil)) . 6388) (6388 . 6435) (#("apiC" 0 4 (fontified nil)) . 6388) (6388 . 6392) (#("apiCfg.authenticate" 0 19 (fontified nil)) . -6388) (6388 . 6407) (#("apiC" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6388) (undo-tree-id1239 . -4) (undo-tree-id1240 . -4) 6392) nil (25905 23684 972990 458000) 0 nil])
([nil nil ((6409 . 6414) (#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 6409) (undo-tree-id1238 . -21) (6408 . 6409)) nil (25905 23684 972986 639000) 0 nil])
([nil nil ((6414 . 6415)) nil (25905 23684 972978 562000) 0 nil])
([nil nil ((apply yas--snippet-revive 6388 6416 #s(yas--snippet nil (#s(yas--field 1 6408 6415 nil nil nil t nil)) nil 74 nil #s(yas--field 1 6408 6415 nil nil nil t nil) nil nil))) nil (25905 23684 972977 611000) 0 nil])
([nil nil ((4988 . 4994)) nil (25905 23684 972973 208000) 0 nil])
([nil nil ((6421 . 6422) (t 25905 23685 8571 700000)) nil (25905 23696 381108 414000) 0 nil])
([nil nil ((6422 . 6424)) nil (25905 23696 381107 275000) 0 nil])
([nil current ((apply yas--snippet-revive 6421 6444 #s(yas--snippet nil nil nil 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 75 nil nil nil nil)) (6421 . 6444) (#("GetAllFeedFollowsByUser" 0 23 (fontified nil)) . 6421) (6421 . 6444) (#("Get" 0 3 (fontified nil)) . 6421) (6421 . 6424) (#("GetAllFeedFollowsByUser" 0 23 (fontified nil)) . -6421) (6421 . 6444) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6421) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -1) (undo-tree-id1244 . -2) (undo-tree-id1245 . -3) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) (undo-tree-id1249 . -3) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) 6424) nil (25905 23696 381103 1000) 0 nil])
nil
