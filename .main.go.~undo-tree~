(undo-tree-save-format-version . 1)
"e6f048690aecee80d0ace644c5bed627464eca1b"
[nil nil nil nil (25898 20738 392779 163000) 0 nil]
([nil nil ((1 . 13) (t 25898 20703 138921 76000)) nil (25898 20738 392778 361000) 0 nil])
([nil nil ((apply yas--snippet-revive 9 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified t)) . -9) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 13) nil (25898 20738 392777 569000) 0 nil])
([nil nil ((13 . 15)) nil (25898 20738 392744 76000) 0 nil])
([nil nil ((15 . 24)) nil (25898 20738 392742 954000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -25) (25 . 26) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -25) (25 . 26) (24 . 26)) nil (25898 20738 392742 2000) 0 nil])
([nil nil ((26 . 27)) nil (25898 20738 392738 666000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -28) (28 . 29) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -28) (28 . 29) (26 . 29) (t 25898 20738 399594 753000)) nil (25898 20746 383787 365000) 0 nil])
([nil nil ((29 . 30) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 29) (29 . 30) (28 . 30)) nil (25898 20746 383783 748000) 0 nil])
([nil nil ((30 . 34) (t 25898 20746 390747 228000)) nil (25898 21392 546694 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 65 73 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (14 . 49) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (30 . 38) (#("godotenv" 0 8 (fontified nil)) . 30) (30 . 38) (#("godo" 0 4 (fontified nil)) . 30) (30 . 34) (#("godotenv" 0 8 (fontified nil)) . -30) (30 . 38) (#("godo" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -30) (undo-tree-id57 . -4) (undo-tree-id58 . -4) 34) nil (25898 21392 546694 318000) 0 nil])
([nil nil ((73 . 77)) nil (25898 21392 546692 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil)) (74 . 99) (#("Load(${1:filenames ...string})" 0 30 (fontified nil)) . 74) (74 . 104) (#("Loa" 0 3 (fontified nil)) . 74) (74 . 77) (#("Load" 0 4 (fontified nil)) . -74) (74 . 78) (#("Loa" 0 3 (fontified t face tree-sitter-hl-face:property)) . -74) (undo-tree-id55 . -3) (undo-tree-id56 . -3) 77) nil (25898 21392 546691 12000) 0 nil])
([nil nil ((apply yas--snippet-revive 74 99 #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil))) nil (25898 21392 546689 369000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -79) (undo-tree-id36 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -80) (undo-tree-id37 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -81) (undo-tree-id38 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -82) (undo-tree-id39 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -83) (undo-tree-id40 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -84) (undo-tree-id41 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -85) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -86) (undo-tree-id43 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -87) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -88) (undo-tree-id45 . -1) (#("." 0 1 (fontified t)) . -89) (undo-tree-id46 . -1) (#("." 0 1 (fontified t)) . -90) (undo-tree-id47 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:operator)) . -91) (undo-tree-id48 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -92) (undo-tree-id49 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -93) (undo-tree-id50 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -94) (undo-tree-id51 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -95) (undo-tree-id52 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -96) (undo-tree-id53 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -97) (undo-tree-id54 . -1) 98) nil (25898 21392 546686 584000) 0 nil])
([nil nil ((80 . 82)) nil (25898 21392 546680 502000) 0 nil])
([nil nil ((82 . 88)) nil (25898 21392 546680 81000) 0 nil])
([nil nil ((22 . 32) (48 . 50) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil)) (85 . 103) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 85) (85 . 108) (#("Get" 0 3 (fontified nil)) . 85) (85 . 88) (#("Getenv" 0 6 (fontified nil)) . -85) (85 . 91) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -85) (undo-tree-id34 . -3) (undo-tree-id35 . -3) 88) nil (25898 21392 546679 69000) 0 nil])
([nil nil ((105 . 109) (104 . 106) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -104) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 105) (104 . 105)) nil (25898 21392 546676 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 97 111 #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil))) nil (25898 21392 546675 934000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (undo-tree-id33 . -1) (111 . 114)) nil (25898 21392 546675 322000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (112 . 113) (112 . 113)) nil (25898 21392 546674 491000) 0 nil])
([nil nil ((114 . 126)) nil (25898 21392 546673 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 151 160 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (30 . 58) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (123 . 132) (#("NewRouter" 0 9 (fontified nil)) . 123) (123 . 132) (#("New" 0 3 (fontified nil)) . 123) (123 . 126) (#("NewRouter" 0 9 (fontified nil)) . -123) (123 . 132) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -123) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 126) nil (25898 21392 546672 347000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -161) (161 . 162) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -161) (161 . 162) (160 . 162)) nil (25898 21392 546670 483000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -170) (170 . 171) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -170) (170 . 171) (164 . 171)) nil (25898 21392 546669 852000) 0 nil])
([nil nil ((170 . 175)) nil (25898 21392 546669 421000) 0 nil])
([nil nil ((apply yas--snippet-revive 201 208 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (57 . 83) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (175 . 182) (#("Handler" 0 7 (fontified nil)) . 175) (175 . 182) (#("Handler" 0 7 (fontified nil)) . -175) (175 . 182)) nil (25898 21392 546668 930000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -192) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 193) nil (25898 21392 546667 758000) 0 nil])
([nil nil ((192 . 193)) nil (25898 21392 546666 756000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -209) (209 . 210) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -209) (209 . 210) (208 . 210)) nil (25898 21392 546666 436000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -210) (210 . 211) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -210) (210 . 211) (209 . 211)) nil (25898 21392 546665 714000) 0 nil])
([nil nil ((209 . 216)) nil (25898 21392 546665 233000) 0 nil])
([nil nil ((209 . 214)) nil (25898 21392 546665 53000) 0 nil])
([nil nil ((223 . 225) (224 . 225) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 223) (223 . 225) (222 . 224)) nil (25898 21392 546664 752000) 0 nil])
([nil nil ((225 . 228)) nil (25898 21392 546664 211000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -227) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 228) nil (25898 21392 546663 811000) 0 nil])
([nil nil ((227 . 229)) nil (25898 21392 546663 59000) 0 nil])
([nil nil ((229 . 230)) nil (25898 21392 546662 809000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil)) (225 . 250) (#("AllowedOrigins: ${1:[]string}," 0 30 (fontified nil)) . 225) (225 . 255) (#("Allow" 0 5 (fontified nil)) . 225) (225 . 230) (#("AllowedOrigins" 0 14 (fontified nil)) . -225) (225 . 239) (#("Allow" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -225) (undo-tree-id25 . -5) (undo-tree-id26 . -5) 230) nil (25898 21392 546662 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 225 250 #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil))) nil (25898 21392 546660 595000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -250) (250 . 251) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -250) (250 . 251) (249 . 251)) nil (25898 21392 546660 224000) 0 nil])
([nil nil ((251 . 256) (250 . 252) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -250) (250 . 251)) nil (25898 21392 546659 663000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -251) (undo-tree-id20 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -252) (undo-tree-id21 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -253) (undo-tree-id22 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -254) (undo-tree-id23 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -255) (undo-tree-id24 . -1) 256) nil (25898 21392 546658 821000) 0 nil])
([nil nil ((251 . 252)) nil (25898 21392 546657 188000) 0 nil])
([nil nil ((255 . 258)) nil (25898 21392 546656 868000) 0 nil])
([nil nil ((258 . 264)) nil (25898 21392 546656 517000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil)) (258 . 283) (#("AllowedMethods: ${1:[]string}," 0 30 (fontified nil)) . 258) (258 . 288) (#("Allowe" 0 6 (fontified nil)) . 258) (258 . 264) (#("AllowedMethods" 0 14 (fontified nil)) . -258) (258 . 272) (#("Allowe" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -258) (undo-tree-id18 . -6) (undo-tree-id19 . -6) 264) nil (25898 21392 546655 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 258 283 #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil))) nil (25898 21392 546654 112000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -283) (283 . 284) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -283) (283 . 284) (282 . 284)) nil (25898 21392 546653 621000) 0 nil])
([nil nil ((284 . 287) (283 . 285) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -283) (283 . 284)) nil (25898 21392 546652 720000) 0 nil])
([nil nil ((287 . 288)) nil (25898 21392 546652 89000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -283) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("G" 0 1 (fontified t)) . -284) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("e" 0 1 (fontified t)) . -285) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("t" 0 1 (fontified t)) . -286) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t)) . -287) (undo-tree-id16 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -288) (undo-tree-id17 . -1) 289) nil (25898 21392 546651 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 315 . 316) (nil fontified nil 283 . 316) (283 . 316) 282) nil (25898 21392 546646 217000) 0 nil])
([nil nil ((318 . 321)) nil (25898 21392 546645 496000) 0 nil])
([nil nil ((321 . 327)) nil (25898 21392 546645 226000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil)) (321 . 346) (#("AllowedHeaders: ${1:[]string}," 0 30 (fontified nil)) . 321) (321 . 351) (#("Allowe" 0 6 (fontified nil)) . 321) (321 . 327) (#("AllowedHeaders" 0 14 (fontified nil)) . -321) (321 . 335) (#("Allowe" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -321) (undo-tree-id2 . -6) (undo-tree-id3 . -6) 327) nil (25898 21392 546644 554000) 0 nil])
([nil nil ((apply yas--snippet-revive 321 346 #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil))) nil (25898 21392 546634 796000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -346) (346 . 347) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -346) (346 . 347) (345 . 347)) nil (25898 21392 546634 235000) 0 nil])
([nil nil ((347 . 348) (346 . 348) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -346) (346 . 347)) nil (25898 21392 546630 77000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (fontified nil)) . 357) (undo-tree-id93 . -1) (356 . 359) (t 25898 21392 647554 294000)) nil (25898 21474 84134 578000) 0 nil])
([nil nil ((359 . 378)) nil (25898 21474 84133 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 375 386 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (375 . 386) (#("NewRouter()" 0 11 (fontified nil)) . 375) (375 . 386) (#("New" 0 3 (fontified nil)) . 375) (375 . 378) (#("NewRouter" 0 9 (fontified nil)) . -375) (375 . 384) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -375) (undo-tree-id91 . -3) (undo-tree-id92 . -3) 378) nil (25898 21474 84133 135000) 0 nil])
([nil nil ((388 . 389) (#("	" 0 1 (fontified nil)) . 387) (undo-tree-id90 . -1) (386 . 389)) nil (25898 21474 84131 943000) 0 nil])
([nil nil ((387 . 388)) nil (25898 21474 84131 312000) 0 nil])
([nil nil ((388 . 391)) nil (25898 21474 84130 991000) 0 nil])
([nil nil ((apply yas--snippet-revive 388 396 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (388 . 396) (#("v1Router" 0 8 (fontified nil)) . 388) (388 . 396) (#("v1R" 0 3 (fontified nil)) . 388) (388 . 391) (#("v1Router" 0 8 (fontified nil)) . -388) (388 . 396) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -388) (undo-tree-id88 . -3) (undo-tree-id89 . -3) 391) nil (25898 21474 84130 39000) 0 nil])
([nil nil ((396 . 397)) nil (25898 21474 84127 304000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -388) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -389) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -390) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -391) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -392) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -393) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -394) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -395) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("." 0 1 (fontified t)) . -396) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 397) nil (25898 21474 84125 611000) 0 nil])
([nil nil ((388 . 393)) nil (25898 21474 84119 339000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil)) (390 . 433) (#("Mount(${1:pattern string}, ${2:handler http.Handler})" 0 53 (fontified nil)) . 390) (390 . 443) (#("Mou" 0 3 (fontified nil)) . 390) (390 . 393) (#("Mount" 0 5 (fontified nil)) . -390) (390 . 395) (#("Mou" 0 3 (fontified t face tree-sitter-hl-face:property)) . -390) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 393) nil (25898 21474 84118 457000) 0 nil])
([nil nil ((397 . 399) (396 . 398) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -396) (undo-tree-id66 . -1) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 397) (undo-tree-id67 . -14) (396 . 397)) nil (25898 21474 84116 894000) 0 nil])
([nil nil ((397 . 398)) nil (25898 21474 84115 41000) 0 nil])
([nil nil ((404 . 406) (#("handler http.Handler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 12 (fontified nil face tree-sitter-hl-face:variable) 12 13 (fontified nil) 13 20 (fontified nil face tree-sitter-hl-face:property)) . 404) (undo-tree-id65 . -20) (403 . 404)) nil (25898 21474 84114 79000) 0 nil])
([nil nil ((apply yas--snippet-revive 403 411 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (403 . 411) (#("v1Router" 0 8 (fontified nil)) . 403) (undo-tree-id59 . -8) (403 . 411) (#("v1R" 0 3 (fontified nil)) . 403) (undo-tree-id60 . -3) (403 . 406) (#("v1Router" 0 8 (fontified nil)) . -403) (undo-tree-id61 . -8) (403 . 411) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -403) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) 406) nil (25898 21474 84111 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 390 412 #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil))) nil (25898 21474 84097 869000) 0 nil])
([nil nil ((414 . 415) (#("	" 0 1 (fontified nil)) . 413) (undo-tree-id181 . -1) (412 . 415) (t 25898 21474 184219 527000)) nil (25898 21522 266535 715000) 0 nil])
([nil nil ((415 . 424)) nil (25898 21522 266534 382000) 0 nil])
([nil nil ((23 . 35) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil)) (420 . 469) (#("ListenAndServe(${1:addr string}, ${2:handler http.Handler})" 0 59 (fontified nil)) . 420) (420 . 479) (#("List" 0 4 (fontified nil)) . 420) (420 . 424) (#("ListenAndServe" 0 14 (fontified nil)) . -420) (420 . 434) (#("List" 0 4 (fontified t face tree-sitter-hl-face:property)) . -420) (undo-tree-id179 . -4) (undo-tree-id180 . -4) 424) nil (25898 21522 266533 390000) 0 nil])
([nil nil ((448 . 451) (#("addr string" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:variable)) . 448) (447 . 448)) nil (25898 21522 266531 236000) 0 nil])
([nil nil ((apply yas--snippet-revive 432 474 #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil))) nil (25898 21522 266530 455000) 0 nil])
([nil nil ((160 . 168)) nil (25898 21522 266529 783000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -461) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -462) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -463) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -464) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -465) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -466) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -467) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -468) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -469) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -470) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -471) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -472) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("." 0 1 (fontified t)) . -473) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -474) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -475) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -476) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -477) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -478) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -479) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -480) (undo-tree-id178 . -1) 481) nil (25898 21522 266526 607000) 0 nil])
([nil nil ((461 . 462)) nil (25898 21522 266408 594000) 0 nil])
([nil nil ((435 . 442) (t 25898 21522 365657 812000)) nil (25898 21547 141543 517000) 0 nil])
([nil nil ((472 . 480)) nil (25898 21547 141542 905000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -478) (undo-tree-id200 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -479) (undo-tree-id201 . -1) 480) nil (25898 21547 141542 194000) 0 nil])
([nil nil ((478 . 480)) nil (25898 21547 141540 421000) 0 nil])
([nil nil ((23 . 30) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil)) (476 . 493) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 476) (476 . 498) (#("Prin" 0 4 (fontified nil)) . 476) (476 . 480) (#("Println" 0 7 (fontified nil)) . -476) (476 . 483) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -476) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -3) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) 480) nil (25898 21547 141539 409000) 0 nil])
([nil nil ((492 . 494) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 492) (undo-tree-id182 . -8) (undo-tree-id183 . -5) (undo-tree-id184 . -6) (491 . 492)) nil (25898 21547 141532 626000) 0 nil])
([nil nil ((apply yas--snippet-revive 483 495 #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil))) nil (25898 21547 141521 325000) 0 nil])
([nil nil ((441 . 442) (#("	" 0 1 (fontified nil)) . 440) (undo-tree-id288 . -1) (439 . 442) (t 25898 21547 186894 265000)) nil (25898 41465 951032 483000) 0 nil])
([nil nil ((442 . 445)) nil (25898 41465 951031 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 442 450 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (442 . 450) (#("v1Router" 0 8 (fontified nil)) . 442) (442 . 450) (#("v1R" 0 3 (fontified nil)) . 442) (442 . 445) (#("v1Router" 0 8 (fontified nil)) . -442) (442 . 450) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -442) (undo-tree-id286 . -3) (undo-tree-id287 . -3) 445) nil (25898 41465 951030 289000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -455) (455 . 456) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -455) (455 . 456) (450 . 456)) nil (25898 41465 951027 854000) 0 nil])
([nil nil ((455 . 457) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -455) (455 . 456)) nil (25898 41465 951026 351000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -450) (undo-tree-id285 . -1) 451) nil (25898 41465 951025 429000) 0 nil])
([nil nil ((450 . 451)) nil (25898 41465 951024 548000) 0 nil])
([nil nil ((456 . 466)) nil (25898 41465 951024 117000) 0 nil])
([nil nil ((467 . 469)) nil (25898 41465 951023 666000) 0 nil])
([nil nil ((133 . 135)) nil (25898 41465 951023 275000) 0 nil])
([nil nil ((135 . 149)) nil (25898 41465 951022 654000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -143) (undo-tree-id284 . -1) 144) nil (25898 41465 951021 973000) 0 nil])
([nil nil ((143 . 144)) nil (25898 41465 951020 951000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -157) (157 . 158) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -157) (157 . 158) (149 . 158)) nil (25898 41465 951020 260000) 0 nil])
([nil nil ((157 . 169)) nil (25898 41465 951019 558000) 0 nil])
([nil nil ((apply yas--snippet-revive 164 178 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (164 . 178) (#("ResponseWriter" 0 14 (fontified nil)) . 164) (164 . 178) (#("Respo" 0 5 (fontified nil)) . 164) (164 . 169) (#("ResponseWriter" 0 14 (fontified nil)) . -164) (164 . 178) (#("Respo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -164) (undo-tree-id282 . -5) (undo-tree-id283 . -5) 169) nil (25898 41465 951018 617000) 0 nil])
([nil nil ((178 . 188)) nil (25898 41465 951016 573000) 0 nil])
([nil nil ((188 . 191)) nil (25898 41465 951016 172000) 0 nil])
([nil nil ((apply yas--snippet-revive 188 195 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (188 . 195) (#("Request" 0 7 (fontified nil)) . 188) (188 . 195) (#("Req" 0 3 (fontified nil)) . 188) (188 . 191) (#("Request" 0 7 (fontified nil)) . -188) (188 . 195) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -188) (undo-tree-id280 . -3) (undo-tree-id281 . -3) 191) nil (25898 41465 951015 280000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -198) (198 . 199) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -198) (198 . 199) (196 . 199)) nil (25898 41465 951013 16000) 0 nil])
([nil nil ((199 . 200) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 199) (199 . 200) (198 . 200)) nil (25898 41465 951012 134000) 0 nil])
([nil nil ((200 . 206)) nil (25898 41465 951010 952000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 249 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (28 . 53) (29 . 32) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . 206) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . -206) (206 . 221)) nil (25898 41465 951010 371000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -250) (250 . 251) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -250) (250 . 251) (249 . 251)) nil (25898 41465 951008 928000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -246) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -247) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -248) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -249) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . 1) (undo-tree-id275 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -250) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . 1) (undo-tree-id279 . -1) 251) nil (25898 41465 951007 295000) 0 nil])
([nil nil ((246 . 247)) nil (25898 41465 951001 524000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil)) (234 . 303) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 234) (234 . 319) (#("RespondWithJS" 0 13 (fontified nil)) . 234) (234 . 247) (#("RespondWithJSON" 0 15 (fontified nil)) . -234) (234 . 249) (#("RespondWithJS" 0 13 (fontified t face tree-sitter-hl-face:property)) . -234) (undo-tree-id263 . -13) (undo-tree-id264 . -13) 247) nil (25898 41465 951000 462000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 251) (250 . 251)) nil (25898 41465 950998 449000) 0 nil])
([nil nil ((254 . 256) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 254) (253 . 254)) nil (25898 41465 950997 928000) 0 nil])
([nil nil ((259 . 263) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 259) (258 . 259)) nil (25898 41465 950997 196000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -262) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 263) nil (25898 41465 950996 64000) 0 nil])
([nil nil ((262 . 263)) nil (25898 41465 950994 852000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -258) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -259) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -260) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -261) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("." 0 1 (fontified t)) . -262) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 263) nil (25898 41465 950993 700000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 259 #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil))) nil (25898 41465 950989 221000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -259) (259 . 260) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -259) (259 . 260) (258 . 260)) nil (25898 41465 950988 390000) 0 nil])
([nil nil ((259 . 263)) nil (25898 41465 950987 197000) 0 nil])
([nil nil ((268 . 270) (267 . 269) (#("\"" 0 1 (fontified nil)) . -267) (263 . 268)) nil (25898 41465 950986 576000) 0 nil])
([nil nil ((258 . 263)) nil (25898 41465 950985 514000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -260) (undo-tree-id248 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -261) (undo-tree-id249 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -262) (undo-tree-id250 . -1) 263) nil (25898 41465 950984 693000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -265) (265 . 266) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -265) (265 . 266) (260 . 266)) nil (25898 41465 950981 977000) 0 nil])
([nil nil ((265 . 273)) nil (25898 41465 950981 26000) 0 nil])
([nil nil ((273 . 274)) nil (25898 41465 950980 334000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -271) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -272) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -273) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 274) nil (25898 41465 950978 711000) 0 nil])
([nil nil ((271 . 278)) nil (25898 41465 950949 706000) 0 nil])
([nil nil ((296 . 298) (t 25898 41465 958631 179000)) nil (25898 41664 498108 753000) 0 nil])
([nil nil ((298 . 315)) nil (25898 41664 498108 272000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -316) (316 . 317) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -316) (316 . 317) (315 . 317)) nil (25898 41664 498107 671000) 0 nil])
([nil nil ((316 . 326)) nil (25898 41664 498106 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 323 337 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (323 . 337) (#("ResponseWriter" 0 14 (fontified nil)) . 323) (323 . 337) (#("Res" 0 3 (fontified nil)) . 323) (323 . 326) (#("ResponseWriter" 0 14 (fontified nil)) . -323) (323 . 337) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -323) (undo-tree-id682 . -3) (undo-tree-id683 . -3) 326) nil (25898 41664 498105 837000) 0 nil])
([nil nil ((337 . 341)) nil (25898 41664 498104 144000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -340) (undo-tree-id681 . -1) 341) nil (25898 41664 498103 493000) 0 nil])
([nil nil ((340 . 342)) nil (25898 41664 498102 571000) 0 nil])
([nil nil ((342 . 352)) nil (25898 41664 498102 50000) 0 nil])
([nil nil ((apply yas--snippet-revive 347 354 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (347 . 354) (#("Request" 0 7 (fontified nil)) . 347) (347 . 354) (#("Reque" 0 5 (fontified nil)) . 347) (347 . 352) (#("Request" 0 7 (fontified nil)) . -347) (347 . 354) (#("Reque" 0 5 (fontified t face tree-sitter-hl-face:type)) . -347) (undo-tree-id679 . -5) (undo-tree-id680 . -5) 352) nil (25898 41664 498101 329000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -357) (357 . 358) (#("}" 0 1 (fontified nil)) . -357) (357 . 358) (355 . 358)) nil (25898 41664 498098 603000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 358) (358 . 359) (357 . 359)) nil (25898 41664 498097 501000) 0 nil])
([nil nil ((359 . 365)) nil (25898 41664 498096 540000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil)) (365 . 426) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 365) (365 . 441) (#("RespondWithError" 0 16 (fontified nil)) . -365) (365 . 381)) nil (25898 41664 498095 989000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 383) (382 . 383)) nil (25898 41664 498095 327000) 0 nil])
([nil nil ((386 . 388) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 386) (385 . 386)) nil (25898 41664 498094 616000) 0 nil])
([nil nil ((391 . 397) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 391) (390 . 391)) nil (25898 41664 498093 624000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -398) (398 . 399) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -398) (398 . 399) (397 . 399)) nil (25898 41664 498092 943000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -394) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 395) nil (25898 41664 498091 660000) 0 nil])
([nil nil ((397 . 409)) nil (25898 41664 498090 909000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -411) (411 . 412) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -411) (411 . 412) (410 . 412)) nil (25898 41664 498090 408000) 0 nil])
([nil nil ((419 . 432) (418 . 420) (#("\"" 0 1 (fontified nil)) . -418) (411 . 419)) nil (25898 41664 498089 456000) 0 nil])
([nil nil ((432 . 440)) nil (25898 41664 498088 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 365 443 #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil))) nil (25898 41664 498088 13000) 0 nil])
([nil nil ((396 . 397)) nil (25898 41664 498087 492000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -396) (undo-tree-id676 . -1) 397) nil (25898 41664 498086 671000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -397) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -398) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -399) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -400) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -401) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#(" " 0 1 (fontified t)) . -402) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -403) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -404) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -405) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -406) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -407) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -408) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -409) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -410) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -411) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -412) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -413) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -414) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -415) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#(":" 0 1 (fontified t)) . -416) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id675 . -1) 418) nil (25898 41664 498081 782000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -390) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -391) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -392) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -393) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -394) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -395) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -396) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 397) nil (25898 41664 498003 664000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -413) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . 1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 414) nil (25898 41664 497755 54000) 0 nil])
([nil nil ((752 . 755) (t 25898 41664 505415 95000)) nil (25898 41707 859889 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 752 768 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (752 . 768) (#("readinessHandler" 0 16 (fontified nil)) . 752) (752 . 768) (#("rea" 0 3 (fontified nil)) . 752) (752 . 755) (#("readinessHandler" 0 16 (fontified nil)) . -752) (752 . 768) (#("rea" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -752) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 755) nil (25898 41707 859887 878000) 0 nil])
([nil nil ((769 . 771)) nil (25898 41707 859885 193000) 0 nil])
([nil nil ((771 . 774)) nil (25898 41707 859884 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 771 779 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (771 . 779) (#("v1Router" 0 8 (fontified nil)) . 771) (771 . 779) (#("v1R" 0 3 (fontified nil)) . 771) (771 . 774) (#("v1Router" 0 8 (fontified nil)) . -771) (771 . 779) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -771) (undo-tree-id700 . -3) (undo-tree-id701 . -3) 774) nil (25898 41707 859883 510000) 0 nil])
([nil nil ((779 . 780)) nil (25898 41707 859880 624000) 0 nil])
([nil nil ((780 . 781)) nil (25898 41707 859879 953000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -784) (784 . 785) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -784) (784 . 785) (781 . 785)) nil (25898 41707 859878 951000) 0 nil])
([nil nil ((785 . 789) (784 . 786) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -784) (784 . 785)) nil (25898 41707 859877 358000) 0 nil])
([nil nil ((790 . 797)) nil (25898 41707 859875 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 792 804 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (792 . 804) (#("errorHandler" 0 12 (fontified nil)) . 792) (792 . 804) (#("error" 0 5 (fontified nil)) . 792) (792 . 797) (#("errorHandler" 0 12 (fontified nil)) . -792) (792 . 804) (#("error" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -792) (undo-tree-id684 . -5) (undo-tree-id685 . -5) (undo-tree-id686 . -2) (undo-tree-id687 . -3) (undo-tree-id688 . -4) (undo-tree-id689 . -5) (undo-tree-id690 . -5) (undo-tree-id691 . -5) (undo-tree-id692 . -5) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -5) (undo-tree-id696 . -5) (undo-tree-id697 . -5) (undo-tree-id698 . -5) (undo-tree-id699 . -5) 797) nil (25898 41707 859872 469000) 0 nil])
([nil nil ((475 . 477) (t 25898 41707 867817 8000)) nil (25898 41855 150390 421000) 0 nil])
([nil nil ((477 . 481)) nil (25898 41855 150390 121000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -477) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -478) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -479) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -480) (undo-tree-id756 . -1) (undo-tree-id757 . -1) 481) nil (25898 41855 150389 419000) 0 nil])
([nil nil ((454 . 457)) nil (25898 41855 150385 702000) 0 nil])
([nil nil ((480 . 490)) nil (25898 41855 150385 211000) 0 nil])
([nil nil ((490 . 496)) nil (25898 41855 150384 680000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -494) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -495) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 496) nil (25898 41855 150384 129000) 0 nil])
([nil nil ((494 . 504)) nil (25898 41855 150382 206000) 0 nil])
([nil nil ((75 . 86) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil)) (501 . 515) (#("Atoi(${1:s string})" 0 19 (fontified nil)) . 501) (501 . 520) (#("Ato" 0 3 (fontified nil)) . 501) (501 . 504) (#("Atoi" 0 4 (fontified nil)) . -501) (501 . 505) (#("Ato" 0 3 (fontified t face tree-sitter-hl-face:property)) . -501) (undo-tree-id744 . -3) (undo-tree-id745 . -3) 504) nil (25898 41855 150381 344000) 0 nil])
([nil nil ((518 . 521) (#("s string" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 8 (fontified nil face tree-sitter-hl-face:variable)) . 518) (517 . 518)) nil (25898 41855 150379 70000) 0 nil])
([nil nil ((apply yas--snippet-revive 517 524 #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (517 . 524) (#("portStr" 0 7 (fontified nil)) . 517) (517 . 524) (#("port" 0 4 (fontified nil)) . 517) (517 . 521) (#("portStr" 0 7 (fontified nil)) . -517) (517 . 524) (#("port" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -517) (undo-tree-id742 . -4) (undo-tree-id743 . -4) 521) nil (25898 41855 150378 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 512 525 #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil))) nil (25898 41855 150376 174000) 0 nil])
([nil nil ((525 . 527)) nil (25898 41855 150375 884000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -530) (530 . 531) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -530) (530 . 531) (527 . 531)) nil (25898 41855 150374 882000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -529) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . 1) (undo-tree-id738 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -530) (undo-tree-id739 . -1) (undo-tree-id740 . 1) (undo-tree-id741 . -1) 531) nil (25898 41855 150374 60000) 0 nil])
([nil nil ((529 . 541)) nil (25898 41855 150370 944000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -542) (542 . 543) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -542) (542 . 543) (541 . 543)) nil (25898 41855 150370 233000) 0 nil])
([nil nil ((543 . 545) (544 . 545) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 543) (543 . 545) (542 . 544)) nil (25898 41855 150369 41000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150367 999000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -545) (undo-tree-id728 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -546) (undo-tree-id729 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -547) (undo-tree-id730 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -548) (undo-tree-id731 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -549) (undo-tree-id732 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -550) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t)) . -551) (undo-tree-id734 . -1) 552) nil (25898 41855 150366 857000) 0 nil])
([nil nil ((545 . 551)) nil (25898 41855 150363 290000) 0 nil])
([nil nil ((542 . 545)) nil (25898 41855 150363 79000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150362 729000) 0 nil])
([nil nil ((552 . 553)) nil (25898 41855 150362 188000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil)) (549 . 566) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 549) (549 . 571) (#("Prin" 0 4 (fontified nil)) . 549) (549 . 553) (#("Println" 0 7 (fontified nil)) . -549) (549 . 556) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -549) (undo-tree-id726 . -4) (undo-tree-id727 . -4) 553) nil (25898 41855 150361 256000) 0 nil])
([nil nil ((558 . 563) (557 . 559) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -557) (undo-tree-id724 . -1) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 558) (undo-tree-id725 . -8) (557 . 558)) nil (25898 41855 150359 102000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -558) (undo-tree-id719 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -559) (undo-tree-id720 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -560) (undo-tree-id721 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -561) (undo-tree-id722 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -562) (undo-tree-id723 . -1) 563) nil (25898 41855 150356 938000) 0 nil])
([nil nil ((558 . 561)) nil (25898 41855 150354 714000) 0 nil])
([nil nil ((561 . 581)) nil (25898 41855 150354 373000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -578) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -579) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -580) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 581) nil (25898 41855 150353 421000) 0 nil])
([nil nil ((578 . 591)) nil (25898 41855 150339 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 549 593 #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil))) nil (25898 41855 150336 970000) 0 nil])
([nil nil ((#("	port, err := strconv.Atoi(portStr)
	if err != nil {
		fmt.Println(\"Invalid port value in environment\")
		return
	}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 7 (fontified t) 7 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 26 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 34 (fontified t face tree-sitter-hl-face:variable) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t) 36 37 (fontified t) 37 39 (fontified t face tree-sitter-hl-face:keyword) 39 40 (fontified t) 40 43 (fontified t face tree-sitter-hl-face:variable) 43 44 (fontified t) 44 46 (fontified t face tree-sitter-hl-face:operator) 46 47 (fontified t) 47 50 (fontified t face tree-sitter-hl-face:constant\.builtin) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 55 (fontified t) 55 58 (fontified t face tree-sitter-hl-face:variable) 58 59 (fontified t) 59 66 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 66 67 (fontified t face (rainbow-delimiters-depth-3-face)) 67 102 (fontified t face tree-sitter-hl-face:string) 102 103 (fontified t face (rainbow-delimiters-depth-3-face)) 103 104 (fontified t) 104 106 (fontified t) 106 112 (fontified t face tree-sitter-hl-face:keyword) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t face (rainbow-delimiters-depth-2-face)) 115 116 (fontified t)) . 490) (undo-tree-id788 . 13) (undo-tree-id789 . -115) (undo-tree-id790 . -114) (undo-tree-id791 . -114) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -67) (undo-tree-id796 . 15) (undo-tree-id797 . -1) (undo-tree-id798 . -115) (undo-tree-id799 . -115) (undo-tree-id800 . -114) (undo-tree-id801 . -114) (undo-tree-id802 . -114) (undo-tree-id803 . -114) (undo-tree-id804 . -114) (undo-tree-id805 . -114) (undo-tree-id806 . -116) (undo-tree-id807 . -1) (undo-tree-id808 . -114) (undo-tree-id809 . -114) (undo-tree-id810 . -114) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -5) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -116) 491 (t 25898 41855 159207 708000)) nil (25898 41909 750665 796000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -465) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -466) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -467) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 468) nil (25898 41909 750650 767000) 0 nil])
([nil nil ((846 . 850) (t 25898 41909 850732 655000)) nil (25898 41960 226841 431000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil)) (850 . 890) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 850) (850 . 900) (#("FormatString" 0 12 (fontified nil)) . -850) (850 . 862)) nil (25898 41960 226840 789000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -865) (865 . 866) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -865) (864 . 866) (863 . 865) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -863) (#("state fmt.State" 0 5 (fontified nil face tree-sitter-hl-face:variable) 5 6 (fontified nil) 6 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 15 (fontified nil face tree-sitter-hl-face:property)) . 864) (863 . 864)) nil (25898 41960 226839 968000) 0 nil])
([nil nil ((865 . 867)) nil (25898 41960 226838 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 880 #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil))) nil (25898 41960 226838 375000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -879) (undo-tree-id855 . -1) (undo-tree-id856 . 1) (undo-tree-id857 . -1) 880) nil (25898 41960 226837 633000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -869) (undo-tree-id845 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -870) (undo-tree-id846 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -871) (undo-tree-id847 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -872) (undo-tree-id848 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -873) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t)) . -874) (undo-tree-id850 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -875) (undo-tree-id851 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -876) (undo-tree-id852 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -877) (undo-tree-id853 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -878) (undo-tree-id854 . -1) 879) nil (25898 41960 226835 139000) 0 nil])
([nil nil ((873 . 874) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -873) (873 . 874)) nil (25898 41960 226830 841000) 0 nil])
([nil nil ((869 . 870)) nil (25898 41960 226830 239000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -850) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -851) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -852) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("m" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -853) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -854) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -855) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("S" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -856) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -857) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -858) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -859) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -860) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -861) (undo-tree-id844 . -1) 862) nil (25898 41960 226828 656000) 0 nil])
([nil nil ((850 . 851)) nil (25898 41960 226819 980000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -850) (undo-tree-id821 . -1) 851) nil (25898 41960 226819 409000) 0 nil])
([nil nil ((850 . 856)) nil (25898 41960 226818 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 857 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (850 . 857) (#("Sprintf" 0 7 (fontified nil)) . 850) (850 . 857) (#("Sprint" 0 6 (fontified nil)) . 850) (850 . 856) (#("Sprintf" 0 7 (fontified nil)) . -850) (850 . 857) (#("Sprint" 0 6 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -850) (undo-tree-id819 . -6) (undo-tree-id820 . -6) 856) nil (25898 41960 226815 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -76) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#("	" 0 1 (fontified t)) . -77) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("\"" 0 1 (fontified t)) . -78) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("s" 0 1 (fontified t)) . -79) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("t" 0 1 (fontified t)) . -80) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("r" 0 1 (fontified t)) . -81) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("c" 0 1 (fontified t)) . -82) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("o" 0 1 (fontified t)) . -83) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("n" 0 1 (fontified t)) . -84) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("v" 0 1 (fontified t)) . -85) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -86) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 87 (t 25898 41960 235219 738000)) nil (25898 41972 165178 607000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -280) (280 . 281) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -280) (280 . 281) (279 . 281) (#("`" 0 1 (fontified nil)) . -279) (278 . 280) (t 25898 41972 266336 502000)) nil (25898 42330 501339 211000) 0 nil])
([nil nil ((280 . 281)) nil (25898 42330 501337 768000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -280) (undo-tree-id912 . -1) 281) nil (25898 42330 501336 957000) 0 nil])
([nil nil ((286 . 292) (285 . 287) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -285) (280 . 286)) nil (25898 42330 501335 524000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -265) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 266) nil (25898 42330 501333 991000) 0 nil])
([nil nil ((265 . 266)) nil (25898 42330 501317 49000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -296) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) 297 (t 25898 42330 601876 267000)) nil (25898 42334 368739 942000) 0 nil])
([nil current ((296 . 297)) nil (25898 42334 368729 723000) 0 nil])
nil
