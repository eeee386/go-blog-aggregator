(undo-tree-save-format-version . 1)
"853d1e41e9f62b90616a8e05f9611eb9325ecca4"
[nil nil nil nil (25898 20738 392779 163000) 0 nil]
([nil nil ((1 . 13) (t 25898 20703 138921 76000)) nil (25898 20738 392778 361000) 0 nil])
([nil nil ((apply yas--snippet-revive 9 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified t)) . -9) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 13) nil (25898 20738 392777 569000) 0 nil])
([nil nil ((13 . 15)) nil (25898 20738 392744 76000) 0 nil])
([nil nil ((15 . 24)) nil (25898 20738 392742 954000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -25) (25 . 26) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -25) (25 . 26) (24 . 26)) nil (25898 20738 392742 2000) 0 nil])
([nil nil ((26 . 27)) nil (25898 20738 392738 666000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -28) (28 . 29) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -28) (28 . 29) (26 . 29) (t 25898 20738 399594 753000)) nil (25898 20746 383787 365000) 0 nil])
([nil nil ((29 . 30) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 29) (29 . 30) (28 . 30)) nil (25898 20746 383783 748000) 0 nil])
([nil nil ((30 . 34) (t 25898 20746 390747 228000)) nil (25898 21392 546694 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 65 73 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (14 . 49) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (30 . 38) (#("godotenv" 0 8 (fontified nil)) . 30) (30 . 38) (#("godo" 0 4 (fontified nil)) . 30) (30 . 34) (#("godotenv" 0 8 (fontified nil)) . -30) (30 . 38) (#("godo" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -30) (undo-tree-id57 . -4) (undo-tree-id58 . -4) 34) nil (25898 21392 546694 318000) 0 nil])
([nil nil ((73 . 77)) nil (25898 21392 546692 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil)) (74 . 99) (#("Load(${1:filenames ...string})" 0 30 (fontified nil)) . 74) (74 . 104) (#("Loa" 0 3 (fontified nil)) . 74) (74 . 77) (#("Load" 0 4 (fontified nil)) . -74) (74 . 78) (#("Loa" 0 3 (face tree-sitter-hl-face:property fontified t)) . -74) (undo-tree-id55 . -3) (undo-tree-id56 . -3) 77) nil (25898 21392 546691 12000) 0 nil])
([nil nil ((apply yas--snippet-revive 74 99 #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil))) nil (25898 21392 546689 369000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -79) (undo-tree-id36 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -80) (undo-tree-id37 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -81) (undo-tree-id38 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -82) (undo-tree-id39 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -83) (undo-tree-id40 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -84) (undo-tree-id41 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -85) (undo-tree-id42 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -86) (undo-tree-id43 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -87) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -88) (undo-tree-id45 . -1) (#("." 0 1 (fontified t)) . -89) (undo-tree-id46 . -1) (#("." 0 1 (fontified t)) . -90) (undo-tree-id47 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -91) (undo-tree-id48 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -92) (undo-tree-id49 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -93) (undo-tree-id50 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -94) (undo-tree-id51 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -95) (undo-tree-id52 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -96) (undo-tree-id53 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -97) (undo-tree-id54 . -1) 98) nil (25898 21392 546686 584000) 0 nil])
([nil nil ((80 . 82)) nil (25898 21392 546680 502000) 0 nil])
([nil nil ((82 . 88)) nil (25898 21392 546680 81000) 0 nil])
([nil nil ((22 . 32) (48 . 50) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil)) (85 . 103) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 85) (85 . 108) (#("Get" 0 3 (fontified nil)) . 85) (85 . 88) (#("Getenv" 0 6 (fontified nil)) . -85) (85 . 91) (#("Get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -85) (undo-tree-id34 . -3) (undo-tree-id35 . -3) 88) nil (25898 21392 546679 69000) 0 nil])
([nil nil ((105 . 109) (104 . 106) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -104) (#("key string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 105) (104 . 105)) nil (25898 21392 546676 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 97 111 #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil))) nil (25898 21392 546675 934000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (undo-tree-id33 . -1) (111 . 114)) nil (25898 21392 546675 322000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (112 . 113) (112 . 113)) nil (25898 21392 546674 491000) 0 nil])
([nil nil ((114 . 126)) nil (25898 21392 546673 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 151 160 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (30 . 58) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (123 . 132) (#("NewRouter" 0 9 (fontified nil)) . 123) (123 . 132) (#("New" 0 3 (fontified nil)) . 123) (123 . 126) (#("NewRouter" 0 9 (fontified nil)) . -123) (123 . 132) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -123) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 126) nil (25898 21392 546672 347000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -161) (161 . 162) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -161) (161 . 162) (160 . 162)) nil (25898 21392 546670 483000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -170) (170 . 171) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -170) (170 . 171) (164 . 171)) nil (25898 21392 546669 852000) 0 nil])
([nil nil ((170 . 175)) nil (25898 21392 546669 421000) 0 nil])
([nil nil ((apply yas--snippet-revive 201 208 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (57 . 83) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (175 . 182) (#("Handler" 0 7 (fontified nil)) . 175) (175 . 182) (#("Handler" 0 7 (fontified nil)) . -175) (175 . 182)) nil (25898 21392 546668 930000) 0 nil])
([nil nil ((#("u" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -192) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 193) nil (25898 21392 546667 758000) 0 nil])
([nil nil ((192 . 193)) nil (25898 21392 546666 756000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -209) (209 . 210) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -209) (209 . 210) (208 . 210)) nil (25898 21392 546666 436000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -210) (210 . 211) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -210) (210 . 211) (209 . 211)) nil (25898 21392 546665 714000) 0 nil])
([nil nil ((209 . 216)) nil (25898 21392 546665 233000) 0 nil])
([nil nil ((209 . 214)) nil (25898 21392 546665 53000) 0 nil])
([nil nil ((223 . 225) (224 . 225) (#("		" 0 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 223) (223 . 225) (222 . 224)) nil (25898 21392 546664 752000) 0 nil])
([nil nil ((225 . 228)) nil (25898 21392 546664 211000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -227) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 228) nil (25898 21392 546663 811000) 0 nil])
([nil nil ((227 . 229)) nil (25898 21392 546663 59000) 0 nil])
([nil nil ((229 . 230)) nil (25898 21392 546662 809000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil)) (225 . 250) (#("AllowedOrigins: ${1:[]string}," 0 30 (fontified nil)) . 225) (225 . 255) (#("Allow" 0 5 (fontified nil)) . 225) (225 . 230) (#("AllowedOrigins" 0 14 (fontified nil)) . -225) (225 . 239) (#("Allow" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -225) (undo-tree-id25 . -5) (undo-tree-id26 . -5) 230) nil (25898 21392 546662 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 225 250 #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil))) nil (25898 21392 546660 595000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -250) (250 . 251) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -250) (250 . 251) (249 . 251)) nil (25898 21392 546660 224000) 0 nil])
([nil nil ((251 . 256) (250 . 252) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -250) (250 . 251)) nil (25898 21392 546659 663000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:string fontified t)) . -251) (undo-tree-id20 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -252) (undo-tree-id21 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -253) (undo-tree-id22 . -1) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . -254) (undo-tree-id23 . -1) (#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -255) (undo-tree-id24 . -1) 256) nil (25898 21392 546658 821000) 0 nil])
([nil nil ((251 . 252)) nil (25898 21392 546657 188000) 0 nil])
([nil nil ((255 . 258)) nil (25898 21392 546656 868000) 0 nil])
([nil nil ((258 . 264)) nil (25898 21392 546656 517000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil)) (258 . 283) (#("AllowedMethods: ${1:[]string}," 0 30 (fontified nil)) . 258) (258 . 288) (#("Allowe" 0 6 (fontified nil)) . 258) (258 . 264) (#("AllowedMethods" 0 14 (fontified nil)) . -258) (258 . 272) (#("Allowe" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -258) (undo-tree-id18 . -6) (undo-tree-id19 . -6) 264) nil (25898 21392 546655 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 258 283 #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil))) nil (25898 21392 546654 112000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -283) (283 . 284) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -283) (283 . 284) (282 . 284)) nil (25898 21392 546653 621000) 0 nil])
([nil nil ((284 . 287) (283 . 285) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -283) (283 . 284)) nil (25898 21392 546652 720000) 0 nil])
([nil nil ((287 . 288)) nil (25898 21392 546652 89000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -283) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("G" 0 1 (fontified t)) . -284) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("e" 0 1 (fontified t)) . -285) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("t" 0 1 (fontified t)) . -286) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t)) . -287) (undo-tree-id16 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -288) (undo-tree-id17 . -1) 289) nil (25898 21392 546651 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 315 . 316) (nil fontified nil 283 . 316) (283 . 316) 282) nil (25898 21392 546646 217000) 0 nil])
([nil nil ((318 . 321)) nil (25898 21392 546645 496000) 0 nil])
([nil nil ((321 . 327)) nil (25898 21392 546645 226000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil)) (321 . 346) (#("AllowedHeaders: ${1:[]string}," 0 30 (fontified nil)) . 321) (321 . 351) (#("Allowe" 0 6 (fontified nil)) . 321) (321 . 327) (#("AllowedHeaders" 0 14 (fontified nil)) . -321) (321 . 335) (#("Allowe" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -321) (undo-tree-id2 . -6) (undo-tree-id3 . -6) 327) nil (25898 21392 546644 554000) 0 nil])
([nil nil ((apply yas--snippet-revive 321 346 #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil))) nil (25898 21392 546634 796000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -346) (346 . 347) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -346) (346 . 347) (345 . 347)) nil (25898 21392 546634 235000) 0 nil])
([nil nil ((347 . 348) (346 . 348) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -346) (346 . 347)) nil (25898 21392 546630 77000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (fontified nil)) . 357) (undo-tree-id93 . -1) (356 . 359) (t 25898 21392 647554 294000)) nil (25898 21474 84134 578000) 0 nil])
([nil nil ((359 . 378)) nil (25898 21474 84133 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 375 386 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (375 . 386) (#("NewRouter()" 0 11 (fontified nil)) . 375) (375 . 386) (#("New" 0 3 (fontified nil)) . 375) (375 . 378) (#("NewRouter" 0 9 (fontified nil)) . -375) (375 . 384) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -375) (undo-tree-id91 . -3) (undo-tree-id92 . -3) 378) nil (25898 21474 84133 135000) 0 nil])
([nil nil ((388 . 389) (#("	" 0 1 (fontified nil)) . 387) (undo-tree-id90 . -1) (386 . 389)) nil (25898 21474 84131 943000) 0 nil])
([nil nil ((387 . 388)) nil (25898 21474 84131 312000) 0 nil])
([nil nil ((388 . 391)) nil (25898 21474 84130 991000) 0 nil])
([nil nil ((apply yas--snippet-revive 388 396 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (388 . 396) (#("v1Router" 0 8 (fontified nil)) . 388) (388 . 396) (#("v1R" 0 3 (fontified nil)) . 388) (388 . 391) (#("v1Router" 0 8 (fontified nil)) . -388) (388 . 396) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -388) (undo-tree-id88 . -3) (undo-tree-id89 . -3) 391) nil (25898 21474 84130 39000) 0 nil])
([nil nil ((396 . 397)) nil (25898 21474 84127 304000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -388) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("1" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -389) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -390) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -391) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -392) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -393) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -394) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -395) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("." 0 1 (fontified t)) . -396) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 397) nil (25898 21474 84125 611000) 0 nil])
([nil nil ((388 . 393)) nil (25898 21474 84119 339000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil)) (390 . 433) (#("Mount(${1:pattern string}, ${2:handler http.Handler})" 0 53 (fontified nil)) . 390) (390 . 443) (#("Mou" 0 3 (fontified nil)) . 390) (390 . 393) (#("Mount" 0 5 (fontified nil)) . -390) (390 . 395) (#("Mou" 0 3 (face tree-sitter-hl-face:property fontified t)) . -390) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 393) nil (25898 21474 84118 457000) 0 nil])
([nil nil ((397 . 399) (396 . 398) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -396) (undo-tree-id66 . -1) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 397) (undo-tree-id67 . -14) (396 . 397)) nil (25898 21474 84116 894000) 0 nil])
([nil nil ((397 . 398)) nil (25898 21474 84115 41000) 0 nil])
([nil nil ((404 . 406) (#("handler http.Handler" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 12 (face tree-sitter-hl-face:variable fontified nil) 12 13 (fontified nil) 13 20 (face tree-sitter-hl-face:property fontified nil)) . 404) (undo-tree-id65 . -20) (403 . 404)) nil (25898 21474 84114 79000) 0 nil])
([nil nil ((apply yas--snippet-revive 403 411 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (403 . 411) (#("v1Router" 0 8 (fontified nil)) . 403) (undo-tree-id59 . -8) (403 . 411) (#("v1R" 0 3 (fontified nil)) . 403) (undo-tree-id60 . -3) (403 . 406) (#("v1Router" 0 8 (fontified nil)) . -403) (undo-tree-id61 . -8) (403 . 411) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -403) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) 406) nil (25898 21474 84111 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 390 412 #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil))) nil (25898 21474 84097 869000) 0 nil])
([nil nil ((414 . 415) (#("	" 0 1 (fontified nil)) . 413) (undo-tree-id181 . -1) (412 . 415) (t 25898 21474 184219 527000)) nil (25898 21522 266535 715000) 0 nil])
([nil nil ((415 . 424)) nil (25898 21522 266534 382000) 0 nil])
([nil nil ((23 . 35) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil)) (420 . 469) (#("ListenAndServe(${1:addr string}, ${2:handler http.Handler})" 0 59 (fontified nil)) . 420) (420 . 479) (#("List" 0 4 (fontified nil)) . 420) (420 . 424) (#("ListenAndServe" 0 14 (fontified nil)) . -420) (420 . 434) (#("List" 0 4 (face tree-sitter-hl-face:property fontified t)) . -420) (undo-tree-id179 . -4) (undo-tree-id180 . -4) 424) nil (25898 21522 266533 390000) 0 nil])
([nil nil ((448 . 451) (#("addr string" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 11 (face tree-sitter-hl-face:variable fontified nil)) . 448) (447 . 448)) nil (25898 21522 266531 236000) 0 nil])
([nil nil ((apply yas--snippet-revive 432 474 #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil))) nil (25898 21522 266530 455000) 0 nil])
([nil nil ((160 . 168)) nil (25898 21522 266529 783000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -461) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -462) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -463) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -464) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -465) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -466) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -467) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -468) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -469) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -470) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -471) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -472) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("." 0 1 (fontified t)) . -473) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("H" 0 1 (face tree-sitter-hl-face:property fontified t)) . -474) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -475) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -476) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -477) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -478) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -479) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -480) (undo-tree-id178 . -1) 481) nil (25898 21522 266526 607000) 0 nil])
([nil nil ((461 . 462)) nil (25898 21522 266408 594000) 0 nil])
([nil nil ((435 . 442) (t 25898 21522 365657 812000)) nil (25898 21547 141543 517000) 0 nil])
([nil nil ((472 . 480)) nil (25898 21547 141542 905000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -478) (undo-tree-id200 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -479) (undo-tree-id201 . -1) 480) nil (25898 21547 141542 194000) 0 nil])
([nil nil ((478 . 480)) nil (25898 21547 141540 421000) 0 nil])
([nil nil ((23 . 30) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil)) (476 . 493) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 476) (476 . 498) (#("Prin" 0 4 (fontified nil)) . 476) (476 . 480) (#("Println" 0 7 (fontified nil)) . -476) (476 . 483) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -476) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -3) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) 480) nil (25898 21547 141539 409000) 0 nil])
([nil nil ((492 . 494) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 492) (undo-tree-id182 . -8) (undo-tree-id183 . -5) (undo-tree-id184 . -6) (491 . 492)) nil (25898 21547 141532 626000) 0 nil])
([nil nil ((apply yas--snippet-revive 483 495 #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil))) nil (25898 21547 141521 325000) 0 nil])
([nil nil ((441 . 442) (#("	" 0 1 (fontified nil)) . 440) (undo-tree-id288 . -1) (439 . 442) (t 25898 21547 186894 265000)) nil (25898 41465 951032 483000) 0 nil])
([nil nil ((442 . 445)) nil (25898 41465 951031 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 442 450 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (442 . 450) (#("v1Router" 0 8 (fontified nil)) . 442) (442 . 450) (#("v1R" 0 3 (fontified nil)) . 442) (442 . 445) (#("v1Router" 0 8 (fontified nil)) . -442) (442 . 450) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -442) (undo-tree-id286 . -3) (undo-tree-id287 . -3) 445) nil (25898 41465 951030 289000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -455) (455 . 456) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -455) (455 . 456) (450 . 456)) nil (25898 41465 951027 854000) 0 nil])
([nil nil ((455 . 457) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -455) (455 . 456)) nil (25898 41465 951026 351000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -450) (undo-tree-id285 . -1) 451) nil (25898 41465 951025 429000) 0 nil])
([nil nil ((450 . 451)) nil (25898 41465 951024 548000) 0 nil])
([nil nil ((456 . 466)) nil (25898 41465 951024 117000) 0 nil])
([nil nil ((467 . 469)) nil (25898 41465 951023 666000) 0 nil])
([nil nil ((133 . 135)) nil (25898 41465 951023 275000) 0 nil])
([nil nil ((135 . 149)) nil (25898 41465 951022 654000) 0 nil])
([nil nil ((#("c" 0 1 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t)) . -143) (undo-tree-id284 . -1) 144) nil (25898 41465 951021 973000) 0 nil])
([nil nil ((143 . 144)) nil (25898 41465 951020 951000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -157) (157 . 158) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -157) (157 . 158) (149 . 158)) nil (25898 41465 951020 260000) 0 nil])
([nil nil ((157 . 169)) nil (25898 41465 951019 558000) 0 nil])
([nil nil ((apply yas--snippet-revive 164 178 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (164 . 178) (#("ResponseWriter" 0 14 (fontified nil)) . 164) (164 . 178) (#("Respo" 0 5 (fontified nil)) . 164) (164 . 169) (#("ResponseWriter" 0 14 (fontified nil)) . -164) (164 . 178) (#("Respo" 0 5 (face tree-sitter-hl-face:type fontified t)) . -164) (undo-tree-id282 . -5) (undo-tree-id283 . -5) 169) nil (25898 41465 951018 617000) 0 nil])
([nil nil ((178 . 188)) nil (25898 41465 951016 573000) 0 nil])
([nil nil ((188 . 191)) nil (25898 41465 951016 172000) 0 nil])
([nil nil ((apply yas--snippet-revive 188 195 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (188 . 195) (#("Request" 0 7 (fontified nil)) . 188) (188 . 195) (#("Req" 0 3 (fontified nil)) . 188) (188 . 191) (#("Request" 0 7 (fontified nil)) . -188) (188 . 195) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -188) (undo-tree-id280 . -3) (undo-tree-id281 . -3) 191) nil (25898 41465 951015 280000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -198) (198 . 199) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -198) (198 . 199) (196 . 199)) nil (25898 41465 951013 16000) 0 nil])
([nil nil ((199 . 200) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 199) (199 . 200) (198 . 200)) nil (25898 41465 951012 134000) 0 nil])
([nil nil ((200 . 206)) nil (25898 41465 951010 952000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 249 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (28 . 53) (29 . 32) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . 206) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . -206) (206 . 221)) nil (25898 41465 951010 371000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -250) (250 . 251) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -250) (250 . 251) (249 . 251)) nil (25898 41465 951008 928000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -246) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("O" 0 1 (face tree-sitter-hl-face:property fontified t)) . -247) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -248) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -249) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . 1) (undo-tree-id275 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -250) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . 1) (undo-tree-id279 . -1) 251) nil (25898 41465 951007 295000) 0 nil])
([nil nil ((246 . 247)) nil (25898 41465 951001 524000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil)) (234 . 303) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 234) (234 . 319) (#("RespondWithJS" 0 13 (fontified nil)) . 234) (234 . 247) (#("RespondWithJSON" 0 15 (fontified nil)) . -234) (234 . 249) (#("RespondWithJS" 0 13 (face tree-sitter-hl-face:property fontified t)) . -234) (undo-tree-id263 . -13) (undo-tree-id264 . -13) 247) nil (25898 41465 951000 462000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 251) (250 . 251)) nil (25898 41465 950998 449000) 0 nil])
([nil nil ((254 . 256) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 254) (253 . 254)) nil (25898 41465 950997 928000) 0 nil])
([nil nil ((259 . 263) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 259) (258 . 259)) nil (25898 41465 950997 196000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -262) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 263) nil (25898 41465 950996 64000) 0 nil])
([nil nil ((262 . 263)) nil (25898 41465 950994 852000) 0 nil])
([nil nil ((#("J" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -258) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -259) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -260) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("N" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -261) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("." 0 1 (fontified t)) . -262) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 263) nil (25898 41465 950993 700000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 259 #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil))) nil (25898 41465 950989 221000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -259) (259 . 260) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -259) (259 . 260) (258 . 260)) nil (25898 41465 950988 390000) 0 nil])
([nil nil ((259 . 263)) nil (25898 41465 950987 197000) 0 nil])
([nil nil ((268 . 270) (267 . 269) (#("\"" 0 1 (fontified nil)) . -267) (263 . 268)) nil (25898 41465 950986 576000) 0 nil])
([nil nil ((258 . 263)) nil (25898 41465 950985 514000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -260) (undo-tree-id248 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -261) (undo-tree-id249 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -262) (undo-tree-id250 . -1) 263) nil (25898 41465 950984 693000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -265) (265 . 266) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -265) (265 . 266) (260 . 266)) nil (25898 41465 950981 977000) 0 nil])
([nil nil ((265 . 273)) nil (25898 41465 950981 26000) 0 nil])
([nil nil ((273 . 274)) nil (25898 41465 950980 334000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -271) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -272) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -273) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 274) nil (25898 41465 950978 711000) 0 nil])
([nil nil ((271 . 278)) nil (25898 41465 950949 706000) 0 nil])
([nil nil ((296 . 298) (t 25898 41465 958631 179000)) nil (25898 41664 498108 753000) 0 nil])
([nil nil ((298 . 315)) nil (25898 41664 498108 272000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -316) (316 . 317) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -316) (316 . 317) (315 . 317)) nil (25898 41664 498107 671000) 0 nil])
([nil nil ((316 . 326)) nil (25898 41664 498106 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 323 337 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (323 . 337) (#("ResponseWriter" 0 14 (fontified nil)) . 323) (323 . 337) (#("Res" 0 3 (fontified nil)) . 323) (323 . 326) (#("ResponseWriter" 0 14 (fontified nil)) . -323) (323 . 337) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -323) (undo-tree-id682 . -3) (undo-tree-id683 . -3) 326) nil (25898 41664 498105 837000) 0 nil])
([nil nil ((337 . 341)) nil (25898 41664 498104 144000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -340) (undo-tree-id681 . -1) 341) nil (25898 41664 498103 493000) 0 nil])
([nil nil ((340 . 342)) nil (25898 41664 498102 571000) 0 nil])
([nil nil ((342 . 352)) nil (25898 41664 498102 50000) 0 nil])
([nil nil ((apply yas--snippet-revive 347 354 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (347 . 354) (#("Request" 0 7 (fontified nil)) . 347) (347 . 354) (#("Reque" 0 5 (fontified nil)) . 347) (347 . 352) (#("Request" 0 7 (fontified nil)) . -347) (347 . 354) (#("Reque" 0 5 (face tree-sitter-hl-face:type fontified t)) . -347) (undo-tree-id679 . -5) (undo-tree-id680 . -5) 352) nil (25898 41664 498101 329000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -357) (357 . 358) (#("}" 0 1 (fontified nil)) . -357) (357 . 358) (355 . 358)) nil (25898 41664 498098 603000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 358) (358 . 359) (357 . 359)) nil (25898 41664 498097 501000) 0 nil])
([nil nil ((359 . 365)) nil (25898 41664 498096 540000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil)) (365 . 426) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 365) (365 . 441) (#("RespondWithError" 0 16 (fontified nil)) . -365) (365 . 381)) nil (25898 41664 498095 989000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 383) (382 . 383)) nil (25898 41664 498095 327000) 0 nil])
([nil nil ((386 . 388) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 386) (385 . 386)) nil (25898 41664 498094 616000) 0 nil])
([nil nil ((391 . 397) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 391) (390 . 391)) nil (25898 41664 498093 624000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -398) (398 . 399) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -398) (398 . 399) (397 . 399)) nil (25898 41664 498092 943000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -394) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 395) nil (25898 41664 498091 660000) 0 nil])
([nil nil ((397 . 409)) nil (25898 41664 498090 909000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -411) (411 . 412) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -411) (411 . 412) (410 . 412)) nil (25898 41664 498090 408000) 0 nil])
([nil nil ((419 . 432) (418 . 420) (#("\"" 0 1 (fontified nil)) . -418) (411 . 419)) nil (25898 41664 498089 456000) 0 nil])
([nil nil ((432 . 440)) nil (25898 41664 498088 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 365 443 #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil))) nil (25898 41664 498088 13000) 0 nil])
([nil nil ((396 . 397)) nil (25898 41664 498087 492000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -396) (undo-tree-id676 . -1) 397) nil (25898 41664 498086 671000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -397) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -398) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -399) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -400) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -401) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#(" " 0 1 (fontified t)) . -402) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -403) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -404) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -405) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -406) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -407) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -408) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -409) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -410) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -411) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -412) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -413) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -414) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -415) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#(":" 0 1 (fontified t)) . -416) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id675 . -1) 418) nil (25898 41664 498081 782000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -390) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -391) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -392) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -393) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -394) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("t" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -395) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -396) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 397) nil (25898 41664 498003 664000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -413) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . 1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 414) nil (25898 41664 497755 54000) 0 nil])
([nil nil ((752 . 755) (t 25898 41664 505415 95000)) nil (25898 41707 859889 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 752 768 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (752 . 768) (#("readinessHandler" 0 16 (fontified nil)) . 752) (752 . 768) (#("rea" 0 3 (fontified nil)) . 752) (752 . 755) (#("readinessHandler" 0 16 (fontified nil)) . -752) (752 . 768) (#("rea" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -752) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 755) nil (25898 41707 859887 878000) 0 nil])
([nil nil ((769 . 771)) nil (25898 41707 859885 193000) 0 nil])
([nil nil ((771 . 774)) nil (25898 41707 859884 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 771 779 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (771 . 779) (#("v1Router" 0 8 (fontified nil)) . 771) (771 . 779) (#("v1R" 0 3 (fontified nil)) . 771) (771 . 774) (#("v1Router" 0 8 (fontified nil)) . -771) (771 . 779) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -771) (undo-tree-id700 . -3) (undo-tree-id701 . -3) 774) nil (25898 41707 859883 510000) 0 nil])
([nil nil ((779 . 780)) nil (25898 41707 859880 624000) 0 nil])
([nil nil ((780 . 781)) nil (25898 41707 859879 953000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -784) (784 . 785) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -784) (784 . 785) (781 . 785)) nil (25898 41707 859878 951000) 0 nil])
([nil nil ((785 . 789) (784 . 786) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -784) (784 . 785)) nil (25898 41707 859877 358000) 0 nil])
([nil nil ((790 . 797)) nil (25898 41707 859875 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 792 804 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (792 . 804) (#("errorHandler" 0 12 (fontified nil)) . 792) (792 . 804) (#("error" 0 5 (fontified nil)) . 792) (792 . 797) (#("errorHandler" 0 12 (fontified nil)) . -792) (792 . 804) (#("error" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -792) (undo-tree-id684 . -5) (undo-tree-id685 . -5) (undo-tree-id686 . -2) (undo-tree-id687 . -3) (undo-tree-id688 . -4) (undo-tree-id689 . -5) (undo-tree-id690 . -5) (undo-tree-id691 . -5) (undo-tree-id692 . -5) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -5) (undo-tree-id696 . -5) (undo-tree-id697 . -5) (undo-tree-id698 . -5) (undo-tree-id699 . -5) 797) nil (25898 41707 859872 469000) 0 nil])
([nil nil ((475 . 477) (t 25898 41707 867817 8000)) nil (25898 41855 150390 421000) 0 nil])
([nil nil ((477 . 481)) nil (25898 41855 150390 121000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -477) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -478) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -479) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -480) (undo-tree-id756 . -1) (undo-tree-id757 . -1) 481) nil (25898 41855 150389 419000) 0 nil])
([nil nil ((454 . 457)) nil (25898 41855 150385 702000) 0 nil])
([nil nil ((480 . 490)) nil (25898 41855 150385 211000) 0 nil])
([nil nil ((490 . 496)) nil (25898 41855 150384 680000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -494) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -495) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 496) nil (25898 41855 150384 129000) 0 nil])
([nil nil ((494 . 504)) nil (25898 41855 150382 206000) 0 nil])
([nil nil ((75 . 86) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil)) (501 . 515) (#("Atoi(${1:s string})" 0 19 (fontified nil)) . 501) (501 . 520) (#("Ato" 0 3 (fontified nil)) . 501) (501 . 504) (#("Atoi" 0 4 (fontified nil)) . -501) (501 . 505) (#("Ato" 0 3 (face tree-sitter-hl-face:property fontified t)) . -501) (undo-tree-id744 . -3) (undo-tree-id745 . -3) 504) nil (25898 41855 150381 344000) 0 nil])
([nil nil ((518 . 521) (#("s string" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 8 (face tree-sitter-hl-face:variable fontified nil)) . 518) (517 . 518)) nil (25898 41855 150379 70000) 0 nil])
([nil nil ((apply yas--snippet-revive 517 524 #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (517 . 524) (#("portStr" 0 7 (fontified nil)) . 517) (517 . 524) (#("port" 0 4 (fontified nil)) . 517) (517 . 521) (#("portStr" 0 7 (fontified nil)) . -517) (517 . 524) (#("port" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -517) (undo-tree-id742 . -4) (undo-tree-id743 . -4) 521) nil (25898 41855 150378 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 512 525 #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil))) nil (25898 41855 150376 174000) 0 nil])
([nil nil ((525 . 527)) nil (25898 41855 150375 884000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -530) (530 . 531) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -530) (530 . 531) (527 . 531)) nil (25898 41855 150374 882000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -529) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . 1) (undo-tree-id738 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -530) (undo-tree-id739 . -1) (undo-tree-id740 . 1) (undo-tree-id741 . -1) 531) nil (25898 41855 150374 60000) 0 nil])
([nil nil ((529 . 541)) nil (25898 41855 150370 944000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -542) (542 . 543) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -542) (542 . 543) (541 . 543)) nil (25898 41855 150370 233000) 0 nil])
([nil nil ((543 . 545) (544 . 545) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 543) (543 . 545) (542 . 544)) nil (25898 41855 150369 41000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150367 999000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -545) (undo-tree-id728 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -546) (undo-tree-id729 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -547) (undo-tree-id730 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -548) (undo-tree-id731 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -549) (undo-tree-id732 . -1) (#("n" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -550) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t)) . -551) (undo-tree-id734 . -1) 552) nil (25898 41855 150366 857000) 0 nil])
([nil nil ((545 . 551)) nil (25898 41855 150363 290000) 0 nil])
([nil nil ((542 . 545)) nil (25898 41855 150363 79000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150362 729000) 0 nil])
([nil nil ((552 . 553)) nil (25898 41855 150362 188000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil)) (549 . 566) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 549) (549 . 571) (#("Prin" 0 4 (fontified nil)) . 549) (549 . 553) (#("Println" 0 7 (fontified nil)) . -549) (549 . 556) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -549) (undo-tree-id726 . -4) (undo-tree-id727 . -4) 553) nil (25898 41855 150361 256000) 0 nil])
([nil nil ((558 . 563) (557 . 559) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -557) (undo-tree-id724 . -1) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 558) (undo-tree-id725 . -8) (557 . 558)) nil (25898 41855 150359 102000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:string fontified t)) . -558) (undo-tree-id719 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -559) (undo-tree-id720 . -1) (#("v" 0 1 (face tree-sitter-hl-face:string fontified t)) . -560) (undo-tree-id721 . -1) (#("i" 0 1 (face tree-sitter-hl-face:string fontified t)) . -561) (undo-tree-id722 . -1) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -562) (undo-tree-id723 . -1) 563) nil (25898 41855 150356 938000) 0 nil])
([nil nil ((558 . 561)) nil (25898 41855 150354 714000) 0 nil])
([nil nil ((561 . 581)) nil (25898 41855 150354 373000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:string fontified t)) . -578) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -579) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -580) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 581) nil (25898 41855 150353 421000) 0 nil])
([nil nil ((578 . 591)) nil (25898 41855 150339 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 549 593 #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil))) nil (25898 41855 150336 970000) 0 nil])
([nil nil ((#("	port, err := strconv.Atoi(portStr)
	if err != nil {
		fmt.Println(\"Invalid port value in environment\")
		return
	}
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:variable fontified t) 5 7 (fontified t) 7 10 (face tree-sitter-hl-face:variable fontified t) 10 11 (fontified t) 11 13 (face tree-sitter-hl-face:operator fontified t) 13 14 (fontified t) 14 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (fontified t) 22 26 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 39 (face tree-sitter-hl-face:keyword fontified t) 39 40 (fontified t) 40 43 (face tree-sitter-hl-face:variable fontified t) 43 44 (fontified t) 44 46 (face tree-sitter-hl-face:operator fontified t) 46 47 (fontified t) 47 50 (face tree-sitter-hl-face:constant\.builtin fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 55 (fontified t) 55 58 (face tree-sitter-hl-face:variable fontified t) 58 59 (fontified t) 59 66 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 66 67 (face (rainbow-delimiters-depth-3-face) fontified t) 67 102 (face tree-sitter-hl-face:string fontified t) 102 103 (face (rainbow-delimiters-depth-3-face) fontified t) 103 104 (fontified t) 104 106 (fontified t) 106 112 (face tree-sitter-hl-face:keyword fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 116 (fontified t)) . 490) (undo-tree-id788 . 13) (undo-tree-id789 . -115) (undo-tree-id790 . -114) (undo-tree-id791 . -114) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -67) (undo-tree-id796 . 15) (undo-tree-id797 . -1) (undo-tree-id798 . -115) (undo-tree-id799 . -115) (undo-tree-id800 . -114) (undo-tree-id801 . -114) (undo-tree-id802 . -114) (undo-tree-id803 . -114) (undo-tree-id804 . -114) (undo-tree-id805 . -114) (undo-tree-id806 . -116) (undo-tree-id807 . -1) (undo-tree-id808 . -114) (undo-tree-id809 . -114) (undo-tree-id810 . -114) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -5) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -116) 491 (t 25898 41855 159207 708000)) nil (25898 41909 750665 796000) 0 nil])
([nil nil ((#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -465) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -466) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -467) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 468) nil (25898 41909 750650 767000) 0 nil])
([nil nil ((846 . 850) (t 25898 41909 850732 655000)) nil (25898 41960 226841 431000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil)) (850 . 890) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 850) (850 . 900) (#("FormatString" 0 12 (fontified nil)) . -850) (850 . 862)) nil (25898 41960 226840 789000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -865) (865 . 866) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -865) (864 . 866) (863 . 865) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -863) (#("state fmt.State" 0 5 (face tree-sitter-hl-face:variable fontified nil) 5 6 (fontified nil) 6 9 (face tree-sitter-hl-face:variable fontified nil) 9 10 (fontified nil) 10 15 (face tree-sitter-hl-face:property fontified nil)) . 864) (863 . 864)) nil (25898 41960 226839 968000) 0 nil])
([nil nil ((865 . 867)) nil (25898 41960 226838 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 880 #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil))) nil (25898 41960 226838 375000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -879) (undo-tree-id855 . -1) (undo-tree-id856 . 1) (undo-tree-id857 . -1) 880) nil (25898 41960 226837 633000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -869) (undo-tree-id845 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -870) (undo-tree-id846 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -871) (undo-tree-id847 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -872) (undo-tree-id848 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -873) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t)) . -874) (undo-tree-id850 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -875) (undo-tree-id851 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -876) (undo-tree-id852 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -877) (undo-tree-id853 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -878) (undo-tree-id854 . -1) 879) nil (25898 41960 226835 139000) 0 nil])
([nil nil ((873 . 874) (#(")" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -873) (873 . 874)) nil (25898 41960 226830 841000) 0 nil])
([nil nil ((869 . 870)) nil (25898 41960 226830 239000) 0 nil])
([nil nil ((#("F" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -850) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -851) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -852) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("m" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -853) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -854) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -855) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("S" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -856) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -857) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -858) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -859) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -860) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("g" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -861) (undo-tree-id844 . -1) 862) nil (25898 41960 226828 656000) 0 nil])
([nil nil ((850 . 851)) nil (25898 41960 226819 980000) 0 nil])
([nil nil ((#("S" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -850) (undo-tree-id821 . -1) 851) nil (25898 41960 226819 409000) 0 nil])
([nil nil ((850 . 856)) nil (25898 41960 226818 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 857 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (850 . 857) (#("Sprintf" 0 7 (fontified nil)) . 850) (850 . 857) (#("Sprint" 0 6 (fontified nil)) . 850) (850 . 856) (#("Sprintf" 0 7 (fontified nil)) . -850) (850 . 857) (#("Sprint" 0 6 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -850) (undo-tree-id819 . -6) (undo-tree-id820 . -6) 856) nil (25898 41960 226815 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -76) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#("	" 0 1 (fontified t)) . -77) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("\"" 0 1 (fontified t)) . -78) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("s" 0 1 (fontified t)) . -79) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("t" 0 1 (fontified t)) . -80) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("r" 0 1 (fontified t)) . -81) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("c" 0 1 (fontified t)) . -82) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("o" 0 1 (fontified t)) . -83) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("n" 0 1 (fontified t)) . -84) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("v" 0 1 (fontified t)) . -85) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -86) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 87 (t 25898 41960 235219 738000)) nil (25898 41972 165178 607000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -280) (280 . 281) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -280) (280 . 281) (279 . 281) (#("`" 0 1 (fontified nil)) . -279) (278 . 280) (t 25898 41972 266336 502000)) nil (25898 42330 501339 211000) 0 nil])
([nil nil ((280 . 281)) nil (25898 42330 501337 768000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:string fontified t)) . -280) (undo-tree-id912 . -1) 281) nil (25898 42330 501336 957000) 0 nil])
([nil nil ((286 . 292) (285 . 287) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -285) (280 . 286)) nil (25898 42330 501335 524000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -265) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 266) nil (25898 42330 501333 991000) 0 nil])
([nil nil ((265 . 266)) nil (25898 42330 501317 49000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -296) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) 297 (t 25898 42330 601876 267000)) nil (25898 42334 368739 942000) 0 nil])
([nil nil ((296 . 297)) nil (25898 42334 368729 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 41 . 42) (nil fontified nil 14 . 42) (14 . 42) (t 25898 42334 470915 3000)) nil (25898 61691 716472 253000) 0 nil])
([nil nil ((460 . 462) (t 25898 61691 723747 897000)) nil (25898 62106 595066 67000) 0 nil])
([nil nil ((nil rear-nonsticky nil 509 . 510) (nil fontified nil 462 . 510) (462 . 510)) nil (25898 62106 595060 829000) 0 nil])
([nil nil ((187 . 189) (t 25898 62106 602508 74000)) nil (25898 62175 471214 347000) 0 nil])
([nil nil ((189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25898 62175 471211 973000) 0 nil])
([nil nil ((190 . 193)) nil (25898 62175 471210 17000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -191) (undo-tree-id32 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -192) (undo-tree-id33 . -1) 193) nil (25898 62175 471207 712000) 0 nil])
([nil nil ((191 . 207)) nil (25898 62175 471204 360000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -187) (undo-tree-id11 . -1) (#("	" 0 1 (fontified t)) . -188) (undo-tree-id12 . -1) (#("\"" 0 1 (fontified t)) . -189) (undo-tree-id13 . -1) (#("i" 0 1 (fontified t)) . -190) (undo-tree-id14 . -1) (#("n" 0 1 (fontified t)) . -191) (undo-tree-id15 . -1) (#("t" 0 1 (fontified t)) . -192) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t)) . -193) (undo-tree-id17 . -1) (#("r" 0 1 (fontified t)) . -194) (undo-tree-id18 . -1) (#("n" 0 1 (fontified t)) . -195) (undo-tree-id19 . -1) (#("a" 0 1 (fontified t)) . -196) (undo-tree-id20 . -1) (#("l" 0 1 (fontified t)) . -197) (undo-tree-id21 . -1) (#("/" 0 1 (fontified t)) . -198) (undo-tree-id22 . -1) (#("d" 0 1 (fontified t)) . -199) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -200) (undo-tree-id24 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t)) . -202) (undo-tree-id26 . -1) (#("b" 0 1 (fontified t)) . -203) (undo-tree-id27 . -1) (#("a" 0 1 (fontified t)) . -204) (undo-tree-id28 . -1) (#("s" 0 1 (fontified t)) . -205) (undo-tree-id29 . -1) (#("e" 0 1 (fontified t)) . -206) (undo-tree-id30 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -207) (undo-tree-id31 . -1) 208) nil (25898 62175 471200 100000) 0 nil])
([nil nil ((187 . 189) 170) nil (25898 62175 471188 995000) 0 nil])
([nil nil ((190 . 196) (189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25898 62175 471187 109000) 0 nil])
([nil nil ((apply yas--snippet-revive 190 209 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (190 . 209) (#("go-blog-aggregator/" 0 19 (fontified nil)) . 190) (190 . 209) (#("go-blo" 0 3 (fontified nil face tree-sitter-hl-face:string) 3 6 (fontified nil)) . 190) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (193 . 196) (#("go-blog-aggregator/" 0 19 (fontified nil)) . -193) (193 . 212) (#("blo" 0 3 (fontified t face tree-sitter-hl-face:string)) . -193) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 196) nil (25898 62175 471183 757000) 0 nil])
([nil nil ((209 . 212)) nil (25898 62175 471179 566000) 0 nil])
([nil nil ((apply yas--snippet-revive 209 218 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (209 . 218) (#("internal/" 0 9 (fontified nil)) . 209) (209 . 218) (#("int" 0 3 (fontified nil)) . 209) (209 . 212) (#("internal/" 0 9 (fontified nil)) . -209) (209 . 218) (#("int" 0 3 (fontified t face tree-sitter-hl-face:string)) . -209) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 212) nil (25898 62175 471177 192000) 0 nil])
([nil nil ((218 . 220)) nil (25898 62175 471173 351000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -219) (undo-tree-id4 . -1) 220) nil (25898 62175 471171 465000) 0 nil])
([nil nil ((219 . 220)) nil (25898 62175 471168 601000) 0 nil])
([nil nil ((220 . 221)) nil (25898 62175 471166 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 218 226 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (218 . 226) (#("database" 0 8 (fontified nil)) . 218) (218 . 226) (#("dat" 0 3 (fontified nil)) . 218) (218 . 221) (#("database" 0 8 (fontified nil)) . -218) (218 . 226) (#("dat" 0 3 (fontified t face tree-sitter-hl-face:string)) . -218) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -2) (undo-tree-id3 . -3) 221) nil (25898 62175 471161 827000) 0 nil])
([nil nil ((611 . 612) (#("	" 0 1 (fontified nil)) . 610) (undo-tree-id56 . -1) (609 . 612) (t 25898 62175 479642 304000)) nil (25898 62218 574933 400000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -611) (undo-tree-id55 . -1) 612) nil (25898 62218 574931 26000) 0 nil])
([nil nil ((nil rear-nonsticky nil 648 . 649) (nil fontified nil 611 . 649) (611 . 649)) nil (25898 62218 574928 721000) 0 nil])
([nil nil ((611 . 613)) nil (25898 62218 574926 346000) 0 nil])
([nil nil ((611 . 612) (#("	" 0 1 (fontified nil)) . 610) (610 . 611) (610 . 611)) nil (25898 62218 574924 531000) 0 nil])
([nil nil ((612 . 617)) nil (25898 62218 574922 156000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -615) (undo-tree-id53 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -616) (undo-tree-id54 . -1) 617) nil (25898 62218 574919 781000) 0 nil])
([nil nil ((615 . 616)) nil (25898 62218 574917 407000) 0 nil])
([nil nil ((616 . 627)) nil (25898 62218 574915 521000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 631 637 nil nil nil t nil)) nil 3 nil #s(yas--field 1 631 637 nil nil nil t nil) nil nil)) (624 . 642) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 624) (624 . 647) (#("Get" 0 3 (fontified nil)) . 624) (624 . 627) (#("Getenv" 0 6 (fontified nil)) . -624) (624 . 630) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -624) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) 627) nil (25898 62218 574912 588000) 0 nil])
([nil nil ((631 . 633) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -631) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 632) (undo-tree-id37 . -10) (undo-tree-id38 . -4) (undo-tree-id39 . -5) (631 . 632)) nil (25898 62218 574905 324000) 0 nil])
([nil nil ((632 . 636)) nil (25898 62218 574894 429000) 0 nil])
([nil nil ((apply yas--snippet-revive 624 638 #s(yas--snippet nil (#s(yas--field 1 631 637 nil nil nil t nil)) nil 3 nil #s(yas--field 1 631 637 nil nil nil t nil) nil nil))) nil (25898 62218 574889 750000) 0 nil])
([nil nil ((227 . 229) (t 25898 62218 583100 919000)) nil (25898 62231 352229 181000) 0 nil])
([nil nil ((230 . 235) (229 . 231) (#("\"" 0 1 (fontified nil)) . -229) (229 . 230)) nil (25898 62231 352227 226000) 0 nil])
([nil nil ((apply yas--snippet-revive 230 239 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (230 . 239) (#("database/" 0 9 (fontified nil)) . 230) (230 . 239) (#("datab" 0 5 (fontified nil)) . 230) (230 . 235) (#("database/" 0 9 (fontified nil)) . -230) (230 . 239) (#("datab" 0 5 (fontified t face tree-sitter-hl-face:string)) . -230) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -1) (undo-tree-id60 . -2) (undo-tree-id61 . -3) (undo-tree-id62 . -4) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) 235) nil (25898 62231 352223 804000) 0 nil])
([nil nil ((239 . 242)) nil (25898 62231 352171 4000) 0 nil])
([nil nil ((697 . 698) (#("	" 0 1 (fontified nil)) . 696) (undo-tree-id81 . -1) (695 . 698) (t 25898 62231 359940 497000)) nil (25898 62293 715026 696000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -697) (undo-tree-id80 . -1) 698) nil (25898 62293 715024 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 725 . 726) (nil fontified nil 697 . 726) (697 . 726)) nil (25898 62293 715022 366000) 0 nil])
([nil nil ((697 . 699)) nil (25898 62293 715020 410000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -695) (undo-tree-id79 . -1) 696) nil (25898 62293 715018 454000) 0 nil])
([nil nil ((727 . 729)) nil (25898 62293 715016 569000) 0 nil])
([nil nil ((729 . 730)) nil (25898 62293 715014 124000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -729) (undo-tree-id78 . -1) 730) nil (25898 62293 715012 239000) 0 nil])
([nil nil ((729 . 738)) nil (25898 62293 715009 864000) 0 nil])
([nil nil ((738 . 741)) nil (25898 62293 715008 467000) 0 nil])
([nil nil ((apply yas--snippet-revive 738 747 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (738 . 747) (#("apiConfig" 0 9 (fontified nil)) . 738) (738 . 747) (#("api" 0 3 (fontified nil)) . 738) (738 . 741) (#("apiConfig" 0 9 (fontified nil)) . -738) (738 . 747) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -738) (undo-tree-id76 . -3) (undo-tree-id77 . -3) 741) nil (25898 62293 715005 674000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -748) (748 . 749) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -748) (748 . 749) (747 . 749)) nil (25898 62293 715002 251000) 0 nil])
([nil nil ((749 . 751)) nil (25898 62293 714999 877000) 0 nil])
([nil nil ((751 . 755)) nil (25898 62293 714997 991000) 0 nil])
([nil nil ((755 . 757)) nil (25898 62293 714996 175000) 0 nil])
([nil nil ((736 . 737)) nil (25898 62293 714994 220000) 0 nil])
([nil nil ((758 . 759)) nil (25898 62293 714992 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 759 761 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (759 . 761) (#("DB" 0 2 (fontified nil)) . 759) (759 . 761) (#("DB" 0 2 (fontified nil)) . -759) (759 . 761)) nil (25898 62293 714990 867000) 0 nil])
([nil nil ((761 . 767)) nil (25898 62293 714987 934000) 0 nil])
([nil nil ((767 . 768)) nil (25898 62293 714986 48000) 0 nil])
([nil nil ((apply yas--snippet-revive 765 774 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (765 . 774) (#("dbQueries" 0 9 (fontified nil)) . 765) (765 . 774) (#("dbQ" 0 3 (fontified nil)) . 765) (765 . 768) (#("dbQueries" 0 9 (fontified nil)) . -765) (765 . 774) (#("dbQ" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -765) (undo-tree-id74 . -3) (undo-tree-id75 . -3) 768) nil (25898 62293 714983 604000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -762) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 763) nil (25898 62293 714976 969000) 0 nil])
([nil nil ((1106 . 1107) (t 25898 62293 722157 840000)) nil (25898 62359 177509 993000) 0 nil])
([nil nil ((1176 . 1177)) nil (25898 62359 177504 755000) 0 nil])
([nil nil ((661 . 662) (t 25898 62359 185336 826000)) nil (25898 62404 399912 820000) 0 nil])
([nil nil ((696 . 698)) nil (25898 62404 399910 934000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1109) (undo-tree-id110 . -1) 1110) nil (25898 62404 399909 49000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1178) (undo-tree-id109 . -1) 1179) nil (25898 62404 399907 163000) 0 nil])
([nil nil ((696 . 698)) nil (25898 62404 399904 718000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -714) (714 . 715) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -714) (714 . 715) (698 . 715)) nil (25898 62404 399902 344000) 0 nil])
([nil nil ((715 . 717) (716 . 717) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 715) (715 . 717) (714 . 716)) nil (25898 62404 399899 899000) 0 nil])
([nil nil ((717 . 721)) nil (25898 62404 399897 455000) 0 nil])
([nil nil ((721 . 726)) nil (25898 62404 399896 58000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 729 741 nil nil nil t nil)) nil 8 nil #s(yas--field 1 729 741 nil nil nil t nil) nil nil)) (721 . 738) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 721) (721 . 743) (#("Print" 0 5 (fontified nil)) . 721) (721 . 726) (#("Println" 0 7 (fontified nil)) . -721) (721 . 728) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -721) (undo-tree-id107 . -5) (undo-tree-id108 . -5) 726) nil (25898 62404 399893 684000) 0 nil])
([nil nil ((730 . 734) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 730) (729 . 730)) nil (25898 62404 399889 912000) 0 nil])
([nil nil ((apply yas--snippet-revive 734 741 #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 729 741 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 729 741 nil nil nil t nil) nil)) (734 . 741) (#("Error()" 0 7 (fontified nil)) . 734) (734 . 741) (#("Error" 0 5 (fontified nil)) . -734) (734 . 739)) nil (25898 62404 399887 537000) 0 nil])
([nil nil ((apply yas--snippet-revive 721 742 #s(yas--snippet nil (#s(yas--field 1 729 741 nil nil nil t nil)) nil 8 nil #s(yas--field 1 729 741 nil nil nil t nil) nil nil))) nil (25898 62404 399884 255000) 0 nil])
([nil nil ((742 . 745)) nil (25898 62404 399882 788000) 0 nil])
([nil nil ((745 . 747)) nil (25898 62404 399880 903000) 0 nil])
([nil nil ((747 . 750)) nil (25898 62404 399879 17000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -749) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 750) nil (25898 62404 399877 61000) 0 nil])
([nil nil ((749 . 750)) nil (25898 62404 399869 868000) 0 nil])
([nil nil ((apply yas--snippet-revive 745 751 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (745 . 751) (#("return" 0 6 (fontified nil)) . 745) (745 . 751) (#("retur" 0 5 (fontified nil)) . 745) (745 . 750) (#("return" 0 6 (fontified nil)) . -745) (745 . 751) (#("retur" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -745) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -2) (undo-tree-id85 . -3) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) 750) nil (25898 62404 399865 537000) 0 nil])
([nil nil ((1164 . 1166) (t 25898 62404 406769 977000)) nil (25898 62593 206903 323000) 0 nil])
([nil nil ((1166 . 1167) (#("	" 0 1 (fontified nil)) . 1165) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (1166 . 1167)) nil (25898 62593 206901 18000) 0 nil])
([nil nil ((1167 . 1169)) nil (25898 62593 206898 154000) 0 nil])
([nil nil ((1169 . 1170)) nil (25898 62593 206896 338000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1169) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 1170) nil (25898 62593 206894 453000) 0 nil])
([nil nil ((1169 . 1170)) nil (25898 62593 206891 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 1167 1175 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1167 . 1175) (#("v1Router" 0 8 (fontified nil)) . 1167) (1167 . 1175) (#("v1R" 0 3 (fontified nil)) . 1167) (1167 . 1170) (#("v1Router" 0 8 (fontified nil)) . -1167) (1167 . 1175) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1167) (undo-tree-id174 . -3) (undo-tree-id175 . -3) 1170) nil (25898 62593 206889 634000) 0 nil])
([nil nil ((1175 . 1180)) nil (25898 62593 206886 351000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1177) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1178) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1179) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 1180) nil (25898 62593 206884 396000) 0 nil])
([nil nil ((1177 . 1179)) nil (25898 62593 206879 576000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1181 1189 nil nil nil t #s(yas--field 2 1191 1191 nil nil nil t nil)) #s(yas--field 2 1191 1191 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil nil)) (1176 . 1224) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 1176) (1176 . 1234) (#("Pos" 0 3 (fontified nil)) . 1176) (1176 . 1179) (#("Post" 0 4 (fontified nil)) . -1176) (1176 . 1180) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -1176) (undo-tree-id166 . -3) (undo-tree-id167 . -3) 1179) nil (25898 62593 206877 621000) 0 nil])
([nil nil ((1182 . 1187) (1181 . 1183) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1181) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 1182) (1181 . 1182)) nil (25898 62593 206873 780000) 0 nil])
([nil nil ((1187 . 1188)) nil (25898 62593 206871 405000) 0 nil])
([nil nil ((#("handlerFn http.HandlerFunc" 0 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 26 (fontified t face tree-sitter-hl-face:property)) . 1191)) nil (25898 62593 206869 519000) 0 nil])
([nil nil ((1191 . 1201)) nil (25898 62593 206868 123000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1197) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1198) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1199) (undo-tree-id164 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1200) (undo-tree-id165 . -1) 1201) nil (25898 62593 206865 748000) 0 nil])
([nil nil ((1197 . 1200)) nil (25898 62593 206861 557000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1196) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1197) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1198) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1199) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 1200) nil (25898 62593 206859 602000) 0 nil])
([nil nil ((1196 . 1201)) nil (25898 62593 206852 408000) 0 nil])
([nil nil ((apply yas--snippet-revive 1191 1216 #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil)) (1191 . 1216) (#("database.CreateUserParams" 0 25 (fontified nil)) . 1191) (1191 . 1216) (#("createUser" 0 10 (fontified nil)) . 1191) (1191 . 1201) (#("database.CreateUserParams" 0 25 (fontified nil)) . -1191) (1191 . 1216) (#("createUser" 0 10 (fontified t face tree-sitter-hl-face:variable)) . -1191) (undo-tree-id150 . -10) (undo-tree-id151 . -10) 1201) nil (25898 62593 206850 34000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1195) (undo-tree-id129 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1196) (undo-tree-id130 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1197) (undo-tree-id131 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1198) (undo-tree-id132 . -1) (#("." 0 1 (fontified t)) . -1199) (undo-tree-id133 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1200) (undo-tree-id134 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1201) (undo-tree-id135 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1202) (undo-tree-id136 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1203) (undo-tree-id137 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1204) (undo-tree-id138 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1205) (undo-tree-id139 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1206) (undo-tree-id140 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1207) (undo-tree-id141 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1208) (undo-tree-id142 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1209) (undo-tree-id143 . -1) (#("P" 0 1 (fontified nil face tree-sitter-hl-face:property)) . -1210) (undo-tree-id144 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1211) (undo-tree-id145 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1212) (undo-tree-id146 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1213) (undo-tree-id147 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1214) (undo-tree-id148 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1215) (undo-tree-id149 . -1) 1216) nil (25898 62593 206534 2000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1191) (undo-tree-id125 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1192) (undo-tree-id126 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1193) (undo-tree-id127 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1194) (undo-tree-id128 . -1) 1195) nil (25898 62593 206524 783000) 0 nil])
([nil nil ((apply yas--snippet-revive 1176 1192 #s(yas--snippet nil (#s(yas--field 1 1181 1189 nil nil nil t #s(yas--field 2 1191 1191 nil nil nil t nil)) #s(yas--field 2 1191 1191 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil nil))) nil (25898 62593 206521 430000) 0 nil])
([nil nil ((566 . 568)) nil (25898 62593 206519 545000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -573) (573 . 574) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -573) (573 . 574) (567 . 574)) nil (25898 62593 206518 78000) 0 nil])
([nil nil ((573 . 580)) nil (25898 62593 206515 634000) 0 nil])
([nil nil ((apply yas--snippet-revive 575 584 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (575 . 584) (#("apiConfig" 0 9 (fontified nil)) . 575) (575 . 584) (#("apiCo" 0 5 (fontified nil)) . 575) (575 . 580) (#("apiConfig" 0 9 (fontified nil)) . -575) (575 . 584) (#("apiCo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -575) (undo-tree-id123 . -5) (undo-tree-id124 . -5) 580) nil (25898 62593 206513 748000) 0 nil])
([nil nil ((585 . 589)) nil (25898 62593 206510 465000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -597) (597 . 598) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -597) (597 . 598) (589 . 598)) nil (25898 62593 206508 580000) 0 nil])
([nil nil ((597 . 607)) nil (25898 62593 206505 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 604 618 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (604 . 618) (#("ResponseWriter" 0 14 (fontified nil)) . 604) (604 . 618) (#("Res" 0 3 (fontified nil)) . 604) (604 . 607) (#("ResponseWriter" 0 14 (fontified nil)) . -604) (604 . 618) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -604) (undo-tree-id121 . -3) (undo-tree-id122 . -3) 607) nil (25898 62593 206503 900000) 0 nil])
([nil nil ((618 . 621)) nil (25898 62593 206500 548000) 0 nil])
([nil nil ((621 . 631)) nil (25898 62593 206498 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 628 635 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (628 . 635) (#("Request" 0 7 (fontified nil)) . 628) (628 . 635) (#("Req" 0 3 (fontified nil)) . 628) (628 . 631) (#("Request" 0 7 (fontified nil)) . -628) (628 . 635) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -628) (undo-tree-id119 . -3) (undo-tree-id120 . -3) 631) nil (25898 62593 206496 288000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -638) (638 . 639) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -638) (638 . 639) (636 . 639)) nil (25898 62593 206492 865000) 0 nil])
([nil nil ((639 . 640) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 639) (639 . 640) (638 . 640)) nil (25898 62593 206490 421000) 0 nil])
([nil nil ((640 . 642)) nil (25898 62593 206489 24000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -640) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("." 0 1 (fontified t)) . -641) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 642) nil (25898 62593 206487 68000) 0 nil])
([nil nil ((565 . 567)) nil (25898 62593 206483 297000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -578) (578 . 579) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -578) (578 . 579) (567 . 579)) nil (25898 62593 206481 341000) 0 nil])
([nil nil ((579 . 580) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 579) (579 . 580) (578 . 580)) nil (25898 62593 206479 456000) 0 nil])
([nil nil ((576 . 583)) nil (25898 62593 206477 570000) 0 nil])
([nil nil ((587 . 598)) nil (25898 62593 206475 684000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -587) (undo-tree-id114 . -1) 588) nil (25898 62593 206474 288000) 0 nil])
([nil nil ((587 . 588)) nil (25898 62593 206472 402000) 0 nil])
([nil nil ((600 . 606) (599 . 601) (#("`" 0 1 (fontified nil)) . -599) (598 . 600)) nil (25898 62593 206470 516000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -605) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 606) nil (25898 62593 206467 653000) 0 nil])
([nil nil ((606 . 610) (605 . 607) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -605) (605 . 606)) nil (25898 62593 206455 151000) 0 nil])
([nil nil ((583 . 590) (t 25898 62593 215405 451000)) nil (25898 62597 88646 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 698 . 699) (#("
" 0 1 (fontified nil)) . -878) (696 . 879) 695 (t 25898 62597 97356 868000)) nil (25898 62994 892578 234000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 695) (undo-tree-id319 . -1) (undo-tree-id320 . -1)) nil (25898 62994 892575 790000) 0 nil])
([nil nil ((nil rear-nonsticky nil 244 . 245) (#("
" 0 1 (fontified nil)) . -260) (243 . 261) 242) nil (25898 62994 892573 415000) 0 nil])
([nil nil ((893 . 895)) nil (25898 62994 892571 529000) 0 nil])
([nil nil ((895 . 898)) nil (25898 62994 892569 644000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -895) (undo-tree-id316 . -1) (#("ű" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -896) (undo-tree-id317 . -1) (#(" " 0 1 (fontified t)) . -897) (undo-tree-id318 . -1) 898) nil (25898 62994 892567 339000) 0 nil])
([nil nil ((14 . 15) (108 . 110) (#("gi" 0 2 (fontified t face tree-sitter-hl-face:string)) . -108) 110 (111 . 112) (#("hu" 0 2 (fontified t face tree-sitter-hl-face:string)) . -111) 113 (114 . 117) (#(".com" 0 4 (fontified t face tree-sitter-hl-face:string)) . -114) 118 (119 . 133) (120 . 123) (121 . 139) (#("	\"database/sql\"
	\"encoding/json\"
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:string) 2 14 (fontified t face tree-sitter-hl-face:string) 14 15 (fontified t face tree-sitter-hl-face:string) 15 16 (fontified t) 16 17 (fontified t rear-nonsticky t) 17 32 (fontified t face tree-sitter-hl-face:string) 32 33 (fontified t)) . 228) (undo-tree-id311 . -16) (undo-tree-id312 . -32) (undo-tree-id313 . -16) (365 . 366) (366 . 369) (395 . 397) (#("	" 0 1 (fontified t)) . 712) (#("	" 0 1 (fontified t)) . 750) (#("	" 0 1 (fontified t)) . -773) 774 (#("	" 0 1 (fontified t)) . -804) (#("	" 0 1 (fontified t)) . -822) (#("	" 0 1 (fontified t)) . -880) (#("	" 0 1 (fontified t)) . -890) (#("	" 0 1 (fontified t)) . 894) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("
" 0 1 (fontified t)) . 897) (987 . 988) (#("  " 0 2 (fontified t)) . 987) (1086 . 1087) (#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 1088) (#(", " 0 2 (fontified t)) . 1521) 894) nil (25898 62994 892561 612000) 0 nil])
([nil nil ((893 . 895)) nil (25898 62994 892555 815000) 0 nil])
([nil nil ((895 . 908)) nil (25898 62994 892553 859000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -906) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("." 0 1 (fontified t)) . -907) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 908) nil (25898 62994 892551 485000) 0 nil])
([nil nil ((906 . 907)) nil (25898 62994 892548 621000) 0 nil])
([nil nil ((apply yas--snippet-revive 923 927 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (22 . 25) (#("_ " 0 2 (fontified t)) . -22) 24 (25 . 27) (#("gi" 0 2 (fontified t face tree-sitter-hl-face:string)) . -25) 27 (28 . 29) (#("hu" 0 2 (fontified t face tree-sitter-hl-face:string)) . -28) 30 (31 . 34) (#(".com/lib" 0 8 (fontified t face tree-sitter-hl-face:string)) . 31) (40 . 41) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . 40) (42 . 43) (44 . 51) (45 . 50) (#("mp" 0 2 (fontified t face tree-sitter-hl-face:keyword)) . 45) (48 . 50) (#("rt (" 0 2 (fontified t face tree-sitter-hl-face:keyword) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-1-face))) . 48) (#("ut" 0 2 (fontified t face tree-sitter-hl-face:string)) . 81) (84 . 90) (85 . 92) (86 . 87) (90 . 102) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . 90) (92 . 94) (93 . 95) (94 . 95) (#("ht" 0 2 (fontified t face tree-sitter-hl-face:string)) . 94) (97 . 99) (#("p\"
	\"o" 0 2 (fontified t face tree-sitter-hl-face:string) 2 4 (fontified t) 4 6 (fontified t face tree-sitter-hl-face:string)) . 97) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (#("
" 0 1 (fontified t)) . 105) (109 . 110) (#("databas" 0 2 (fontified t face tree-sitter-hl-face:string) 2 3 (fontified t face tree-sitter-hl-face:string) 3 4 (fontified t face tree-sitter-hl-face:string) 4 5 (fontified t face tree-sitter-hl-face:string) 5 7 (fontified t face tree-sitter-hl-face:string)) . 109) (117 . 118) (118 . 122) (#("sql" 0 3 (fontified t face tree-sitter-hl-face:string)) . 118) (#("enc" 0 3 (fontified t face tree-sitter-hl-face:string)) . 125) (#("ding/j" 0 3 (fontified t face tree-sitter-hl-face:string) 3 4 (fontified t face tree-sitter-hl-face:string) 4 6 (fontified t face tree-sitter-hl-face:string)) . 129) (#("on" 0 1 (fontified t face tree-sitter-hl-face:string) 1 2 (fontified t face tree-sitter-hl-face:string)) . 136) (140 . 141) (192 . 218) (223 . 225) (#("go-blog-a" 0 9 (fontified t face tree-sitter-hl-face:string)) . 224) (234 . 235) (#("grega" 0 5 (fontified t face tree-sitter-hl-face:string)) . 234) (240 . 245) (241 . 242) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . 241) (#("interna" 0 7 (fontified t face tree-sitter-hl-face:string)) . -243) 250 (251 . 253) (252 . 254) (#("database" 0 8 (fontified t face tree-sitter-hl-face:string)) . -252) (undo-tree-id303 . -8) (undo-tree-id304 . -8) 260 (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (903 . 907) (#("uuid" 0 4 (fontified nil)) . 903) (903 . 907) (#("uuid" 0 4 (fontified nil)) . 903) (903 . 907) (#("uuid" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -903) (undo-tree-id305 . -4) (undo-tree-id306 . -4) 907) nil (25898 62994 892544 431000) 0 nil])
([nil nil ((927 . 931)) nil (25898 62994 892533 955000) 0 nil])
([nil nil ((apply yas--snippet-revive 928 933 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (928 . 933) (#("New()" 0 5 (fontified nil)) . 928) (928 . 933) (#("New" 0 3 (fontified nil)) . 928) (928 . 931) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -928) (undo-tree-id298 . -3) (undo-tree-id299 . -3) 931) nil (25898 62994 892531 580000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -941) (941 . 942) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -941) (941 . 942) (933 . 942)) nil (25898 62994 892528 228000) 0 nil])
([nil nil ((942 . 944)) nil (25898 62994 892525 783000) 0 nil])
([nil nil ((780 . 783) 776 (826 . 829) 822) nil (25898 62994 892524 317000) 0 nil])
([nil nil ((948 . 950)) nil (25898 62994 892521 942000) 0 nil])
([nil nil ((950 . 967)) nil (25898 62994 892520 475000) 0 nil])
([nil nil ((apply yas--snippet-revive 971 975 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (148 . 156) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (963 . 967) (#("time" 0 4 (fontified nil)) . 963) (963 . 967) (#("time" 0 4 (fontified nil)) . 963) (963 . 967) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -963) (undo-tree-id296 . -4) (undo-tree-id297 . -4) 967) nil (25898 62994 892518 101000) 0 nil])
([nil nil ((975 . 979)) nil (25898 62994 892513 840000) 0 nil])
([nil nil ((apply yas--snippet-revive 976 981 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (976 . 981) (#("Now()" 0 5 (fontified nil)) . 976) (976 . 981) (#("Now" 0 3 (fontified nil)) . 976) (976 . 979) (#("Now" 0 3 (fontified t face tree-sitter-hl-face:property)) . -976) (undo-tree-id294 . -3) (undo-tree-id295 . -3) 979) nil (25898 62994 892511 955000) 0 nil])
([nil nil ((981 . 983)) nil (25898 62994 892508 113000) 0 nil])
([nil nil ((983 . 986)) nil (25898 62994 892506 228000) 0 nil])
([nil nil ((apply yas--snippet-revive 983 1008 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (983 . 1008) (#("database.CreateUserParams" 0 25 (fontified nil)) . 983) (983 . 1008) (#("Cre" 0 3 (fontified nil)) . 983) (983 . 986) (#("database.CreateUserParams" 0 25 (fontified nil)) . -983) (983 . 1008) (#("Cre" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -983) (undo-tree-id292 . -3) (undo-tree-id293 . -3) 986) nil (25898 62994 892504 342000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1009) (1009 . 1010) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1009) (1009 . 1010) (1008 . 1010)) nil (25898 62994 892500 570000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -991) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -992) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -993) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -994) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -995) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -996) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -997) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -998) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -999) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1000) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1001) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1002) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1003) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1004) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1005) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1006) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1007) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1008) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1009) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . 1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 1010) nil (25898 62994 892495 751000) 0 nil])
([nil nil ((991 . 992)) nil (25898 62994 892466 697000) 0 nil])
([nil nil ((apply yas--snippet-revive 992 999 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (992 . 999) (#("Queries" 0 7 (fontified nil)) . 992) (992 . 999) (#("Queries" 0 7 (fontified nil)) . -992) (992 . 999)) nil (25898 62994 892464 253000) 0 nil])
([nil nil ((999 . 1000)) nil (25898 62994 892461 878000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -991) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("Q" 0 1 (fontified t face tree-sitter-hl-face:property)) . -992) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -993) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -994) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -995) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -996) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -997) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -998) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("." 0 1 (fontified t)) . -999) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 1000) nil (25898 62994 892458 456000) 0 nil])
([nil nil ((991 . 992)) nil (25898 62994 892449 936000) 0 nil])
([nil nil ((#("	database.
" 0 1 (fontified t) 1 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 11 (fontified t)) . 982) (undo-tree-id180 . -10) (undo-tree-id181 . 1) (undo-tree-id182 . -10) (undo-tree-id183 . -9) (undo-tree-id184 . 1) (undo-tree-id185 . -10) (undo-tree-id186 . -10) (undo-tree-id187 . -10) (undo-tree-id188 . -10) (undo-tree-id189 . -10) (undo-tree-id190 . -10) (undo-tree-id191 . -10) (undo-tree-id192 . -10) (undo-tree-id193 . -10) (undo-tree-id194 . -10) (undo-tree-id195 . -10) (undo-tree-id196 . -10) (undo-tree-id197 . -10) (undo-tree-id198 . -10) (undo-tree-id199 . -10) (undo-tree-id200 . -10) (undo-tree-id201 . -9) (undo-tree-id202 . -9) (undo-tree-id203 . -9) (undo-tree-id204 . -9) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (undo-tree-id207 . -1) (undo-tree-id208 . -9) (undo-tree-id209 . -9) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -11) 991) nil (25898 62994 892445 745000) 0 nil])
([nil nil ((983 . 985) (t 25898 62994 995381 741000)) nil (25898 63190 640235 484000) 0 nil])
([nil nil ((apply yas--snippet-revive 985 987 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (985 . 987) (#("DB" 0 2 (fontified nil)) . 985) (985 . 987) (#("DB" 0 2 (fontified nil)) . -985) (985 . 987)) nil (25898 63190 640233 598000) 0 nil])
([nil nil ((987 . 988)) nil (25898 63190 640231 712000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil nil)) (988 . 1050) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 988) (988 . 1060) (#("CreateUser" 0 10 (fontified nil)) . -988) (988 . 998)) nil (25898 63190 640229 338000) 0 nil])
([nil nil ((1000 . 1001) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 1000) (999 . 1000)) nil (25898 63190 640227 522000) 0 nil])
([nil nil ((1001 . 1002)) nil (25898 63190 640225 636000) 0 nil])
([nil nil ((1002 . 1004)) nil (25898 63190 640224 170000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -999) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("." 0 1 (fontified t)) . -1000) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1001) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("B" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1002) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("." 0 1 (fontified t)) . -1003) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 1004) nil (25898 63190 640221 865000) 0 nil])
([nil nil ((apply yas--snippet-revive 988 1031 #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil nil))) nil (25898 63190 640216 138000) 0 nil])
([nil nil ((#("	a.DB.CreateUser(, arg database.CreateUserParams)
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 3 (fontified t) 3 5 (fontified t face tree-sitter-hl-face:property) 5 6 (fontified t) 6 16 (fontified t face tree-sitter-hl-face:property) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 19 (fontified t) 19 22 (fontified t face tree-sitter-hl-face:variable) 22 23 (fontified t) 23 31 (fontified t) 31 32 (fontified t) 32 48 (fontified t face tree-sitter-hl-face:type) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t)) . 982) (undo-tree-id343 . -49) (undo-tree-id344 . 2) (undo-tree-id345 . -50) (undo-tree-id346 . -47) (undo-tree-id347 . -47) 1029) nil (25898 63190 640214 182000) 0 nil])
([nil nil ((1171 . 1173)) nil (25898 63190 640211 249000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1172) (undo-tree-id342 . -1) 1173) nil (25898 63190 640208 874000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1198 . 1199) (nil fontified nil 1172 . 1199) (1172 . 1199)) nil (25898 63190 640206 919000) 0 nil])
([nil nil ((1172 . 1174)) nil (25898 63190 640205 33000) 0 nil])
([nil nil ((1171 . 1173)) nil (25898 63190 640203 566000) 0 nil])
([nil nil ((1173 . 1178)) nil (25898 63190 640201 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 1184 1191 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (23 . 34) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1173 . 1180) (#("context" 0 7 (fontified nil)) . 1173) (1173 . 1180) (#("conte" 0 5 (fontified nil)) . 1173) (1173 . 1178) (#("context" 0 7 (fontified nil)) . -1173) (1173 . 1180) (#("conte" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -1173) (undo-tree-id340 . -5) (undo-tree-id341 . -5) 1178) nil (25898 63190 640199 795000) 0 nil])
([nil nil ((#("	context
" 0 1 (fontified t) 1 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t)) . 1183) (undo-tree-id335 . -9) (undo-tree-id336 . -8) (undo-tree-id337 . 1) (undo-tree-id338 . -1) (undo-tree-id339 . -7) 1190) nil (25898 63190 640196 24000) 0 nil])
([nil nil ((626 . 628)) nil (25898 63190 640192 252000) 0 nil])
([nil nil ((628 . 638)) nil (25898 63190 640190 855000) 0 nil])
([nil nil ((638 . 639)) nil (25898 63190 640188 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 632 647 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (632 . 647) (#("context.Context" 0 15 (fontified nil)) . 632) (632 . 647) (#("context" 0 7 (fontified nil)) . 632) (632 . 639) (#("context.Context" 0 15 (fontified nil)) . -632) (632 . 647) (#("context" 0 7 (fontified t face tree-sitter-hl-face:type)) . -632) (undo-tree-id333 . -7) (undo-tree-id334 . -7) 639) nil (25898 63190 640187 84000) 0 nil])
([nil nil ((1233 . 1235)) nil (25898 63190 640182 754000) 0 nil])
([nil nil ((#("  ctx := context.Background()
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 8 (fontified t face tree-sitter-hl-face:operator) 8 9 (fontified t) 9 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 27 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (rear-nonsticky t fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t)) . 1204) (undo-tree-id332 . -29)) nil (25898 63190 640180 309000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1285 . 1286) (#("
" 0 1 (fontified nil)) . -1313) (1283 . 1314) 1261) nil (25898 63190 640177 865000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1204) (undo-tree-id330 . -1) (undo-tree-id331 . 1)) nil (25898 63190 640175 490000) 0 nil])
([nil nil ((1284 . 1291)) nil (25898 63190 640172 627000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1295) (undo-tree-id329 . -1) 1296) nil (25898 63190 640170 741000) 0 nil])
([nil nil ((1672 . 1676)) nil (25898 63190 640167 808000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1674) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1675) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 1676) nil (25898 63190 640165 922000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1672) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1673) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 1674) nil (25898 63190 640161 243000) 0 nil])
([nil nil ((1672 . 1677)) nil (25898 63190 640151 255000) 0 nil])
([nil nil ((1677 . 1680)) nil (25898 63190 640149 300000) 0 nil])
([nil nil ((1680 . 1681)) nil (25898 63190 640147 833000) 0 nil])
([nil nil ((apply yas--snippet-revive 1681 1691 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (1681 . 1691) (#("createUser" 0 10 (fontified nil)) . 1681) (1681 . 1691) (#("createUser" 0 10 (fontified nil)) . -1681) (1681 . 1691)) nil (25898 63190 640142 106000) 0 nil])
([nil nil ((1014 . 1016) (t 25898 63190 649937 695000)) nil (25898 63315 440956 309000) 0 nil])
([nil nil ((1016 . 1020)) nil (25898 63315 440954 423000) 0 nil])
([nil nil ((1020 . 1026)) nil (25898 63315 440953 26000) 0 nil])
([nil nil ((apply yas--snippet-revive 1026 1028 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1026 . 1028) (#("DB" 0 2 (fontified nil)) . 1026) (1026 . 1028) (#("DB" 0 2 (fontified nil)) . -1026) (1026 . 1028)) nil (25898 63315 440951 140000) 0 nil])
([nil nil ((1028 . 1029)) nil (25898 63315 440948 766000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil 29 nil #s(yas--field 2 1047 1076 nil nil nil nil nil) nil nil)) (1029 . 1091) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 1029) (1029 . 1101) (#("CreateUser" 0 10 (fontified nil)) . -1029) (1029 . 1039)) nil (25898 63315 440947 299000) 0 nil])
([nil nil ((1041 . 1042) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 1041) (1040 . 1041)) nil (25898 63315 440944 436000) 0 nil])
([nil nil ((apply yas--snippet-revive 1042 1045 #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil)) (1042 . 1045) (#("ctx" 0 3 (fontified nil)) . 1042) (1042 . 1045) (#("ctx" 0 3 (fontified nil)) . -1042) (1042 . 1045)) nil (25898 63315 440942 480000) 0 nil])
([nil nil ((apply yas--snippet-revive 1029 1077 #s(yas--snippet nil (#s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil 29 nil #s(yas--field 2 1047 1076 nil nil nil nil nil) nil nil))) nil (25898 63315 440940 36000) 0 nil])
([nil nil ((1013 . 1015)) nil (25898 63315 440938 569000) 0 nil])
([nil nil ((959 . 960)) nil (25898 63315 440936 683000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -959) (undo-tree-id403 . -1) 960) nil (25898 63315 440934 797000) 0 nil])
([nil nil ((959 . 961)) nil (25898 63315 440932 912000) 0 nil])
([nil nil ((961 . 964)) nil (25898 63315 440930 956000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -963) (undo-tree-id402 . -1) 964) nil (25898 63315 440929 489000) 0 nil])
([nil nil ((963 . 971)) nil (25898 63315 440927 115000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -970) (undo-tree-id401 . -1) 971) nil (25898 63315 440925 718000) 0 nil])
([nil nil ((970 . 974)) nil (25898 63315 440923 413000) 0 nil])
([nil nil ((apply yas--snippet-revive 970 978 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (970 . 978) (#("database" 0 8 (fontified nil)) . 970) (970 . 978) (#("data" 0 4 (fontified nil)) . 970) (970 . 974) (#("database" 0 8 (fontified nil)) . -970) (970 . 978) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -970) (undo-tree-id399 . -4) (undo-tree-id400 . -4) 974) nil (25898 63315 440921 528000) 0 nil])
([nil nil ((978 . 979)) nil (25898 63315 440918 245000) 0 nil])
([nil nil ((apply yas--snippet-revive 979 995 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (979 . 995) (#("CreateUserParams" 0 16 (fontified nil)) . 979) (979 . 995) (#("CreateUserParams" 0 16 (fontified nil)) . -979) (979 . 995)) nil (25898 63315 440916 289000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -996) (996 . 997) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -996) (996 . 997) (995 . 997)) nil (25898 63315 440913 426000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -999) (undo-tree-id395 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1000) (undo-tree-id396 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1001) (undo-tree-id397 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1002) (undo-tree-id398 . -1) 1003) nil (25898 63315 440910 4000) 0 nil])
([nil nil ((999 . 1002)) nil (25898 63315 440906 162000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1001) (undo-tree-id394 . -1) 1002) nil (25898 63315 440904 277000) 0 nil])
([nil nil ((1001 . 1005)) nil (25898 63315 440902 391000) 0 nil])
([nil nil ((apply yas--snippet-revive 1005 1007 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (1005 . 1007) (#("ID" 0 2 (fontified nil)) . 1005) (1005 . 1007) (#("ID" 0 2 (fontified nil)) . -1005) (1005 . 1007)) nil (25898 63315 440900 505000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1032) (undo-tree-id385 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1033) (undo-tree-id386 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1034) (undo-tree-id387 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1035) (undo-tree-id388 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1036) (undo-tree-id389 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1037) (undo-tree-id390 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1038) (undo-tree-id391 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1039) (undo-tree-id392 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1040) (undo-tree-id393 . -1) 1041) nil (25898 63315 440897 83000) 0 nil])
([nil nil ((1032 . 1034)) nil (25898 63315 440891 915000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1032) (undo-tree-id383 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1033) (undo-tree-id384 . -1) 1034) nil (25898 63315 440889 610000) 0 nil])
([nil nil ((1032 . 1041)) nil (25898 63315 440887 235000) 0 nil])
([nil nil ((1055 . 1057)) nil (25898 63315 440885 280000) 0 nil])
([nil nil ((1057 . 1059)) nil (25898 63315 440883 883000) 0 nil])
([nil nil ((1059 . 1063)) nil (25898 63315 440881 439000) 0 nil])
([nil nil ((apply yas--snippet-revive 1063 1072 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (1063 . 1072) (#("CreatedAt" 0 9 (fontified nil)) . 1063) (1063 . 1072) (#("CreatedAt" 0 9 (fontified nil)) . -1063) (1063 . 1072)) nil (25898 63315 440879 483000) 0 nil])
([nil nil ((1072 . 1079)) nil (25898 63315 440877 597000) 0 nil])
([nil nil ((apply yas--snippet-revive 1075 1084 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1075 . 1084) (#("timeStamp" 0 9 (fontified nil)) . 1075) (1075 . 1084) (#("time" 0 4 (fontified nil)) . 1075) (1075 . 1079) (#("timeStamp" 0 9 (fontified nil)) . -1075) (1075 . 1084) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1075) (undo-tree-id381 . -4) (undo-tree-id382 . -4) 1079) nil (25898 63315 440875 153000) 0 nil])
([nil nil ((1084 . 1086)) nil (25898 63315 440871 801000) 0 nil])
([nil nil ((1086 . 1089)) nil (25898 63315 440869 915000) 0 nil])
([nil nil ((apply yas--snippet-revive 1086 1101 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (1086 . 1101) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . 1086) (1086 . 1101) (#("dbO" 0 3 (fontified nil)) . 1086) (1086 . 1089) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . -1086) (1086 . 1101) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1086) (undo-tree-id379 . -3) (undo-tree-id380 . -3) 1089) nil (25898 63315 440867 610000) 0 nil])
([nil nil ((1101 . 1108)) nil (25898 63315 440863 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 1104 1113 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (1104 . 1113) (#("timeStamp" 0 9 (fontified nil)) . 1104) (1104 . 1113) (#("time" 0 4 (fontified nil)) . 1104) (1104 . 1108) (#("timeStamp" 0 9 (fontified nil)) . -1104) (1104 . 1113) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1104) (undo-tree-id377 . -4) (undo-tree-id378 . -4) 1108) nil (25898 63315 440861 394000) 0 nil])
([nil nil ((1113 . 1115)) nil (25898 63315 440858 112000) 0 nil])
([nil nil ((1115 . 1118)) nil (25898 63315 440856 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 1115 1120 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (1115 . 1120) (#("dbObj" 0 5 (fontified nil)) . 1115) (1115 . 1120) (#("dbO" 0 3 (fontified nil)) . 1115) (1115 . 1118) (#("dbObj" 0 5 (fontified nil)) . -1115) (1115 . 1120) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -1115) (undo-tree-id375 . -3) (undo-tree-id376 . -3) 1118) nil (25898 63315 440853 851000) 0 nil])
([nil nil ((1120 . 1121)) nil (25898 63315 440849 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 1121 1125 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (1121 . 1125) (#("Name" 0 4 (fontified nil)) . 1121) (1121 . 1125) (#("Name" 0 4 (fontified nil)) . -1121) (1121 . 1125)) nil (25898 63315 440848 55000) 0 nil])
([nil nil ((1125 . 1132)) nil (25898 63315 440845 610000) 0 nil])
([nil nil ((apply yas--snippet-revive 1128 1135 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (1128 . 1135) (#("userReq" 0 7 (fontified nil)) . 1128) (1128 . 1135) (#("user" 0 4 (fontified nil)) . 1128) (1128 . 1132) (#("userReq" 0 7 (fontified nil)) . -1128) (1128 . 1135) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1128) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -1) (undo-tree-id361 . -2) (undo-tree-id362 . -3) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) 1132) nil (25898 63315 440842 258000) 0 nil])
([nil nil ((1135 . 1136)) nil (25898 63315 440823 750000) 0 nil])
([nil nil ((apply yas--snippet-revive 1136 1140 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (1136 . 1140) (#("Name" 0 4 (fontified nil)) . 1136) (1136 . 1140) (#("Name" 0 4 (fontified nil)) . -1136) (1136 . 1140)) nil (25898 63315 440818 23000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1184) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1185) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1186) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1187) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("." 0 1 (fontified t)) . -1188) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1189) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1190) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1191) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1192) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1193) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1194) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1195) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1196) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1197) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1198) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1199) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1200) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1201) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1202) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1203) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1204) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) 1205 (t 25898 63315 545378 39000)) nil (25898 63337 245081 823000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1176) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1177) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1178) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#(" " 0 1 (fontified t)) . -1179) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1180) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1181) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1182) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1183) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 1184) nil (25898 63337 244902 131000) 0 nil])
([nil nil ((1176 . 1180)) nil (25898 63337 244470 24000) 0 nil])
([nil nil ((apply yas--snippet-revive 1176 1181 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (1176 . 1181) (#("dbObj" 0 5 (fontified nil)) . 1176) (1176 . 1181) (#("dbOb" 0 4 (fontified nil)) . 1176) (1176 . 1180) (#("dbObj" 0 5 (fontified nil)) . -1176) (1176 . 1181) (#("dbOb" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1176) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -1) (undo-tree-id407 . -2) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) 1180) nil (25898 63337 244466 712000) 0 nil])
([nil nil ((1149 . 1154)) nil (25898 63337 244449 729000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1021) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1022) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1023) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1024) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1025) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1026) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1027) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1028) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1029) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . 1) (undo-tree-id1377 . -1) 1030 (t 25898 63337 254731 797000)) nil (25898 63371 487945 670000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1029) (1029 . 1030) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1029) (1029 . 1030) (1021 . 1030)) nil (25898 63371 487931 906000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1008) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) 1009) nil (25898 63371 487926 736000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1020) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1021) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1022) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1023) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1024) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1025) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1026) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1027) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1028) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . 1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) 1029 (t 25898 63371 495504 924000)) nil (25898 63377 817470 544000) 0 nil])
([nil nil ((1177 . 1179) (t 25898 63377 829827 288000)) nil (25898 63708 597445 437000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1194) (1194 . 1195) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1194) (1194 . 1195) (1179 . 1195)) nil (25898 63708 597443 552000) 0 nil])
([nil nil ((1195 . 1197) (1196 . 1197) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1195) (1195 . 1197) (1194 . 1196)) nil (25898 63708 597441 178000) 0 nil])
([nil nil ((1197 . 1203)) nil (25898 63708 597438 803000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1220 1221 nil nil nil t #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil))) #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil)) #s(yas--field 3 1228 1251 nil nil nil t nil)) nil 43 nil #s(yas--field 3 1228 1251 nil nil nil t nil) nil nil)) (1203 . 1264) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1203) (1203 . 1279) (#("RespondWithError" 0 16 (fontified nil)) . -1203) (1203 . 1219)) nil (25898 63708 597436 429000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1221) (1220 . 1221)) nil (25898 63708 597434 55000) 0 nil])
([nil nil ((1224 . 1226) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1224) (1223 . 1224)) nil (25898 63708 597432 100000) 0 nil])
([nil nil ((1229 . 1231) (1228 . 1230) (#("\"" 0 1 (fontified nil)) . -1228) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 1229) (1228 . 1229)) nil (25898 63708 597429 307000) 0 nil])
([nil nil ((1231 . 1234)) nil (25898 63708 597426 933000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1233) (undo-tree-id1524 . -1) 1234) nil (25898 63708 597425 47000) 0 nil])
([nil nil ((1233 . 1250)) nil (25898 63708 597422 673000) 0 nil])
([nil nil ((apply yas--snippet-revive 1203 1252 #s(yas--snippet nil (#s(yas--field 1 1220 1221 nil nil nil t #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil))) #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil)) #s(yas--field 3 1228 1251 nil nil nil t nil)) nil 43 nil #s(yas--field 3 1228 1251 nil nil nil t nil) nil nil))) nil (25898 63708 597420 299000) 0 nil])
([nil nil ((1252 . 1255)) nil (25898 63708 597418 833000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1252) (undo-tree-id1521 . -1) (#("	" 0 1 (fontified t)) . -1253) (undo-tree-id1522 . -1) (#("	" 0 1 (fontified t)) . -1254) (undo-tree-id1523 . -1) 1255) nil (25898 63708 597416 878000) 0 nil])
([nil nil ((1252 . 1255)) nil (25898 63708 597413 526000) 0 nil])
([nil nil ((1255 . 1261)) nil (25898 63708 597411 571000) 0 nil])
([nil nil ((1264 . 1266)) nil (25898 63708 597409 685000) 0 nil])
([nil nil ((1266 . 1272)) nil (25898 63708 597407 800000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1266) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1267) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1268) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1269) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1270) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("." 0 1 (fontified t)) . -1271) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) 1272) nil (25898 63708 597404 937000) 0 nil])
([nil nil ((1266 . 1272)) nil (25898 63708 597397 396000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1288 1289 nil nil nil t #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil))) #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil)) #s(yas--field 3 1296 1301 nil nil nil t nil)) nil 44 nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil nil)) (1272 . 1341) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 1272) (1272 . 1357) (#("RespondWithJSON" 0 15 (fontified nil)) . -1272) (1272 . 1287)) nil (25898 63708 597395 441000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 1289) (undo-tree-id1508 . -21) (1288 . 1289)) nil (25898 63708 597392 648000) 0 nil])
([nil nil ((1292 . 1294) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 1292) (undo-tree-id1507 . -8) (1291 . 1292)) nil (25898 63708 597390 273000) 0 nil])
([nil nil ((1297 . 1299) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1297) (undo-tree-id1506 . -19) (1296 . 1297)) nil (25898 63708 597387 341000) 0 nil])
([nil nil ((1299 . 1301)) nil (25898 63708 597384 478000) 0 nil])
([nil nil ((apply yas--snippet-revive 1296 1301 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil)) (1296 . 1301) (#("dbObj" 0 5 (fontified nil)) . 1296) (undo-tree-id1501 . -5) (1296 . 1301) (#("dbObj" 0 5 (fontified nil)) . 1296) (undo-tree-id1502 . -5) (1296 . 1301) (#("dbObj" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -1296) (undo-tree-id1503 . -5) (undo-tree-id1504 . -5) (undo-tree-id1505 . -5) 1301) nil (25898 63708 597382 34000) 0 nil])
([nil nil ((apply yas--snippet-revive 1272 1302 #s(yas--snippet nil (#s(yas--field 1 1288 1289 nil nil nil t #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil))) #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil)) #s(yas--field 3 1296 1301 nil nil nil t nil)) nil 44 nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil nil))) nil (25898 63708 597368 348000) 0 nil])
([nil nil ((705 . 707) (t 25898 63708 700319 577000)) nil (25898 63829 641519 320000) 0 nil])
([nil nil ((656 . 662) (829 . 835)) nil (25898 63829 641517 365000) 0 nil])
([nil nil ((713 . 734)) nil (25898 63829 641515 898000) 0 nil])
([nil nil ((734 . 742)) nil (25898 63829 641514 12000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -741) (undo-tree-id1536 . -1) 742) nil (25898 63829 641512 57000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -745) (745 . 746) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -745) (745 . 746) (741 . 746)) nil (25898 63829 641509 263000) 0 nil])
([nil nil ((746 . 747) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 746) (746 . 747) (745 . 747)) nil (25898 63829 641507 377000) 0 nil])
([nil nil ((nil rear-nonsticky nil 748 . 749) (#("
" 0 1 (fontified nil)) . -828) (747 . 829) 746) nil (25898 63829 641505 72000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 746) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1)) nil (25898 63829 641502 698000) 0 nil])
([nil nil ((768 . 773) (767 . 769) (#("`" 0 1 (fontified nil)) . -767) (766 . 768)) nil (25898 63829 641499 904000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face tree-sitter-hl-face:string)) . -772) (undo-tree-id1533 . -1) 773) nil (25898 63829 641497 529000) 0 nil])
([nil nil ((774 . 776) (773 . 775) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -773) (772 . 774)) nil (25898 63829 641494 596000) 0 nil])
([nil nil ((801 . 806) (800 . 802) (#("`" 0 1 (fontified nil)) . -800) (799 . 801)) nil (25898 63829 641492 221000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -805) (undo-tree-id1532 . -1) 806) nil (25898 63829 641489 777000) 0 nil])
([nil nil ((807 . 812) (806 . 808) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -806) (805 . 807)) nil (25898 63829 641486 843000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -810) (undo-tree-id1530 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -811) (undo-tree-id1531 . -1) 812) nil (25898 63829 641484 468000) 0 nil])
([nil nil ((810 . 817)) nil (25898 63829 641481 675000) 0 nil])
([nil nil ((819 . 821)) nil (25898 63829 641479 719000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -819) (undo-tree-id1528 . -1) (#("	" 0 1 (fontified t)) . -820) (undo-tree-id1529 . -1) 821) nil (25898 63829 641477 763000) 0 nil])
([nil nil ((840 . 842)) nil (25898 63829 641474 481000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -841) (undo-tree-id1527 . -1) 842) nil (25898 63829 641472 176000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -842) (842 . 843) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -842) (842 . 843) (841 . 843) (#("`" 0 1 (fontified nil)) . -841) (841 . 842)) nil (25898 63829 641468 893000) 0 nil])
([nil nil ((848 . 858) (847 . 849) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -847) (842 . 848)) nil (25898 63829 641466 30000) 0 nil])
([nil nil ((860 . 862)) nil (25898 63829 641463 166000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -860) (undo-tree-id1525 . -1) (#("	" 0 1 (fontified t)) . -861) (undo-tree-id1526 . -1) 862) nil (25898 63829 641461 211000) 0 nil])
([nil nil ((878 . 879)) nil (25898 63829 641452 550000) 0 nil])
([nil nil ((886 . 890) (885 . 887) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -885) (880 . 886) (879 . 881) (#("`" 0 1 (fontified nil)) . -879) (879 . 880)) nil (25898 63829 641446 823000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1491) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1492) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1493) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1494) (undo-tree-id1573 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1495) (undo-tree-id1574 . -1) 1496 (t 25898 63829 647704 789000)) nil (25898 64018 643672 314000) 0 nil])
([nil nil ((1491 . 1495)) nil (25898 64018 643667 425000) 0 nil])
([nil nil ((1459 . 1461)) nil (25898 64018 643666 28000) 0 nil])
([nil nil ((1461 . 1474)) nil (25898 64018 643664 561000) 0 nil])
([nil nil ((1474 . 1478)) nil (25898 64018 643662 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 1472 1490 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (1472 . 1490) (#("CreateUserResponse" 0 18 (fontified nil)) . 1472) (1472 . 1490) (#("Create" 0 6 (fontified nil)) . 1472) (1472 . 1478) (#("CreateUserResponse" 0 18 (fontified nil)) . -1472) (1472 . 1490) (#("Create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1472) (undo-tree-id1565 . -6) (undo-tree-id1566 . -6) 1478) nil (25898 64018 643660 370000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1491) (1491 . 1492) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1491) (1491 . 1492) (1490 . 1492)) nil (25898 64018 643657 88000) 0 nil])
([nil nil ((1492 . 1494)) nil (25898 64018 643655 691000) 0 nil])
([nil nil ((1494 . 1498)) nil (25898 64018 643654 294000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1495) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1496) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("." 0 1 (fontified t)) . -1497) (undo-tree-id1564 . -1) 1498) nil (25898 64018 643652 408000) 0 nil])
([nil nil ((1495 . 1499)) nil (25898 64018 643649 55000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1498) (undo-tree-id1559 . -1) 1499) nil (25898 64018 643647 589000) 0 nil])
([nil nil ((1498 . 1502)) nil (25898 64018 643645 703000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1501) (undo-tree-id1558 . -1) 1502) nil (25898 64018 643643 747000) 0 nil])
([nil nil ((1501 . 1502)) nil (25898 64018 643642 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 1502 1504 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (1502 . 1504) (#("ID" 0 2 (fontified nil)) . 1502) (1502 . 1504) (#("ID" 0 2 (fontified nil)) . -1502) (1502 . 1504)) nil (25898 64018 643640 325000) 0 nil])
([nil nil ((1504 . 1509)) nil (25898 64018 643638 928000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1505) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1506) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1507) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1508) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) 1509) nil (25898 64018 643636 553000) 0 nil])
([nil nil ((1505 . 1513)) nil (25898 64018 643632 222000) 0 nil])
([nil nil ((apply yas--snippet-revive 1513 1515 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (1513 . 1515) (#("ID" 0 2 (fontified nil)) . 1513) (1513 . 1515) (#("ID" 0 2 (fontified nil)) . -1513) (1513 . 1515)) nil (25898 64018 643630 756000) 0 nil])
([nil nil ((1515 . 1517)) nil (25898 64018 643628 870000) 0 nil])
([nil nil ((1517 . 1521)) nil (25898 64018 643627 473000) 0 nil])
([nil nil ((apply yas--snippet-revive 1517 1524 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (1517 . 1524) (#("userRes" 0 7 (fontified nil)) . 1517) (1517 . 1524) (#("user" 0 4 (fontified nil)) . 1517) (1517 . 1521) (#("userRes" 0 7 (fontified nil)) . -1517) (1517 . 1524) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1517) (undo-tree-id1548 . -4) (undo-tree-id1549 . -4) 1521) nil (25898 64018 643625 587000) 0 nil])
([nil nil ((1524 . 1525)) nil (25898 64018 643623 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 1525 1529 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (1525 . 1529) (#("Name" 0 4 (fontified nil)) . 1525) (1525 . 1529) (#("Name" 0 4 (fontified nil)) . -1525) (1525 . 1529)) nil (25898 64018 643621 396000) 0 nil])
([nil nil ((1529 . 1530)) nil (25898 64018 643619 930000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1505) (undo-tree-id1547 . -1) 1506) nil (25898 64018 643618 533000) 0 nil])
([nil nil ((1528 . 1531)) nil (25898 64018 643616 158000) 0 nil])
([nil nil ((1531 . 1536)) nil (25898 64018 643615 180000) 0 nil])
([nil nil ((apply yas--snippet-revive 1536 1540 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (1536 . 1540) (#("Name" 0 4 (fontified nil)) . 1536) (1536 . 1540) (#("Name" 0 4 (fontified nil)) . -1536) (1536 . 1540)) nil (25898 64018 643613 224000) 0 nil])
([nil nil ((1541 . 1542) (#(" " 0 1 (fontified nil)) . -1541) (1540 . 1541)) nil (25898 64018 643611 269000) 0 nil])
([nil nil ((1542 . 1550)) nil (25898 64018 643609 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 1550 1559 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (1550 . 1559) (#("CreatedAt" 0 9 (fontified nil)) . 1550) (1550 . 1559) (#("CreatedAt" 0 9 (fontified nil)) . -1550) (1550 . 1559)) nil (25898 64018 643608 405000) 0 nil])
([nil nil ((1559 . 1567)) nil (25898 64018 643606 449000) 0 nil])
([nil nil ((apply yas--snippet-revive 1567 1576 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (1567 . 1576) (#("CreatedAt" 0 9 (fontified nil)) . 1567) (1567 . 1576) (#("CreatedAt" 0 9 (fontified nil)) . -1567) (1567 . 1576)) nil (25898 64018 643605 52000) 0 nil])
([nil nil ((1576 . 1578)) nil (25898 64018 643603 167000) 0 nil])
([nil nil ((1578 . 1586)) nil (25898 64018 643601 770000) 0 nil])
([nil nil ((apply yas--snippet-revive 1586 1595 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (1586 . 1595) (#("UpdatedAt" 0 9 (fontified nil)) . 1586) (1586 . 1595) (#("UpdatedAt" 0 9 (fontified nil)) . -1586) (1586 . 1595)) nil (25898 64018 643599 814000) 0 nil])
([nil nil ((1595 . 1599)) nil (25898 64018 643597 369000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1598) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) 1599) nil (25898 64018 643595 64000) 0 nil])
([nil nil ((1598 . 1600)) nil (25898 64018 643583 191000) 0 nil])
([nil nil ((1600 . 1603)) nil (25898 64018 643581 235000) 0 nil])
([nil nil ((apply yas--snippet-revive 1603 1612 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (1603 . 1612) (#("UpdatedAt" 0 9 (fontified nil)) . 1603) (1603 . 1612) (#("UpdatedAt" 0 9 (fontified nil)) . -1603) (1603 . 1612)) nil (25898 64018 643576 416000) 0 nil])
([nil nil ((1648 . 1651) (t 25898 64018 654193 853000)) nil (25898 64057 612472 863000) 0 nil])
([nil nil ((1978 . 1980) (t 25898 64057 622383 887000)) nil (25898 64120 477970 82000) 0 nil])
([nil nil ((1980 . 1983)) nil (25898 64120 477967 707000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1982) (undo-tree-id1638 . -1) 1983) nil (25898 64120 477966 241000) 0 nil])
([nil nil ((1982 . 1986)) nil (25898 64120 477963 936000) 0 nil])
([nil nil ((apply yas--snippet-revive 1982 1995 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (1982 . 1995) (#("Middlewares()" 0 13 (fontified nil)) . 1982) (1982 . 1995) (#("midd" 0 4 (fontified nil)) . 1982) (1982 . 1986) (#("Middlewares" 0 11 (fontified nil)) . -1982) (1982 . 1993) (#("midd" 0 4 (fontified t face tree-sitter-hl-face:property)) . -1982) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) 1986) nil (25898 64120 477961 142000) 0 nil])
([nil nil ((1994 . 1995)) nil (25898 64120 477957 859000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1994) (undo-tree-id1635 . -1) 1995) nil (25898 64120 477956 43000) 0 nil])
([nil nil ((1994 . 2000)) nil (25898 64120 477954 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 2033 2043 #s(yas--snippet nil nil nil 57 nil nil nil nil)) (219 . 258) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 57 nil nil nil nil)) (1994 . 2004) (#("middleware" 0 10 (fontified nil)) . 1994) (1994 . 2004) (#("middle" 0 6 (fontified nil)) . 1994) (1994 . 2000) (#("middleware" 0 10 (fontified nil)) . -1994) (1994 . 2004) (#("middle" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1994) (undo-tree-id1633 . -6) (undo-tree-id1634 . -6) 2000) nil (25898 64120 477951 294000) 0 nil])
([nil nil ((2043 . 2048)) nil (25898 64120 477947 941000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2050 2050 nil nil nil t nil)) nil 58 nil #s(yas--field 1 2050 2050 nil nil nil t nil) nil nil)) (2044 . 2069) (#("Logger(${1:next http.Handler})" 0 30 (fontified nil)) . 2044) (2044 . 2074) (#("Logg" 0 4 (fontified nil)) . 2044) (2044 . 2048) (#("Logger" 0 6 (fontified nil)) . -2044) (2044 . 2050) (#("Logg" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2044) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) 2048) nil (25898 64120 477945 496000) 0 nil])
([nil nil ((#("next http.Handler" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 17 (fontified t face tree-sitter-hl-face:property)) . 2051)) nil (25898 64120 477942 144000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2050) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . 1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2051) (undo-tree-id1628 . 1) (undo-tree-id1629 . -1) (undo-tree-id1630 . 1)) nil (25898 64120 477940 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 2044 2050 #s(yas--snippet nil (#s(yas--field 1 2050 2050 nil nil nil t nil)) nil 58 nil #s(yas--field 1 2050 2050 nil nil nil t nil) nil nil))) nil (25898 64120 477933 622000) 0 nil])
([nil nil ((2032 . 2033)) nil (25898 64120 477932 226000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2032) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) 2033) nil (25898 64120 477929 851000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2023) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2024) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2025) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2026) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#("w" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2027) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2028) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2029) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2030) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2031) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) 2032) nil (25898 64120 477926 568000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2021) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -2022) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) 2023) nil (25898 64120 477911 342000) 0 nil])
([nil current ((2021 . 2024)) nil (25898 64120 477896 953000) 0 nil])
nil
