(undo-tree-save-format-version . 1)
"b265b192053420c8c10db54cebef7766bfc99ce6"
[nil nil nil nil (25898 20738 392779 163000) 0 nil]
([nil nil ((1 . 13) (t 25898 20703 138921 76000)) nil (25898 20738 392778 361000) 0 nil])
([nil nil ((apply yas--snippet-revive 9 13 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified nil)) . 9) (9 . 13) (#("main" 0 4 (fontified t)) . -9) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 13) nil (25898 20738 392777 569000) 0 nil])
([nil nil ((13 . 15)) nil (25898 20738 392744 76000) 0 nil])
([nil nil ((15 . 24)) nil (25898 20738 392742 954000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -25) (25 . 26) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -25) (25 . 26) (24 . 26)) nil (25898 20738 392742 2000) 0 nil])
([nil nil ((26 . 27)) nil (25898 20738 392738 666000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -28) (28 . 29) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -28) (28 . 29) (26 . 29) (t 25898 20738 399594 753000)) nil (25898 20746 383787 365000) 0 nil])
([nil nil ((29 . 30) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 29) (29 . 30) (28 . 30)) nil (25898 20746 383783 748000) 0 nil])
([nil nil ((30 . 34) (t 25898 20746 390747 228000)) nil (25898 21392 546694 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 65 73 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (14 . 49) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (30 . 38) (#("godotenv" 0 8 (fontified nil)) . 30) (30 . 38) (#("godo" 0 4 (fontified nil)) . 30) (30 . 34) (#("godotenv" 0 8 (fontified nil)) . -30) (30 . 38) (#("godo" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -30) (undo-tree-id57 . -4) (undo-tree-id58 . -4) 34) nil (25898 21392 546694 318000) 0 nil])
([nil nil ((73 . 77)) nil (25898 21392 546692 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil)) (74 . 99) (#("Load(${1:filenames ...string})" 0 30 (fontified nil)) . 74) (74 . 104) (#("Loa" 0 3 (fontified nil)) . 74) (74 . 77) (#("Load" 0 4 (fontified nil)) . -74) (74 . 78) (#("Loa" 0 3 (fontified t face tree-sitter-hl-face:property)) . -74) (undo-tree-id55 . -3) (undo-tree-id56 . -3) 77) nil (25898 21392 546691 12000) 0 nil])
([nil nil ((apply yas--snippet-revive 74 99 #s(yas--snippet nil (#s(yas--field 1 79 98 nil nil nil nil nil)) nil 2 nil #s(yas--field 1 79 98 nil nil nil nil nil) nil nil))) nil (25898 21392 546689 369000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -79) (undo-tree-id36 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -80) (undo-tree-id37 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -81) (undo-tree-id38 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -82) (undo-tree-id39 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -83) (undo-tree-id40 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -84) (undo-tree-id41 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -85) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -86) (undo-tree-id43 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -87) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -88) (undo-tree-id45 . -1) (#("." 0 1 (fontified t)) . -89) (undo-tree-id46 . -1) (#("." 0 1 (fontified t)) . -90) (undo-tree-id47 . -1) (#("." 0 1 (fontified t face tree-sitter-hl-face:operator)) . -91) (undo-tree-id48 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -92) (undo-tree-id49 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -93) (undo-tree-id50 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -94) (undo-tree-id51 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -95) (undo-tree-id52 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -96) (undo-tree-id53 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -97) (undo-tree-id54 . -1) 98) nil (25898 21392 546686 584000) 0 nil])
([nil nil ((80 . 82)) nil (25898 21392 546680 502000) 0 nil])
([nil nil ((82 . 88)) nil (25898 21392 546680 81000) 0 nil])
([nil nil ((22 . 32) (48 . 50) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil)) (85 . 103) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 85) (85 . 108) (#("Get" 0 3 (fontified nil)) . 85) (85 . 88) (#("Getenv" 0 6 (fontified nil)) . -85) (85 . 91) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -85) (undo-tree-id34 . -3) (undo-tree-id35 . -3) 88) nil (25898 21392 546679 69000) 0 nil])
([nil nil ((105 . 109) (104 . 106) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -104) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 105) (104 . 105)) nil (25898 21392 546676 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 97 111 #s(yas--snippet nil (#s(yas--field 1 104 110 nil nil nil t nil)) nil 3 nil #s(yas--field 1 104 110 nil nil nil t nil) nil nil))) nil (25898 21392 546675 934000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (undo-tree-id33 . -1) (111 . 114)) nil (25898 21392 546675 322000) 0 nil])
([nil nil ((113 . 114) (#("	" 0 1 (fontified nil)) . 112) (112 . 113) (112 . 113)) nil (25898 21392 546674 491000) 0 nil])
([nil nil ((114 . 126)) nil (25898 21392 546673 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 151 160 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (30 . 58) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (123 . 132) (#("NewRouter" 0 9 (fontified nil)) . 123) (123 . 132) (#("New" 0 3 (fontified nil)) . 123) (123 . 126) (#("NewRouter" 0 9 (fontified nil)) . -123) (123 . 132) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -123) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 126) nil (25898 21392 546672 347000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -161) (161 . 162) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -161) (161 . 162) (160 . 162)) nil (25898 21392 546670 483000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -170) (170 . 171) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -170) (170 . 171) (164 . 171)) nil (25898 21392 546669 852000) 0 nil])
([nil nil ((170 . 175)) nil (25898 21392 546669 421000) 0 nil])
([nil nil ((apply yas--snippet-revive 201 208 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (57 . 83) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (175 . 182) (#("Handler" 0 7 (fontified nil)) . 175) (175 . 182) (#("Handler" 0 7 (fontified nil)) . -175) (175 . 182)) nil (25898 21392 546668 930000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -192) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 193) nil (25898 21392 546667 758000) 0 nil])
([nil nil ((192 . 193)) nil (25898 21392 546666 756000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -209) (209 . 210) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -209) (209 . 210) (208 . 210)) nil (25898 21392 546666 436000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -210) (210 . 211) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -210) (210 . 211) (209 . 211)) nil (25898 21392 546665 714000) 0 nil])
([nil nil ((209 . 216)) nil (25898 21392 546665 233000) 0 nil])
([nil nil ((209 . 214)) nil (25898 21392 546665 53000) 0 nil])
([nil nil ((223 . 225) (224 . 225) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 223) (223 . 225) (222 . 224)) nil (25898 21392 546664 752000) 0 nil])
([nil nil ((225 . 228)) nil (25898 21392 546664 211000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -227) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 228) nil (25898 21392 546663 811000) 0 nil])
([nil nil ((227 . 229)) nil (25898 21392 546663 59000) 0 nil])
([nil nil ((229 . 230)) nil (25898 21392 546662 809000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil)) (225 . 250) (#("AllowedOrigins: ${1:[]string}," 0 30 (fontified nil)) . 225) (225 . 255) (#("Allow" 0 5 (fontified nil)) . 225) (225 . 230) (#("AllowedOrigins" 0 14 (fontified nil)) . -225) (225 . 239) (#("Allow" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -225) (undo-tree-id25 . -5) (undo-tree-id26 . -5) 230) nil (25898 21392 546662 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 225 250 #s(yas--snippet nil (#s(yas--field 1 241 249 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 241 249 nil nil nil nil nil) nil nil))) nil (25898 21392 546660 595000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -250) (250 . 251) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -250) (250 . 251) (249 . 251)) nil (25898 21392 546660 224000) 0 nil])
([nil nil ((251 . 256) (250 . 252) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -250) (250 . 251)) nil (25898 21392 546659 663000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -251) (undo-tree-id20 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -252) (undo-tree-id21 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -253) (undo-tree-id22 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -254) (undo-tree-id23 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -255) (undo-tree-id24 . -1) 256) nil (25898 21392 546658 821000) 0 nil])
([nil nil ((251 . 252)) nil (25898 21392 546657 188000) 0 nil])
([nil nil ((255 . 258)) nil (25898 21392 546656 868000) 0 nil])
([nil nil ((258 . 264)) nil (25898 21392 546656 517000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil)) (258 . 283) (#("AllowedMethods: ${1:[]string}," 0 30 (fontified nil)) . 258) (258 . 288) (#("Allowe" 0 6 (fontified nil)) . 258) (258 . 264) (#("AllowedMethods" 0 14 (fontified nil)) . -258) (258 . 272) (#("Allowe" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -258) (undo-tree-id18 . -6) (undo-tree-id19 . -6) 264) nil (25898 21392 546655 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 258 283 #s(yas--snippet nil (#s(yas--field 1 274 282 nil nil nil nil nil)) nil 7 nil #s(yas--field 1 274 282 nil nil nil nil nil) nil nil))) nil (25898 21392 546654 112000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -283) (283 . 284) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -283) (283 . 284) (282 . 284)) nil (25898 21392 546653 621000) 0 nil])
([nil nil ((284 . 287) (283 . 285) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -283) (283 . 284)) nil (25898 21392 546652 720000) 0 nil])
([nil nil ((287 . 288)) nil (25898 21392 546652 89000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -283) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("G" 0 1 (fontified t)) . -284) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("e" 0 1 (fontified t)) . -285) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("t" 0 1 (fontified t)) . -286) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t)) . -287) (undo-tree-id16 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -288) (undo-tree-id17 . -1) 289) nil (25898 21392 546651 277000) 0 nil])
([nil nil ((nil rear-nonsticky nil 315 . 316) (nil fontified nil 283 . 316) (283 . 316) 282) nil (25898 21392 546646 217000) 0 nil])
([nil nil ((318 . 321)) nil (25898 21392 546645 496000) 0 nil])
([nil nil ((321 . 327)) nil (25898 21392 546645 226000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil)) (321 . 346) (#("AllowedHeaders: ${1:[]string}," 0 30 (fontified nil)) . 321) (321 . 351) (#("Allowe" 0 6 (fontified nil)) . 321) (321 . 327) (#("AllowedHeaders" 0 14 (fontified nil)) . -321) (321 . 335) (#("Allowe" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -321) (undo-tree-id2 . -6) (undo-tree-id3 . -6) 327) nil (25898 21392 546644 554000) 0 nil])
([nil nil ((apply yas--snippet-revive 321 346 #s(yas--snippet nil (#s(yas--field 1 337 345 nil nil nil nil nil)) nil 8 nil #s(yas--field 1 337 345 nil nil nil nil nil) nil nil))) nil (25898 21392 546634 796000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -346) (346 . 347) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -346) (346 . 347) (345 . 347)) nil (25898 21392 546634 235000) 0 nil])
([nil nil ((347 . 348) (346 . 348) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . -346) (346 . 347)) nil (25898 21392 546630 77000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (fontified nil)) . 357) (undo-tree-id93 . -1) (356 . 359) (t 25898 21392 647554 294000)) nil (25898 21474 84134 578000) 0 nil])
([nil nil ((359 . 378)) nil (25898 21474 84133 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 375 386 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (375 . 386) (#("NewRouter()" 0 11 (fontified nil)) . 375) (375 . 386) (#("New" 0 3 (fontified nil)) . 375) (375 . 378) (#("NewRouter" 0 9 (fontified nil)) . -375) (375 . 384) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -375) (undo-tree-id91 . -3) (undo-tree-id92 . -3) 378) nil (25898 21474 84133 135000) 0 nil])
([nil nil ((388 . 389) (#("	" 0 1 (fontified nil)) . 387) (undo-tree-id90 . -1) (386 . 389)) nil (25898 21474 84131 943000) 0 nil])
([nil nil ((387 . 388)) nil (25898 21474 84131 312000) 0 nil])
([nil nil ((388 . 391)) nil (25898 21474 84130 991000) 0 nil])
([nil nil ((apply yas--snippet-revive 388 396 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (388 . 396) (#("v1Router" 0 8 (fontified nil)) . 388) (388 . 396) (#("v1R" 0 3 (fontified nil)) . 388) (388 . 391) (#("v1Router" 0 8 (fontified nil)) . -388) (388 . 396) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -388) (undo-tree-id88 . -3) (undo-tree-id89 . -3) 391) nil (25898 21474 84130 39000) 0 nil])
([nil nil ((396 . 397)) nil (25898 21474 84127 304000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -388) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -389) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -390) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -391) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -392) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -393) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -394) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -395) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("." 0 1 (fontified t)) . -396) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 397) nil (25898 21474 84125 611000) 0 nil])
([nil nil ((388 . 393)) nil (25898 21474 84119 339000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil)) (390 . 433) (#("Mount(${1:pattern string}, ${2:handler http.Handler})" 0 53 (fontified nil)) . 390) (390 . 443) (#("Mou" 0 3 (fontified nil)) . 390) (390 . 393) (#("Mount" 0 5 (fontified nil)) . -390) (390 . 395) (#("Mou" 0 3 (fontified t face tree-sitter-hl-face:property)) . -390) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 393) nil (25898 21474 84118 457000) 0 nil])
([nil nil ((397 . 399) (396 . 398) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -396) (undo-tree-id66 . -1) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 397) (undo-tree-id67 . -14) (396 . 397)) nil (25898 21474 84116 894000) 0 nil])
([nil nil ((397 . 398)) nil (25898 21474 84115 41000) 0 nil])
([nil nil ((404 . 406) (#("handler http.Handler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 12 (fontified nil face tree-sitter-hl-face:variable) 12 13 (fontified nil) 13 20 (fontified nil face tree-sitter-hl-face:property)) . 404) (undo-tree-id65 . -20) (403 . 404)) nil (25898 21474 84114 79000) 0 nil])
([nil nil ((apply yas--snippet-revive 403 411 #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil #s(yas--field 2 403 411 nil nil nil t nil) nil)) (403 . 411) (#("v1Router" 0 8 (fontified nil)) . 403) (undo-tree-id59 . -8) (403 . 411) (#("v1R" 0 3 (fontified nil)) . 403) (undo-tree-id60 . -3) (403 . 406) (#("v1Router" 0 8 (fontified nil)) . -403) (undo-tree-id61 . -8) (403 . 411) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -403) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) 406) nil (25898 21474 84111 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 390 412 #s(yas--snippet nil (#s(yas--field 1 396 401 nil nil nil t #s(yas--field 2 403 411 nil nil nil t nil)) #s(yas--field 2 403 411 nil nil nil t nil)) nil 11 nil #s(yas--field 2 403 411 nil nil nil t nil) nil nil))) nil (25898 21474 84097 869000) 0 nil])
([nil nil ((414 . 415) (#("	" 0 1 (fontified nil)) . 413) (undo-tree-id181 . -1) (412 . 415) (t 25898 21474 184219 527000)) nil (25898 21522 266535 715000) 0 nil])
([nil nil ((415 . 424)) nil (25898 21522 266534 382000) 0 nil])
([nil nil ((23 . 35) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil)) (420 . 469) (#("ListenAndServe(${1:addr string}, ${2:handler http.Handler})" 0 59 (fontified nil)) . 420) (420 . 479) (#("List" 0 4 (fontified nil)) . 420) (420 . 424) (#("ListenAndServe" 0 14 (fontified nil)) . -420) (420 . 434) (#("List" 0 4 (fontified t face tree-sitter-hl-face:property)) . -420) (undo-tree-id179 . -4) (undo-tree-id180 . -4) 424) nil (25898 21522 266533 390000) 0 nil])
([nil nil ((448 . 451) (#("addr string" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 11 (fontified nil face tree-sitter-hl-face:variable)) . 448) (447 . 448)) nil (25898 21522 266531 236000) 0 nil])
([nil nil ((apply yas--snippet-revive 432 474 #s(yas--snippet nil (#s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) #s(yas--field 2 453 473 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 447 451 nil nil nil t #s(yas--field 2 453 473 nil nil nil nil nil)) nil nil))) nil (25898 21522 266530 455000) 0 nil])
([nil nil ((160 . 168)) nil (25898 21522 266529 783000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -461) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -462) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -463) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -464) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -465) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -466) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -467) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#(" " 0 1 (fontified t)) . -468) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -469) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -470) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -471) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -472) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("." 0 1 (fontified t)) . -473) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:property)) . -474) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -475) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -476) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -477) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -478) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -479) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -480) (undo-tree-id178 . -1) 481) nil (25898 21522 266526 607000) 0 nil])
([nil nil ((461 . 462)) nil (25898 21522 266408 594000) 0 nil])
([nil nil ((435 . 442) (t 25898 21522 365657 812000)) nil (25898 21547 141543 517000) 0 nil])
([nil nil ((472 . 480)) nil (25898 21547 141542 905000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -478) (undo-tree-id200 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -479) (undo-tree-id201 . -1) 480) nil (25898 21547 141542 194000) 0 nil])
([nil nil ((478 . 480)) nil (25898 21547 141540 421000) 0 nil])
([nil nil ((23 . 30) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil)) (476 . 493) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 476) (476 . 498) (#("Prin" 0 4 (fontified nil)) . 476) (476 . 480) (#("Println" 0 7 (fontified nil)) . -476) (476 . 483) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -476) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -3) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) 480) nil (25898 21547 141539 409000) 0 nil])
([nil nil ((492 . 494) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 492) (undo-tree-id182 . -8) (undo-tree-id183 . -5) (undo-tree-id184 . -6) (491 . 492)) nil (25898 21547 141532 626000) 0 nil])
([nil nil ((apply yas--snippet-revive 483 495 #s(yas--snippet nil (#s(yas--field 1 491 494 nil nil nil t nil)) nil 14 nil #s(yas--field 1 491 494 nil nil nil t nil) nil nil))) nil (25898 21547 141521 325000) 0 nil])
([nil nil ((441 . 442) (#("	" 0 1 (fontified nil)) . 440) (undo-tree-id288 . -1) (439 . 442) (t 25898 21547 186894 265000)) nil (25898 41465 951032 483000) 0 nil])
([nil nil ((442 . 445)) nil (25898 41465 951031 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 442 450 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (442 . 450) (#("v1Router" 0 8 (fontified nil)) . 442) (442 . 450) (#("v1R" 0 3 (fontified nil)) . 442) (442 . 445) (#("v1Router" 0 8 (fontified nil)) . -442) (442 . 450) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -442) (undo-tree-id286 . -3) (undo-tree-id287 . -3) 445) nil (25898 41465 951030 289000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -455) (455 . 456) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -455) (455 . 456) (450 . 456)) nil (25898 41465 951027 854000) 0 nil])
([nil nil ((455 . 457) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -455) (455 . 456)) nil (25898 41465 951026 351000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -450) (undo-tree-id285 . -1) 451) nil (25898 41465 951025 429000) 0 nil])
([nil nil ((450 . 451)) nil (25898 41465 951024 548000) 0 nil])
([nil nil ((456 . 466)) nil (25898 41465 951024 117000) 0 nil])
([nil nil ((467 . 469)) nil (25898 41465 951023 666000) 0 nil])
([nil nil ((133 . 135)) nil (25898 41465 951023 275000) 0 nil])
([nil nil ((135 . 149)) nil (25898 41465 951022 654000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -143) (undo-tree-id284 . -1) 144) nil (25898 41465 951021 973000) 0 nil])
([nil nil ((143 . 144)) nil (25898 41465 951020 951000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -157) (157 . 158) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -157) (157 . 158) (149 . 158)) nil (25898 41465 951020 260000) 0 nil])
([nil nil ((157 . 169)) nil (25898 41465 951019 558000) 0 nil])
([nil nil ((apply yas--snippet-revive 164 178 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (164 . 178) (#("ResponseWriter" 0 14 (fontified nil)) . 164) (164 . 178) (#("Respo" 0 5 (fontified nil)) . 164) (164 . 169) (#("ResponseWriter" 0 14 (fontified nil)) . -164) (164 . 178) (#("Respo" 0 5 (fontified t face tree-sitter-hl-face:type)) . -164) (undo-tree-id282 . -5) (undo-tree-id283 . -5) 169) nil (25898 41465 951018 617000) 0 nil])
([nil nil ((178 . 188)) nil (25898 41465 951016 573000) 0 nil])
([nil nil ((188 . 191)) nil (25898 41465 951016 172000) 0 nil])
([nil nil ((apply yas--snippet-revive 188 195 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (188 . 195) (#("Request" 0 7 (fontified nil)) . 188) (188 . 195) (#("Req" 0 3 (fontified nil)) . 188) (188 . 191) (#("Request" 0 7 (fontified nil)) . -188) (188 . 195) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -188) (undo-tree-id280 . -3) (undo-tree-id281 . -3) 191) nil (25898 41465 951015 280000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -198) (198 . 199) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -198) (198 . 199) (196 . 199)) nil (25898 41465 951013 16000) 0 nil])
([nil nil ((199 . 200) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 199) (199 . 200) (198 . 200)) nil (25898 41465 951012 134000) 0 nil])
([nil nil ((200 . 206)) nil (25898 41465 951010 952000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 249 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (28 . 53) (29 . 32) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . 206) (206 . 221) (#("RespondWithJSON" 0 15 (fontified nil)) . -206) (206 . 221)) nil (25898 41465 951010 371000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -250) (250 . 251) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -250) (250 . 251) (249 . 251)) nil (25898 41465 951008 928000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:property)) . -246) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:property)) . -247) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -248) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -249) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . 1) (undo-tree-id275 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -250) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . 1) (undo-tree-id279 . -1) 251) nil (25898 41465 951007 295000) 0 nil])
([nil nil ((246 . 247)) nil (25898 41465 951001 524000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil)) (234 . 303) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 234) (234 . 319) (#("RespondWithJS" 0 13 (fontified nil)) . 234) (234 . 247) (#("RespondWithJSON" 0 15 (fontified nil)) . -234) (234 . 249) (#("RespondWithJS" 0 13 (fontified t face tree-sitter-hl-face:property)) . -234) (undo-tree-id263 . -13) (undo-tree-id264 . -13) 247) nil (25898 41465 951000 462000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 251) (250 . 251)) nil (25898 41465 950998 449000) 0 nil])
([nil nil ((254 . 256) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 254) (253 . 254)) nil (25898 41465 950997 928000) 0 nil])
([nil nil ((259 . 263) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 259) (258 . 259)) nil (25898 41465 950997 196000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -262) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 263) nil (25898 41465 950996 64000) 0 nil])
([nil nil ((262 . 263)) nil (25898 41465 950994 852000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -258) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -259) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -260) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -261) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("." 0 1 (fontified t)) . -262) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 263) nil (25898 41465 950993 700000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 259 #s(yas--snippet nil (#s(yas--field 1 250 251 nil nil nil t #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil))) #s(yas--field 2 253 256 nil nil nil t #s(yas--field 3 258 258 nil nil nil t nil)) #s(yas--field 3 258 258 nil nil nil t nil)) nil 21 nil #s(yas--field 3 258 258 nil nil nil t nil) nil nil))) nil (25898 41465 950989 221000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -259) (259 . 260) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -259) (259 . 260) (258 . 260)) nil (25898 41465 950988 390000) 0 nil])
([nil nil ((259 . 263)) nil (25898 41465 950987 197000) 0 nil])
([nil nil ((268 . 270) (267 . 269) (#("\"" 0 1 (fontified nil)) . -267) (263 . 268)) nil (25898 41465 950986 576000) 0 nil])
([nil nil ((258 . 263)) nil (25898 41465 950985 514000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -260) (undo-tree-id248 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -261) (undo-tree-id249 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -262) (undo-tree-id250 . -1) 263) nil (25898 41465 950984 693000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -265) (265 . 266) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -265) (265 . 266) (260 . 266)) nil (25898 41465 950981 977000) 0 nil])
([nil nil ((265 . 273)) nil (25898 41465 950981 26000) 0 nil])
([nil nil ((273 . 274)) nil (25898 41465 950980 334000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -271) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t)) . -272) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -273) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 274) nil (25898 41465 950978 711000) 0 nil])
([nil nil ((271 . 278)) nil (25898 41465 950949 706000) 0 nil])
([nil nil ((296 . 298) (t 25898 41465 958631 179000)) nil (25898 41664 498108 753000) 0 nil])
([nil nil ((298 . 315)) nil (25898 41664 498108 272000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -316) (316 . 317) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -316) (316 . 317) (315 . 317)) nil (25898 41664 498107 671000) 0 nil])
([nil nil ((316 . 326)) nil (25898 41664 498106 709000) 0 nil])
([nil nil ((apply yas--snippet-revive 323 337 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (323 . 337) (#("ResponseWriter" 0 14 (fontified nil)) . 323) (323 . 337) (#("Res" 0 3 (fontified nil)) . 323) (323 . 326) (#("ResponseWriter" 0 14 (fontified nil)) . -323) (323 . 337) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -323) (undo-tree-id682 . -3) (undo-tree-id683 . -3) 326) nil (25898 41664 498105 837000) 0 nil])
([nil nil ((337 . 341)) nil (25898 41664 498104 144000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -340) (undo-tree-id681 . -1) 341) nil (25898 41664 498103 493000) 0 nil])
([nil nil ((340 . 342)) nil (25898 41664 498102 571000) 0 nil])
([nil nil ((342 . 352)) nil (25898 41664 498102 50000) 0 nil])
([nil nil ((apply yas--snippet-revive 347 354 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (347 . 354) (#("Request" 0 7 (fontified nil)) . 347) (347 . 354) (#("Reque" 0 5 (fontified nil)) . 347) (347 . 352) (#("Request" 0 7 (fontified nil)) . -347) (347 . 354) (#("Reque" 0 5 (fontified t face tree-sitter-hl-face:type)) . -347) (undo-tree-id679 . -5) (undo-tree-id680 . -5) 352) nil (25898 41664 498101 329000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -357) (357 . 358) (#("}" 0 1 (fontified nil)) . -357) (357 . 358) (355 . 358)) nil (25898 41664 498098 603000) 0 nil])
([nil nil ((358 . 359) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 358) (358 . 359) (357 . 359)) nil (25898 41664 498097 501000) 0 nil])
([nil nil ((359 . 365)) nil (25898 41664 498096 540000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil)) (365 . 426) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 365) (365 . 441) (#("RespondWithError" 0 16 (fontified nil)) . -365) (365 . 381)) nil (25898 41664 498095 989000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 383) (382 . 383)) nil (25898 41664 498095 327000) 0 nil])
([nil nil ((386 . 388) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 386) (385 . 386)) nil (25898 41664 498094 616000) 0 nil])
([nil nil ((391 . 397) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 391) (390 . 391)) nil (25898 41664 498093 624000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -398) (398 . 399) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -398) (398 . 399) (397 . 399)) nil (25898 41664 498092 943000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -394) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 395) nil (25898 41664 498091 660000) 0 nil])
([nil nil ((397 . 409)) nil (25898 41664 498090 909000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -411) (411 . 412) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -411) (411 . 412) (410 . 412)) nil (25898 41664 498090 408000) 0 nil])
([nil nil ((419 . 432) (418 . 420) (#("\"" 0 1 (fontified nil)) . -418) (411 . 419)) nil (25898 41664 498089 456000) 0 nil])
([nil nil ((432 . 440)) nil (25898 41664 498088 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 365 443 #s(yas--snippet nil (#s(yas--field 1 382 383 nil nil nil t #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil))) #s(yas--field 2 385 388 nil nil nil t #s(yas--field 3 390 442 nil nil nil t nil)) #s(yas--field 3 390 442 nil nil nil t nil)) nil 24 nil #s(yas--field 3 390 442 nil nil nil t nil) nil nil))) nil (25898 41664 498088 13000) 0 nil])
([nil nil ((396 . 397)) nil (25898 41664 498087 492000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -396) (undo-tree-id676 . -1) 397) nil (25898 41664 498086 671000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -397) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -398) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -399) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -400) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -401) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (#(" " 0 1 (fontified t)) . -402) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -403) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -404) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -405) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -406) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -407) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -408) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -409) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -410) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -411) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -412) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -413) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("o" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -414) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -415) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#(":" 0 1 (fontified t)) . -416) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(" " 0 1 (fontified t)) . -417) (undo-tree-id675 . -1) 418) nil (25898 41664 498081 782000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -390) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -391) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -392) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -393) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -394) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -395) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -396) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) 397) nil (25898 41664 498003 664000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -413) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . 1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 414) nil (25898 41664 497755 54000) 0 nil])
([nil nil ((752 . 755) (t 25898 41664 505415 95000)) nil (25898 41707 859889 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 752 768 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (752 . 768) (#("readinessHandler" 0 16 (fontified nil)) . 752) (752 . 768) (#("rea" 0 3 (fontified nil)) . 752) (752 . 755) (#("readinessHandler" 0 16 (fontified nil)) . -752) (752 . 768) (#("rea" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -752) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 755) nil (25898 41707 859887 878000) 0 nil])
([nil nil ((769 . 771)) nil (25898 41707 859885 193000) 0 nil])
([nil nil ((771 . 774)) nil (25898 41707 859884 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 771 779 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (771 . 779) (#("v1Router" 0 8 (fontified nil)) . 771) (771 . 779) (#("v1R" 0 3 (fontified nil)) . 771) (771 . 774) (#("v1Router" 0 8 (fontified nil)) . -771) (771 . 779) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -771) (undo-tree-id700 . -3) (undo-tree-id701 . -3) 774) nil (25898 41707 859883 510000) 0 nil])
([nil nil ((779 . 780)) nil (25898 41707 859880 624000) 0 nil])
([nil nil ((780 . 781)) nil (25898 41707 859879 953000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -784) (784 . 785) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -784) (784 . 785) (781 . 785)) nil (25898 41707 859878 951000) 0 nil])
([nil nil ((785 . 789) (784 . 786) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -784) (784 . 785)) nil (25898 41707 859877 358000) 0 nil])
([nil nil ((790 . 797)) nil (25898 41707 859875 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 792 804 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (792 . 804) (#("errorHandler" 0 12 (fontified nil)) . 792) (792 . 804) (#("error" 0 5 (fontified nil)) . 792) (792 . 797) (#("errorHandler" 0 12 (fontified nil)) . -792) (792 . 804) (#("error" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -792) (undo-tree-id684 . -5) (undo-tree-id685 . -5) (undo-tree-id686 . -2) (undo-tree-id687 . -3) (undo-tree-id688 . -4) (undo-tree-id689 . -5) (undo-tree-id690 . -5) (undo-tree-id691 . -5) (undo-tree-id692 . -5) (undo-tree-id693 . -5) (undo-tree-id694 . -5) (undo-tree-id695 . -5) (undo-tree-id696 . -5) (undo-tree-id697 . -5) (undo-tree-id698 . -5) (undo-tree-id699 . -5) 797) nil (25898 41707 859872 469000) 0 nil])
([nil nil ((475 . 477) (t 25898 41707 867817 8000)) nil (25898 41855 150390 421000) 0 nil])
([nil nil ((477 . 481)) nil (25898 41855 150390 121000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -477) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -478) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -479) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -480) (undo-tree-id756 . -1) (undo-tree-id757 . -1) 481) nil (25898 41855 150389 419000) 0 nil])
([nil nil ((454 . 457)) nil (25898 41855 150385 702000) 0 nil])
([nil nil ((480 . 490)) nil (25898 41855 150385 211000) 0 nil])
([nil nil ((490 . 496)) nil (25898 41855 150384 680000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -494) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -495) (undo-tree-id748 . -1) (undo-tree-id749 . -1) 496) nil (25898 41855 150384 129000) 0 nil])
([nil nil ((494 . 504)) nil (25898 41855 150382 206000) 0 nil])
([nil nil ((75 . 86) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil)) (501 . 515) (#("Atoi(${1:s string})" 0 19 (fontified nil)) . 501) (501 . 520) (#("Ato" 0 3 (fontified nil)) . 501) (501 . 504) (#("Atoi" 0 4 (fontified nil)) . -501) (501 . 505) (#("Ato" 0 3 (fontified t face tree-sitter-hl-face:property)) . -501) (undo-tree-id744 . -3) (undo-tree-id745 . -3) 504) nil (25898 41855 150381 344000) 0 nil])
([nil nil ((518 . 521) (#("s string" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 8 (fontified nil face tree-sitter-hl-face:variable)) . 518) (517 . 518)) nil (25898 41855 150379 70000) 0 nil])
([nil nil ((apply yas--snippet-revive 517 524 #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil #s(yas--field 1 517 524 nil nil nil t nil) nil)) (517 . 524) (#("portStr" 0 7 (fontified nil)) . 517) (517 . 524) (#("port" 0 4 (fontified nil)) . 517) (517 . 521) (#("portStr" 0 7 (fontified nil)) . -517) (517 . 524) (#("port" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -517) (undo-tree-id742 . -4) (undo-tree-id743 . -4) 521) nil (25898 41855 150378 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 512 525 #s(yas--snippet nil (#s(yas--field 1 517 524 nil nil nil t nil)) nil 28 nil #s(yas--field 1 517 524 nil nil nil t nil) nil nil))) nil (25898 41855 150376 174000) 0 nil])
([nil nil ((525 . 527)) nil (25898 41855 150375 884000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -530) (530 . 531) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -530) (530 . 531) (527 . 531)) nil (25898 41855 150374 882000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -529) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . 1) (undo-tree-id738 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -530) (undo-tree-id739 . -1) (undo-tree-id740 . 1) (undo-tree-id741 . -1) 531) nil (25898 41855 150374 60000) 0 nil])
([nil nil ((529 . 541)) nil (25898 41855 150370 944000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -542) (542 . 543) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -542) (542 . 543) (541 . 543)) nil (25898 41855 150370 233000) 0 nil])
([nil nil ((543 . 545) (544 . 545) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 543) (543 . 545) (542 . 544)) nil (25898 41855 150369 41000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150367 999000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -545) (undo-tree-id728 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -546) (undo-tree-id729 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -547) (undo-tree-id730 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -548) (undo-tree-id731 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -549) (undo-tree-id732 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -550) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t)) . -551) (undo-tree-id734 . -1) 552) nil (25898 41855 150366 857000) 0 nil])
([nil nil ((545 . 551)) nil (25898 41855 150363 290000) 0 nil])
([nil nil ((542 . 545)) nil (25898 41855 150363 79000) 0 nil])
([nil nil ((545 . 552)) nil (25898 41855 150362 729000) 0 nil])
([nil nil ((552 . 553)) nil (25898 41855 150362 188000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil)) (549 . 566) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 549) (549 . 571) (#("Prin" 0 4 (fontified nil)) . 549) (549 . 553) (#("Println" 0 7 (fontified nil)) . -549) (549 . 556) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -549) (undo-tree-id726 . -4) (undo-tree-id727 . -4) 553) nil (25898 41855 150361 256000) 0 nil])
([nil nil ((558 . 563) (557 . 559) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -557) (undo-tree-id724 . -1) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 558) (undo-tree-id725 . -8) (557 . 558)) nil (25898 41855 150359 102000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -558) (undo-tree-id719 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -559) (undo-tree-id720 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -560) (undo-tree-id721 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -561) (undo-tree-id722 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -562) (undo-tree-id723 . -1) 563) nil (25898 41855 150356 938000) 0 nil])
([nil nil ((558 . 561)) nil (25898 41855 150354 714000) 0 nil])
([nil nil ((561 . 581)) nil (25898 41855 150354 373000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -578) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -579) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -580) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 581) nil (25898 41855 150353 421000) 0 nil])
([nil nil ((578 . 591)) nil (25898 41855 150339 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 549 593 #s(yas--snippet nil (#s(yas--field 1 557 592 nil nil nil t nil)) nil 30 nil #s(yas--field 1 557 592 nil nil nil t nil) nil nil))) nil (25898 41855 150336 970000) 0 nil])
([nil nil ((#("	port, err := strconv.Atoi(portStr)
	if err != nil {
		fmt.Println(\"Invalid port value in environment\")
		return
	}
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 7 (fontified t) 7 10 (fontified t face tree-sitter-hl-face:variable) 10 11 (fontified t) 11 13 (fontified t face tree-sitter-hl-face:operator) 13 14 (fontified t) 14 21 (fontified t face tree-sitter-hl-face:variable) 21 22 (fontified t) 22 26 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 34 (fontified t face tree-sitter-hl-face:variable) 34 35 (fontified t face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t) 36 37 (fontified t) 37 39 (fontified t face tree-sitter-hl-face:keyword) 39 40 (fontified t) 40 43 (fontified t face tree-sitter-hl-face:variable) 43 44 (fontified t) 44 46 (fontified t face tree-sitter-hl-face:operator) 46 47 (fontified t) 47 50 (fontified t face tree-sitter-hl-face:constant\.builtin) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 55 (fontified t) 55 58 (fontified t face tree-sitter-hl-face:variable) 58 59 (fontified t) 59 66 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 66 67 (fontified t face (rainbow-delimiters-depth-3-face)) 67 102 (fontified t face tree-sitter-hl-face:string) 102 103 (fontified t face (rainbow-delimiters-depth-3-face)) 103 104 (fontified t) 104 106 (fontified t) 106 112 (fontified t face tree-sitter-hl-face:keyword) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t face (rainbow-delimiters-depth-2-face)) 115 116 (fontified t)) . 490) (undo-tree-id788 . 13) (undo-tree-id789 . -115) (undo-tree-id790 . -114) (undo-tree-id791 . -114) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -67) (undo-tree-id796 . 15) (undo-tree-id797 . -1) (undo-tree-id798 . -115) (undo-tree-id799 . -115) (undo-tree-id800 . -114) (undo-tree-id801 . -114) (undo-tree-id802 . -114) (undo-tree-id803 . -114) (undo-tree-id804 . -114) (undo-tree-id805 . -114) (undo-tree-id806 . -116) (undo-tree-id807 . -1) (undo-tree-id808 . -114) (undo-tree-id809 . -114) (undo-tree-id810 . -114) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -5) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -116) 491 (t 25898 41855 159207 708000)) nil (25898 41909 750665 796000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -465) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -466) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -467) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 468) nil (25898 41909 750650 767000) 0 nil])
([nil nil ((846 . 850) (t 25898 41909 850732 655000)) nil (25898 41960 226841 431000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil)) (850 . 890) (#("FormatString(${1:state fmt.State}, ${2:verb rune})" 0 50 (fontified nil)) . 850) (850 . 900) (#("FormatString" 0 12 (fontified nil)) . -850) (850 . 862)) nil (25898 41960 226840 789000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -865) (865 . 866) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -865) (864 . 866) (863 . 865) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -863) (#("state fmt.State" 0 5 (fontified nil face tree-sitter-hl-face:variable) 5 6 (fontified nil) 6 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 15 (fontified nil face tree-sitter-hl-face:property)) . 864) (863 . 864)) nil (25898 41960 226839 968000) 0 nil])
([nil nil ((865 . 867)) nil (25898 41960 226838 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 880 #s(yas--snippet nil (#s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) #s(yas--field 2 870 879 nil nil nil nil nil)) nil 31 nil #s(yas--field 1 863 868 nil nil nil t #s(yas--field 2 870 879 nil nil nil nil nil)) nil nil))) nil (25898 41960 226838 375000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -879) (undo-tree-id855 . -1) (undo-tree-id856 . 1) (undo-tree-id857 . -1) 880) nil (25898 41960 226837 633000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -869) (undo-tree-id845 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -870) (undo-tree-id846 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -871) (undo-tree-id847 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -872) (undo-tree-id848 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -873) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t)) . -874) (undo-tree-id850 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -875) (undo-tree-id851 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -876) (undo-tree-id852 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -877) (undo-tree-id853 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -878) (undo-tree-id854 . -1) 879) nil (25898 41960 226835 139000) 0 nil])
([nil nil ((873 . 874) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -873) (873 . 874)) nil (25898 41960 226830 841000) 0 nil])
([nil nil ((869 . 870)) nil (25898 41960 226830 239000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -850) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (#("o" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -851) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -852) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("m" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -853) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -854) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -855) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#("S" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -856) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -857) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -858) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -859) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -860) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("g" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -861) (undo-tree-id844 . -1) 862) nil (25898 41960 226828 656000) 0 nil])
([nil nil ((850 . 851)) nil (25898 41960 226819 980000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -850) (undo-tree-id821 . -1) 851) nil (25898 41960 226819 409000) 0 nil])
([nil nil ((850 . 856)) nil (25898 41960 226818 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 850 857 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (850 . 857) (#("Sprintf" 0 7 (fontified nil)) . 850) (850 . 857) (#("Sprint" 0 6 (fontified nil)) . 850) (850 . 856) (#("Sprintf" 0 7 (fontified nil)) . -850) (850 . 857) (#("Sprint" 0 6 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -850) (undo-tree-id819 . -6) (undo-tree-id820 . -6) 856) nil (25898 41960 226815 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -76) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (#("	" 0 1 (fontified t)) . -77) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#("\"" 0 1 (fontified t)) . -78) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (#("s" 0 1 (fontified t)) . -79) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("t" 0 1 (fontified t)) . -80) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("r" 0 1 (fontified t)) . -81) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("c" 0 1 (fontified t)) . -82) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("o" 0 1 (fontified t)) . -83) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("n" 0 1 (fontified t)) . -84) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("v" 0 1 (fontified t)) . -85) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -86) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 87 (t 25898 41960 235219 738000)) nil (25898 41972 165178 607000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -280) (280 . 281) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -280) (280 . 281) (279 . 281) (#("`" 0 1 (fontified nil)) . -279) (278 . 280) (t 25898 41972 266336 502000)) nil (25898 42330 501339 211000) 0 nil])
([nil nil ((280 . 281)) nil (25898 42330 501337 768000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:string)) . -280) (undo-tree-id912 . -1) 281) nil (25898 42330 501336 957000) 0 nil])
([nil nil ((286 . 292) (285 . 287) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -285) (280 . 286)) nil (25898 42330 501335 524000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -265) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 266) nil (25898 42330 501333 991000) 0 nil])
([nil nil ((265 . 266)) nil (25898 42330 501317 49000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -296) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) 297 (t 25898 42330 601876 267000)) nil (25898 42334 368739 942000) 0 nil])
([nil nil ((296 . 297)) nil (25898 42334 368729 723000) 0 nil])
([nil nil ((nil rear-nonsticky nil 41 . 42) (nil fontified nil 14 . 42) (14 . 42) (t 25898 42334 470915 3000)) nil (25898 61691 716472 253000) 0 nil])
([nil nil ((460 . 462) (t 25898 61691 723747 897000)) nil (25898 62106 595066 67000) 0 nil])
([nil nil ((nil rear-nonsticky nil 509 . 510) (nil fontified nil 462 . 510) (462 . 510)) nil (25898 62106 595060 829000) 0 nil])
([nil nil ((187 . 189) (t 25898 62106 602508 74000)) nil (25898 62175 471214 347000) 0 nil])
([nil nil ((189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25898 62175 471211 973000) 0 nil])
([nil nil ((190 . 193)) nil (25898 62175 471210 17000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -191) (undo-tree-id32 . -1) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -192) (undo-tree-id33 . -1) 193) nil (25898 62175 471207 712000) 0 nil])
([nil nil ((191 . 207)) nil (25898 62175 471204 360000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -187) (undo-tree-id11 . -1) (#("	" 0 1 (fontified t)) . -188) (undo-tree-id12 . -1) (#("\"" 0 1 (fontified t)) . -189) (undo-tree-id13 . -1) (#("i" 0 1 (fontified t)) . -190) (undo-tree-id14 . -1) (#("n" 0 1 (fontified t)) . -191) (undo-tree-id15 . -1) (#("t" 0 1 (fontified t)) . -192) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t)) . -193) (undo-tree-id17 . -1) (#("r" 0 1 (fontified t)) . -194) (undo-tree-id18 . -1) (#("n" 0 1 (fontified t)) . -195) (undo-tree-id19 . -1) (#("a" 0 1 (fontified t)) . -196) (undo-tree-id20 . -1) (#("l" 0 1 (fontified t)) . -197) (undo-tree-id21 . -1) (#("/" 0 1 (fontified t)) . -198) (undo-tree-id22 . -1) (#("d" 0 1 (fontified t)) . -199) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -200) (undo-tree-id24 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t)) . -202) (undo-tree-id26 . -1) (#("b" 0 1 (fontified t)) . -203) (undo-tree-id27 . -1) (#("a" 0 1 (fontified t)) . -204) (undo-tree-id28 . -1) (#("s" 0 1 (fontified t)) . -205) (undo-tree-id29 . -1) (#("e" 0 1 (fontified t)) . -206) (undo-tree-id30 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -207) (undo-tree-id31 . -1) 208) nil (25898 62175 471200 100000) 0 nil])
([nil nil ((187 . 189) 170) nil (25898 62175 471188 995000) 0 nil])
([nil nil ((190 . 196) (189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25898 62175 471187 109000) 0 nil])
([nil nil ((apply yas--snippet-revive 190 209 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (190 . 209) (#("go-blog-aggregator/" 0 19 (fontified nil)) . 190) (190 . 209) (#("go-blo" 0 3 (face tree-sitter-hl-face:string fontified nil) 3 6 (fontified nil)) . 190) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (193 . 196) (#("go-blog-aggregator/" 0 19 (fontified nil)) . -193) (193 . 212) (#("blo" 0 3 (face tree-sitter-hl-face:string fontified t)) . -193) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 196) nil (25898 62175 471183 757000) 0 nil])
([nil nil ((209 . 212)) nil (25898 62175 471179 566000) 0 nil])
([nil nil ((apply yas--snippet-revive 209 218 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (209 . 218) (#("internal/" 0 9 (fontified nil)) . 209) (209 . 218) (#("int" 0 3 (fontified nil)) . 209) (209 . 212) (#("internal/" 0 9 (fontified nil)) . -209) (209 . 218) (#("int" 0 3 (face tree-sitter-hl-face:string fontified t)) . -209) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 212) nil (25898 62175 471177 192000) 0 nil])
([nil nil ((218 . 220)) nil (25898 62175 471173 351000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -219) (undo-tree-id4 . -1) 220) nil (25898 62175 471171 465000) 0 nil])
([nil nil ((219 . 220)) nil (25898 62175 471168 601000) 0 nil])
([nil nil ((220 . 221)) nil (25898 62175 471166 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 218 226 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (218 . 226) (#("database" 0 8 (fontified nil)) . 218) (218 . 226) (#("dat" 0 3 (fontified nil)) . 218) (218 . 221) (#("database" 0 8 (fontified nil)) . -218) (218 . 226) (#("dat" 0 3 (face tree-sitter-hl-face:string fontified t)) . -218) (undo-tree-id0 . -3) (undo-tree-id1 . -3) (undo-tree-id2 . -2) (undo-tree-id3 . -3) 221) nil (25898 62175 471161 827000) 0 nil])
([nil nil ((611 . 612) (#("	" 0 1 (fontified nil)) . 610) (undo-tree-id56 . -1) (609 . 612) (t 25898 62175 479642 304000)) nil (25898 62218 574933 400000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -611) (undo-tree-id55 . -1) 612) nil (25898 62218 574931 26000) 0 nil])
([nil nil ((nil rear-nonsticky nil 648 . 649) (nil fontified nil 611 . 649) (611 . 649)) nil (25898 62218 574928 721000) 0 nil])
([nil nil ((611 . 613)) nil (25898 62218 574926 346000) 0 nil])
([nil nil ((611 . 612) (#("	" 0 1 (fontified nil)) . 610) (610 . 611) (610 . 611)) nil (25898 62218 574924 531000) 0 nil])
([nil nil ((612 . 617)) nil (25898 62218 574922 156000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -615) (undo-tree-id53 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -616) (undo-tree-id54 . -1) 617) nil (25898 62218 574919 781000) 0 nil])
([nil nil ((615 . 616)) nil (25898 62218 574917 407000) 0 nil])
([nil nil ((616 . 627)) nil (25898 62218 574915 521000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 631 637 nil nil nil t nil)) nil 3 nil #s(yas--field 1 631 637 nil nil nil t nil) nil nil)) (624 . 642) (#("Getenv(${1:key string})" 0 23 (fontified nil)) . 624) (624 . 647) (#("Get" 0 3 (fontified nil)) . 624) (624 . 627) (#("Getenv" 0 6 (fontified nil)) . -624) (624 . 630) (#("Get" 0 3 (face tree-sitter-hl-face:property fontified t)) . -624) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) 627) nil (25898 62218 574912 588000) 0 nil])
([nil nil ((631 . 633) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -631) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("key string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 632) (undo-tree-id37 . -10) (undo-tree-id38 . -4) (undo-tree-id39 . -5) (631 . 632)) nil (25898 62218 574905 324000) 0 nil])
([nil nil ((632 . 636)) nil (25898 62218 574894 429000) 0 nil])
([nil nil ((apply yas--snippet-revive 624 638 #s(yas--snippet nil (#s(yas--field 1 631 637 nil nil nil t nil)) nil 3 nil #s(yas--field 1 631 637 nil nil nil t nil) nil nil))) nil (25898 62218 574889 750000) 0 nil])
([nil nil ((227 . 229) (t 25898 62218 583100 919000)) nil (25898 62231 352229 181000) 0 nil])
([nil nil ((230 . 235) (229 . 231) (#("\"" 0 1 (fontified nil)) . -229) (229 . 230)) nil (25898 62231 352227 226000) 0 nil])
([nil nil ((apply yas--snippet-revive 230 239 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (230 . 239) (#("database/" 0 9 (fontified nil)) . 230) (230 . 239) (#("datab" 0 5 (fontified nil)) . 230) (230 . 235) (#("database/" 0 9 (fontified nil)) . -230) (230 . 239) (#("datab" 0 5 (face tree-sitter-hl-face:string fontified t)) . -230) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -1) (undo-tree-id60 . -2) (undo-tree-id61 . -3) (undo-tree-id62 . -4) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) (undo-tree-id70 . -5) 235) nil (25898 62231 352223 804000) 0 nil])
([nil nil ((239 . 242)) nil (25898 62231 352171 4000) 0 nil])
([nil nil ((697 . 698) (#("	" 0 1 (fontified nil)) . 696) (undo-tree-id81 . -1) (695 . 698) (t 25898 62231 359940 497000)) nil (25898 62293 715026 696000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -697) (undo-tree-id80 . -1) 698) nil (25898 62293 715024 321000) 0 nil])
([nil nil ((nil rear-nonsticky nil 725 . 726) (nil fontified nil 697 . 726) (697 . 726)) nil (25898 62293 715022 366000) 0 nil])
([nil nil ((697 . 699)) nil (25898 62293 715020 410000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -695) (undo-tree-id79 . -1) 696) nil (25898 62293 715018 454000) 0 nil])
([nil nil ((727 . 729)) nil (25898 62293 715016 569000) 0 nil])
([nil nil ((729 . 730)) nil (25898 62293 715014 124000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -729) (undo-tree-id78 . -1) 730) nil (25898 62293 715012 239000) 0 nil])
([nil nil ((729 . 738)) nil (25898 62293 715009 864000) 0 nil])
([nil nil ((738 . 741)) nil (25898 62293 715008 467000) 0 nil])
([nil nil ((apply yas--snippet-revive 738 747 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (738 . 747) (#("apiConfig" 0 9 (fontified nil)) . 738) (738 . 747) (#("api" 0 3 (fontified nil)) . 738) (738 . 741) (#("apiConfig" 0 9 (fontified nil)) . -738) (738 . 747) (#("api" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -738) (undo-tree-id76 . -3) (undo-tree-id77 . -3) 741) nil (25898 62293 715005 674000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -748) (748 . 749) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -748) (748 . 749) (747 . 749)) nil (25898 62293 715002 251000) 0 nil])
([nil nil ((749 . 751)) nil (25898 62293 714999 877000) 0 nil])
([nil nil ((751 . 755)) nil (25898 62293 714997 991000) 0 nil])
([nil nil ((755 . 757)) nil (25898 62293 714996 175000) 0 nil])
([nil nil ((736 . 737)) nil (25898 62293 714994 220000) 0 nil])
([nil nil ((758 . 759)) nil (25898 62293 714992 823000) 0 nil])
([nil nil ((apply yas--snippet-revive 759 761 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (759 . 761) (#("DB" 0 2 (fontified nil)) . 759) (759 . 761) (#("DB" 0 2 (fontified nil)) . -759) (759 . 761)) nil (25898 62293 714990 867000) 0 nil])
([nil nil ((761 . 767)) nil (25898 62293 714987 934000) 0 nil])
([nil nil ((767 . 768)) nil (25898 62293 714986 48000) 0 nil])
([nil nil ((apply yas--snippet-revive 765 774 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (765 . 774) (#("dbQueries" 0 9 (fontified nil)) . 765) (765 . 774) (#("dbQ" 0 3 (fontified nil)) . 765) (765 . 768) (#("dbQueries" 0 9 (fontified nil)) . -765) (765 . 774) (#("dbQ" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -765) (undo-tree-id74 . -3) (undo-tree-id75 . -3) 768) nil (25898 62293 714983 604000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -762) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 763) nil (25898 62293 714976 969000) 0 nil])
([nil nil ((1106 . 1107) (t 25898 62293 722157 840000)) nil (25898 62359 177509 993000) 0 nil])
([nil nil ((1176 . 1177)) nil (25898 62359 177504 755000) 0 nil])
([nil nil ((661 . 662) (t 25898 62359 185336 826000)) nil (25898 62404 399912 820000) 0 nil])
([nil nil ((696 . 698)) nil (25898 62404 399910 934000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1109) (undo-tree-id110 . -1) 1110) nil (25898 62404 399909 49000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1178) (undo-tree-id109 . -1) 1179) nil (25898 62404 399907 163000) 0 nil])
([nil nil ((696 . 698)) nil (25898 62404 399904 718000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -714) (714 . 715) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -714) (714 . 715) (698 . 715)) nil (25898 62404 399902 344000) 0 nil])
([nil nil ((715 . 717) (716 . 717) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 715) (715 . 717) (714 . 716)) nil (25898 62404 399899 899000) 0 nil])
([nil nil ((717 . 721)) nil (25898 62404 399897 455000) 0 nil])
([nil nil ((721 . 726)) nil (25898 62404 399896 58000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 729 741 nil nil nil t nil)) nil 8 nil #s(yas--field 1 729 741 nil nil nil t nil) nil nil)) (721 . 738) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 721) (721 . 743) (#("Print" 0 5 (fontified nil)) . 721) (721 . 726) (#("Println" 0 7 (fontified nil)) . -721) (721 . 728) (#("Print" 0 5 (face tree-sitter-hl-face:property fontified t)) . -721) (undo-tree-id107 . -5) (undo-tree-id108 . -5) 726) nil (25898 62404 399893 684000) 0 nil])
([nil nil ((730 . 734) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 730) (729 . 730)) nil (25898 62404 399889 912000) 0 nil])
([nil nil ((apply yas--snippet-revive 734 741 #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 729 741 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 1 729 741 nil nil nil t nil) nil)) (734 . 741) (#("Error()" 0 7 (fontified nil)) . 734) (734 . 741) (#("Error" 0 5 (fontified nil)) . -734) (734 . 739)) nil (25898 62404 399887 537000) 0 nil])
([nil nil ((apply yas--snippet-revive 721 742 #s(yas--snippet nil (#s(yas--field 1 729 741 nil nil nil t nil)) nil 8 nil #s(yas--field 1 729 741 nil nil nil t nil) nil nil))) nil (25898 62404 399884 255000) 0 nil])
([nil nil ((742 . 745)) nil (25898 62404 399882 788000) 0 nil])
([nil nil ((745 . 747)) nil (25898 62404 399880 903000) 0 nil])
([nil nil ((747 . 750)) nil (25898 62404 399879 17000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -749) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) 750) nil (25898 62404 399877 61000) 0 nil])
([nil nil ((749 . 750)) nil (25898 62404 399869 868000) 0 nil])
([nil nil ((apply yas--snippet-revive 745 751 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (745 . 751) (#("return" 0 6 (fontified nil)) . 745) (745 . 751) (#("retur" 0 5 (fontified nil)) . 745) (745 . 750) (#("return" 0 6 (fontified nil)) . -745) (745 . 751) (#("retur" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -745) (undo-tree-id82 . -5) (undo-tree-id83 . -5) (undo-tree-id84 . -2) (undo-tree-id85 . -3) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) 750) nil (25898 62404 399865 537000) 0 nil])
([nil nil ((1164 . 1166) (t 25898 62404 406769 977000)) nil (25898 62593 206903 323000) 0 nil])
([nil nil ((1166 . 1167) (#("	" 0 1 (fontified nil)) . 1165) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (1166 . 1167)) nil (25898 62593 206901 18000) 0 nil])
([nil nil ((1167 . 1169)) nil (25898 62593 206898 154000) 0 nil])
([nil nil ((1169 . 1170)) nil (25898 62593 206896 338000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1169) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 1170) nil (25898 62593 206894 453000) 0 nil])
([nil nil ((1169 . 1170)) nil (25898 62593 206891 519000) 0 nil])
([nil nil ((apply yas--snippet-revive 1167 1175 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1167 . 1175) (#("v1Router" 0 8 (fontified nil)) . 1167) (1167 . 1175) (#("v1R" 0 3 (fontified nil)) . 1167) (1167 . 1170) (#("v1Router" 0 8 (fontified nil)) . -1167) (1167 . 1175) (#("v1R" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1167) (undo-tree-id174 . -3) (undo-tree-id175 . -3) 1170) nil (25898 62593 206889 634000) 0 nil])
([nil nil ((1175 . 1180)) nil (25898 62593 206886 351000) 0 nil])
([nil nil ((#("O" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1177) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1178) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1179) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 1180) nil (25898 62593 206884 396000) 0 nil])
([nil nil ((1177 . 1179)) nil (25898 62593 206879 576000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1181 1189 nil nil nil t #s(yas--field 2 1191 1191 nil nil nil t nil)) #s(yas--field 2 1191 1191 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil nil)) (1176 . 1224) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 1176) (1176 . 1234) (#("Pos" 0 3 (fontified nil)) . 1176) (1176 . 1179) (#("Post" 0 4 (fontified nil)) . -1176) (1176 . 1180) (#("Pos" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1176) (undo-tree-id166 . -3) (undo-tree-id167 . -3) 1179) nil (25898 62593 206877 621000) 0 nil])
([nil nil ((1182 . 1187) (1181 . 1183) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1181) (#("pattern string" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 14 (face tree-sitter-hl-face:variable fontified nil)) . 1182) (1181 . 1182)) nil (25898 62593 206873 780000) 0 nil])
([nil nil ((1187 . 1188)) nil (25898 62593 206871 405000) 0 nil])
([nil nil ((#("handlerFn http.HandlerFunc" 0 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 26 (face tree-sitter-hl-face:property fontified t)) . 1191)) nil (25898 62593 206869 519000) 0 nil])
([nil nil ((1191 . 1201)) nil (25898 62593 206868 123000) 0 nil])
([nil nil ((#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1197) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1198) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1199) (undo-tree-id164 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1200) (undo-tree-id165 . -1) 1201) nil (25898 62593 206865 748000) 0 nil])
([nil nil ((1197 . 1200)) nil (25898 62593 206861 557000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1196) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1197) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1198) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1199) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 1200) nil (25898 62593 206859 602000) 0 nil])
([nil nil ((1196 . 1201)) nil (25898 62593 206852 408000) 0 nil])
([nil nil ((apply yas--snippet-revive 1191 1216 #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil)) (1191 . 1216) (#("database.CreateUserParams" 0 25 (fontified nil)) . 1191) (1191 . 1216) (#("createUser" 0 10 (fontified nil)) . 1191) (1191 . 1201) (#("database.CreateUserParams" 0 25 (fontified nil)) . -1191) (1191 . 1216) (#("createUser" 0 10 (face tree-sitter-hl-face:variable fontified t)) . -1191) (undo-tree-id150 . -10) (undo-tree-id151 . -10) 1201) nil (25898 62593 206850 34000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1195) (undo-tree-id129 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1196) (undo-tree-id130 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1197) (undo-tree-id131 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1198) (undo-tree-id132 . -1) (#("." 0 1 (fontified t)) . -1199) (undo-tree-id133 . -1) (#("C" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1200) (undo-tree-id134 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1201) (undo-tree-id135 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1202) (undo-tree-id136 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1203) (undo-tree-id137 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1204) (undo-tree-id138 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1205) (undo-tree-id139 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1206) (undo-tree-id140 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1207) (undo-tree-id141 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1208) (undo-tree-id142 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -1209) (undo-tree-id143 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -1210) (undo-tree-id144 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1211) (undo-tree-id145 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1212) (undo-tree-id146 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1213) (undo-tree-id147 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1214) (undo-tree-id148 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1215) (undo-tree-id149 . -1) 1216) nil (25898 62593 206534 2000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1191) (undo-tree-id125 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1192) (undo-tree-id126 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1193) (undo-tree-id127 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1194) (undo-tree-id128 . -1) 1195) nil (25898 62593 206524 783000) 0 nil])
([nil nil ((apply yas--snippet-revive 1176 1192 #s(yas--snippet nil (#s(yas--field 1 1181 1189 nil nil nil t #s(yas--field 2 1191 1191 nil nil nil t nil)) #s(yas--field 2 1191 1191 nil nil nil t nil)) nil 12 nil #s(yas--field 2 1191 1191 nil nil nil t nil) nil nil))) nil (25898 62593 206521 430000) 0 nil])
([nil nil ((566 . 568)) nil (25898 62593 206519 545000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -573) (573 . 574) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -573) (573 . 574) (567 . 574)) nil (25898 62593 206518 78000) 0 nil])
([nil nil ((573 . 580)) nil (25898 62593 206515 634000) 0 nil])
([nil nil ((apply yas--snippet-revive 575 584 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (575 . 584) (#("apiConfig" 0 9 (fontified nil)) . 575) (575 . 584) (#("apiCo" 0 5 (fontified nil)) . 575) (575 . 580) (#("apiConfig" 0 9 (fontified nil)) . -575) (575 . 584) (#("apiCo" 0 5 (face tree-sitter-hl-face:type fontified t)) . -575) (undo-tree-id123 . -5) (undo-tree-id124 . -5) 580) nil (25898 62593 206513 748000) 0 nil])
([nil nil ((585 . 589)) nil (25898 62593 206510 465000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -597) (597 . 598) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -597) (597 . 598) (589 . 598)) nil (25898 62593 206508 580000) 0 nil])
([nil nil ((597 . 607)) nil (25898 62593 206505 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 604 618 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (604 . 618) (#("ResponseWriter" 0 14 (fontified nil)) . 604) (604 . 618) (#("Res" 0 3 (fontified nil)) . 604) (604 . 607) (#("ResponseWriter" 0 14 (fontified nil)) . -604) (604 . 618) (#("Res" 0 3 (face tree-sitter-hl-face:type fontified t)) . -604) (undo-tree-id121 . -3) (undo-tree-id122 . -3) 607) nil (25898 62593 206503 900000) 0 nil])
([nil nil ((618 . 621)) nil (25898 62593 206500 548000) 0 nil])
([nil nil ((621 . 631)) nil (25898 62593 206498 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 628 635 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (628 . 635) (#("Request" 0 7 (fontified nil)) . 628) (628 . 635) (#("Req" 0 3 (fontified nil)) . 628) (628 . 631) (#("Request" 0 7 (fontified nil)) . -628) (628 . 635) (#("Req" 0 3 (face tree-sitter-hl-face:type fontified t)) . -628) (undo-tree-id119 . -3) (undo-tree-id120 . -3) 631) nil (25898 62593 206496 288000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -638) (638 . 639) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -638) (638 . 639) (636 . 639)) nil (25898 62593 206492 865000) 0 nil])
([nil nil ((639 . 640) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 639) (639 . 640) (638 . 640)) nil (25898 62593 206490 421000) 0 nil])
([nil nil ((640 . 642)) nil (25898 62593 206489 24000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -640) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("." 0 1 (fontified t)) . -641) (undo-tree-id117 . -1) (undo-tree-id118 . -1) 642) nil (25898 62593 206487 68000) 0 nil])
([nil nil ((565 . 567)) nil (25898 62593 206483 297000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -578) (578 . 579) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -578) (578 . 579) (567 . 579)) nil (25898 62593 206481 341000) 0 nil])
([nil nil ((579 . 580) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 579) (579 . 580) (578 . 580)) nil (25898 62593 206479 456000) 0 nil])
([nil nil ((576 . 583)) nil (25898 62593 206477 570000) 0 nil])
([nil nil ((587 . 598)) nil (25898 62593 206475 684000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -587) (undo-tree-id114 . -1) 588) nil (25898 62593 206474 288000) 0 nil])
([nil nil ((587 . 588)) nil (25898 62593 206472 402000) 0 nil])
([nil nil ((600 . 606) (599 . 601) (#("`" 0 1 (fontified nil)) . -599) (598 . 600)) nil (25898 62593 206470 516000) 0 nil])
([nil nil ((#(" " 0 1 (face tree-sitter-hl-face:string fontified t)) . -605) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 606) nil (25898 62593 206467 653000) 0 nil])
([nil nil ((606 . 610) (605 . 607) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -605) (605 . 606)) nil (25898 62593 206455 151000) 0 nil])
([nil nil ((583 . 590) (t 25898 62593 215405 451000)) nil (25898 62597 88646 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 698 . 699) (#("
" 0 1 (fontified nil)) . -878) (696 . 879) 695 (t 25898 62597 97356 868000)) nil (25898 62994 892578 234000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 695) (undo-tree-id319 . -1) (undo-tree-id320 . -1)) nil (25898 62994 892575 790000) 0 nil])
([nil nil ((nil rear-nonsticky nil 244 . 245) (#("
" 0 1 (fontified nil)) . -260) (243 . 261) 242) nil (25898 62994 892573 415000) 0 nil])
([nil nil ((893 . 895)) nil (25898 62994 892571 529000) 0 nil])
([nil nil ((895 . 898)) nil (25898 62994 892569 644000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -895) (undo-tree-id316 . -1) (#("\305\261" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -896) (undo-tree-id317 . -1) (#(" " 0 1 (fontified t)) . -897) (undo-tree-id318 . -1) 898) nil (25898 62994 892567 339000) 0 nil])
([nil nil ((14 . 15) (108 . 110) (#("gi" 0 2 (face tree-sitter-hl-face:string fontified t)) . -108) 110 (111 . 112) (#("hu" 0 2 (face tree-sitter-hl-face:string fontified t)) . -111) 113 (114 . 117) (#(".com" 0 4 (face tree-sitter-hl-face:string fontified t)) . -114) 118 (119 . 133) (120 . 123) (121 . 139) (#("	\"database/sql\"
	\"encoding/json\"
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:string fontified t) 2 14 (face tree-sitter-hl-face:string fontified t) 14 15 (face tree-sitter-hl-face:string fontified t) 15 16 (fontified t) 16 17 (rear-nonsticky t fontified t) 17 32 (face tree-sitter-hl-face:string fontified t) 32 33 (fontified t)) . 228) (undo-tree-id311 . -16) (undo-tree-id312 . -32) (undo-tree-id313 . -16) (365 . 366) (366 . 369) (395 . 397) (#("	" 0 1 (fontified t)) . 712) (#("	" 0 1 (fontified t)) . 750) (#("	" 0 1 (fontified t)) . -773) 774 (#("	" 0 1 (fontified t)) . -804) (#("	" 0 1 (fontified t)) . -822) (#("	" 0 1 (fontified t)) . -880) (#("	" 0 1 (fontified t)) . -890) (#("	" 0 1 (fontified t)) . 894) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("
" 0 1 (fontified t)) . 897) (987 . 988) (#("  " 0 2 (fontified t)) . 987) (1086 . 1087) (#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 1088) (#(", " 0 2 (fontified t)) . 1521) 894) nil (25898 62994 892561 612000) 0 nil])
([nil nil ((893 . 895)) nil (25898 62994 892555 815000) 0 nil])
([nil nil ((895 . 908)) nil (25898 62994 892553 859000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -906) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("." 0 1 (fontified t)) . -907) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 908) nil (25898 62994 892551 485000) 0 nil])
([nil nil ((906 . 907)) nil (25898 62994 892548 621000) 0 nil])
([nil nil ((apply yas--snippet-revive 923 927 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (22 . 25) (#("_ " 0 2 (fontified t)) . -22) 24 (25 . 27) (#("gi" 0 2 (face tree-sitter-hl-face:string fontified t)) . -25) 27 (28 . 29) (#("hu" 0 2 (face tree-sitter-hl-face:string fontified t)) . -28) 30 (31 . 34) (#(".com/lib" 0 8 (face tree-sitter-hl-face:string fontified t)) . 31) (40 . 41) (#("p" 0 1 (face tree-sitter-hl-face:string fontified t)) . 40) (42 . 43) (44 . 51) (45 . 50) (#("mp" 0 2 (face tree-sitter-hl-face:keyword fontified t)) . 45) (48 . 50) (#("rt (" 0 2 (face tree-sitter-hl-face:keyword fontified t) 2 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-1-face) fontified t)) . 48) (#("ut" 0 2 (face tree-sitter-hl-face:string fontified t)) . 81) (84 . 90) (85 . 92) (86 . 87) (90 . 102) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . 90) (92 . 94) (93 . 95) (94 . 95) (#("ht" 0 2 (face tree-sitter-hl-face:string fontified t)) . 94) (97 . 99) (#("p\"
	\"o" 0 2 (face tree-sitter-hl-face:string fontified t) 2 4 (fontified t) 4 6 (face tree-sitter-hl-face:string fontified t)) . 97) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (#("
" 0 1 (fontified t)) . 105) (109 . 110) (#("databas" 0 2 (face tree-sitter-hl-face:string fontified t) 2 3 (face tree-sitter-hl-face:string fontified t) 3 4 (face tree-sitter-hl-face:string fontified t) 4 5 (face tree-sitter-hl-face:string fontified t) 5 7 (face tree-sitter-hl-face:string fontified t)) . 109) (117 . 118) (118 . 122) (#("sql" 0 3 (face tree-sitter-hl-face:string fontified t)) . 118) (#("enc" 0 3 (face tree-sitter-hl-face:string fontified t)) . 125) (#("ding/j" 0 3 (face tree-sitter-hl-face:string fontified t) 3 4 (face tree-sitter-hl-face:string fontified t) 4 6 (face tree-sitter-hl-face:string fontified t)) . 129) (#("on" 0 1 (face tree-sitter-hl-face:string fontified t) 1 2 (face tree-sitter-hl-face:string fontified t)) . 136) (140 . 141) (192 . 218) (223 . 225) (#("go-blog-a" 0 9 (face tree-sitter-hl-face:string fontified t)) . 224) (234 . 235) (#("grega" 0 5 (face tree-sitter-hl-face:string fontified t)) . 234) (240 . 245) (241 . 242) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . 241) (#("interna" 0 7 (face tree-sitter-hl-face:string fontified t)) . -243) 250 (251 . 253) (252 . 254) (#("database" 0 8 (face tree-sitter-hl-face:string fontified t)) . -252) (undo-tree-id303 . -8) (undo-tree-id304 . -8) 260 (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (903 . 907) (#("uuid" 0 4 (fontified nil)) . 903) (903 . 907) (#("uuid" 0 4 (fontified nil)) . 903) (903 . 907) (#("uuid" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -903) (undo-tree-id305 . -4) (undo-tree-id306 . -4) 907) nil (25898 62994 892544 431000) 0 nil])
([nil nil ((927 . 931)) nil (25898 62994 892533 955000) 0 nil])
([nil nil ((apply yas--snippet-revive 928 933 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (928 . 933) (#("New()" 0 5 (fontified nil)) . 928) (928 . 933) (#("New" 0 3 (fontified nil)) . 928) (928 . 931) (#("New" 0 3 (face tree-sitter-hl-face:property fontified t)) . -928) (undo-tree-id298 . -3) (undo-tree-id299 . -3) 931) nil (25898 62994 892531 580000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -941) (941 . 942) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -941) (941 . 942) (933 . 942)) nil (25898 62994 892528 228000) 0 nil])
([nil nil ((942 . 944)) nil (25898 62994 892525 783000) 0 nil])
([nil nil ((780 . 783) 776 (826 . 829) 822) nil (25898 62994 892524 317000) 0 nil])
([nil nil ((948 . 950)) nil (25898 62994 892521 942000) 0 nil])
([nil nil ((950 . 967)) nil (25898 62994 892520 475000) 0 nil])
([nil nil ((apply yas--snippet-revive 971 975 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (148 . 156) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (963 . 967) (#("time" 0 4 (fontified nil)) . 963) (963 . 967) (#("time" 0 4 (fontified nil)) . 963) (963 . 967) (#("time" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -963) (undo-tree-id296 . -4) (undo-tree-id297 . -4) 967) nil (25898 62994 892518 101000) 0 nil])
([nil nil ((975 . 979)) nil (25898 62994 892513 840000) 0 nil])
([nil nil ((apply yas--snippet-revive 976 981 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (976 . 981) (#("Now()" 0 5 (fontified nil)) . 976) (976 . 981) (#("Now" 0 3 (fontified nil)) . 976) (976 . 979) (#("Now" 0 3 (face tree-sitter-hl-face:property fontified t)) . -976) (undo-tree-id294 . -3) (undo-tree-id295 . -3) 979) nil (25898 62994 892511 955000) 0 nil])
([nil nil ((981 . 983)) nil (25898 62994 892508 113000) 0 nil])
([nil nil ((983 . 986)) nil (25898 62994 892506 228000) 0 nil])
([nil nil ((apply yas--snippet-revive 983 1008 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (983 . 1008) (#("database.CreateUserParams" 0 25 (fontified nil)) . 983) (983 . 1008) (#("Cre" 0 3 (fontified nil)) . 983) (983 . 986) (#("database.CreateUserParams" 0 25 (fontified nil)) . -983) (983 . 1008) (#("Cre" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -983) (undo-tree-id292 . -3) (undo-tree-id293 . -3) 986) nil (25898 62994 892504 342000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1009) (1009 . 1010) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1009) (1009 . 1010) (1008 . 1010)) nil (25898 62994 892500 570000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -991) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("C" 0 1 (face tree-sitter-hl-face:property fontified t)) . -992) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -993) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -994) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -995) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -996) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -997) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -998) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -999) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1000) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1001) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1002) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1003) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1004) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1005) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1006) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1007) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1008) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1009) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . 1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) 1010) nil (25898 62994 892495 751000) 0 nil])
([nil nil ((991 . 992)) nil (25898 62994 892466 697000) 0 nil])
([nil nil ((apply yas--snippet-revive 992 999 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (992 . 999) (#("Queries" 0 7 (fontified nil)) . 992) (992 . 999) (#("Queries" 0 7 (fontified nil)) . -992) (992 . 999)) nil (25898 62994 892464 253000) 0 nil])
([nil nil ((999 . 1000)) nil (25898 62994 892461 878000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -991) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("Q" 0 1 (face tree-sitter-hl-face:property fontified t)) . -992) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -993) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -994) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -995) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -996) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -997) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -998) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("." 0 1 (fontified t)) . -999) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 1000) nil (25898 62994 892458 456000) 0 nil])
([nil nil ((991 . 992)) nil (25898 62994 892449 936000) 0 nil])
([nil nil ((#("	database.
" 0 1 (fontified t) 1 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 11 (fontified t)) . 982) (undo-tree-id180 . -10) (undo-tree-id181 . 1) (undo-tree-id182 . -10) (undo-tree-id183 . -9) (undo-tree-id184 . 1) (undo-tree-id185 . -10) (undo-tree-id186 . -10) (undo-tree-id187 . -10) (undo-tree-id188 . -10) (undo-tree-id189 . -10) (undo-tree-id190 . -10) (undo-tree-id191 . -10) (undo-tree-id192 . -10) (undo-tree-id193 . -10) (undo-tree-id194 . -10) (undo-tree-id195 . -10) (undo-tree-id196 . -10) (undo-tree-id197 . -10) (undo-tree-id198 . -10) (undo-tree-id199 . -10) (undo-tree-id200 . -10) (undo-tree-id201 . -9) (undo-tree-id202 . -9) (undo-tree-id203 . -9) (undo-tree-id204 . -9) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (undo-tree-id207 . -1) (undo-tree-id208 . -9) (undo-tree-id209 . -9) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -11) 991) nil (25898 62994 892445 745000) 0 nil])
([nil nil ((983 . 985) (t 25898 62994 995381 741000)) nil (25898 63190 640235 484000) 0 nil])
([nil nil ((apply yas--snippet-revive 985 987 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (985 . 987) (#("DB" 0 2 (fontified nil)) . 985) (985 . 987) (#("DB" 0 2 (fontified nil)) . -985) (985 . 987)) nil (25898 63190 640233 598000) 0 nil])
([nil nil ((987 . 988)) nil (25898 63190 640231 712000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil nil)) (988 . 1050) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 988) (988 . 1060) (#("CreateUser" 0 10 (fontified nil)) . -988) (988 . 998)) nil (25898 63190 640229 338000) 0 nil])
([nil nil ((1000 . 1001) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 1000) (999 . 1000)) nil (25898 63190 640227 522000) 0 nil])
([nil nil ((1001 . 1002)) nil (25898 63190 640225 636000) 0 nil])
([nil nil ((1002 . 1004)) nil (25898 63190 640224 170000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -999) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("." 0 1 (fontified t)) . -1000) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1001) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("B" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1002) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("." 0 1 (fontified t)) . -1003) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 1004) nil (25898 63190 640221 865000) 0 nil])
([nil nil ((apply yas--snippet-revive 988 1031 #s(yas--snippet nil (#s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 999 999 nil nil nil t #s(yas--field 2 1001 1030 nil nil nil nil nil)) nil nil))) nil (25898 63190 640216 138000) 0 nil])
([nil nil ((#("	a.DB.CreateUser(, arg database.CreateUserParams)
" 0 1 (fontified t) 1 2 (face tree-sitter-hl-face:variable fontified t) 2 3 (fontified t) 3 5 (face tree-sitter-hl-face:property fontified t) 5 6 (fontified t) 6 16 (face tree-sitter-hl-face:property fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 19 (fontified t) 19 22 (face tree-sitter-hl-face:variable fontified t) 22 23 (fontified t) 23 31 (fontified t) 31 32 (fontified t) 32 48 (face tree-sitter-hl-face:type fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (fontified t)) . 982) (undo-tree-id343 . -49) (undo-tree-id344 . 2) (undo-tree-id345 . -50) (undo-tree-id346 . -47) (undo-tree-id347 . -47) 1029) nil (25898 63190 640214 182000) 0 nil])
([nil nil ((1171 . 1173)) nil (25898 63190 640211 249000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1172) (undo-tree-id342 . -1) 1173) nil (25898 63190 640208 874000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1198 . 1199) (nil fontified nil 1172 . 1199) (1172 . 1199)) nil (25898 63190 640206 919000) 0 nil])
([nil nil ((1172 . 1174)) nil (25898 63190 640205 33000) 0 nil])
([nil nil ((1171 . 1173)) nil (25898 63190 640203 566000) 0 nil])
([nil nil ((1173 . 1178)) nil (25898 63190 640201 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 1184 1191 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (23 . 34) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1173 . 1180) (#("context" 0 7 (fontified nil)) . 1173) (1173 . 1180) (#("conte" 0 5 (fontified nil)) . 1173) (1173 . 1178) (#("context" 0 7 (fontified nil)) . -1173) (1173 . 1180) (#("conte" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -1173) (undo-tree-id340 . -5) (undo-tree-id341 . -5) 1178) nil (25898 63190 640199 795000) 0 nil])
([nil nil ((#("	context
" 0 1 (fontified t) 1 8 (face tree-sitter-hl-face:variable fontified t) 8 9 (fontified t)) . 1183) (undo-tree-id335 . -9) (undo-tree-id336 . -8) (undo-tree-id337 . 1) (undo-tree-id338 . -1) (undo-tree-id339 . -7) 1190) nil (25898 63190 640196 24000) 0 nil])
([nil nil ((626 . 628)) nil (25898 63190 640192 252000) 0 nil])
([nil nil ((628 . 638)) nil (25898 63190 640190 855000) 0 nil])
([nil nil ((638 . 639)) nil (25898 63190 640188 970000) 0 nil])
([nil nil ((apply yas--snippet-revive 632 647 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (632 . 647) (#("context.Context" 0 15 (fontified nil)) . 632) (632 . 647) (#("context" 0 7 (fontified nil)) . 632) (632 . 639) (#("context.Context" 0 15 (fontified nil)) . -632) (632 . 647) (#("context" 0 7 (face tree-sitter-hl-face:type fontified t)) . -632) (undo-tree-id333 . -7) (undo-tree-id334 . -7) 639) nil (25898 63190 640187 84000) 0 nil])
([nil nil ((1233 . 1235)) nil (25898 63190 640182 754000) 0 nil])
([nil nil ((#("  ctx := context.Background()
" 0 2 (fontified t) 2 5 (face tree-sitter-hl-face:variable fontified t) 5 6 (fontified t) 6 8 (face tree-sitter-hl-face:operator fontified t) 8 9 (fontified t) 9 16 (face tree-sitter-hl-face:variable fontified t) 16 17 (fontified t) 17 27 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 29 30 (fontified t)) . 1204) (undo-tree-id332 . -29)) nil (25898 63190 640180 309000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1285 . 1286) (#("
" 0 1 (fontified nil)) . -1313) (1283 . 1314) 1261) nil (25898 63190 640177 865000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1204) (undo-tree-id330 . -1) (undo-tree-id331 . 1)) nil (25898 63190 640175 490000) 0 nil])
([nil nil ((1284 . 1291)) nil (25898 63190 640172 627000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1295) (undo-tree-id329 . -1) 1296) nil (25898 63190 640170 741000) 0 nil])
([nil nil ((1672 . 1676)) nil (25898 63190 640167 808000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1674) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1675) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 1676) nil (25898 63190 640165 922000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1672) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1673) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 1674) nil (25898 63190 640161 243000) 0 nil])
([nil nil ((1672 . 1677)) nil (25898 63190 640151 255000) 0 nil])
([nil nil ((1677 . 1680)) nil (25898 63190 640149 300000) 0 nil])
([nil nil ((1680 . 1681)) nil (25898 63190 640147 833000) 0 nil])
([nil nil ((apply yas--snippet-revive 1681 1691 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (1681 . 1691) (#("createUser" 0 10 (fontified nil)) . 1681) (1681 . 1691) (#("createUser" 0 10 (fontified nil)) . -1681) (1681 . 1691)) nil (25898 63190 640142 106000) 0 nil])
([nil nil ((1014 . 1016) (t 25898 63190 649937 695000)) nil (25898 63315 440956 309000) 0 nil])
([nil nil ((1016 . 1020)) nil (25898 63315 440954 423000) 0 nil])
([nil nil ((1020 . 1026)) nil (25898 63315 440953 26000) 0 nil])
([nil nil ((apply yas--snippet-revive 1026 1028 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (1026 . 1028) (#("DB" 0 2 (fontified nil)) . 1026) (1026 . 1028) (#("DB" 0 2 (fontified nil)) . -1026) (1026 . 1028)) nil (25898 63315 440951 140000) 0 nil])
([nil nil ((1028 . 1029)) nil (25898 63315 440948 766000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil 29 nil #s(yas--field 2 1047 1076 nil nil nil nil nil) nil nil)) (1029 . 1091) (#("CreateUser(${1:ctx context.Context}, ${2:arg database.CreateUserParams})" 0 72 (fontified nil)) . 1029) (1029 . 1101) (#("CreateUser" 0 10 (fontified nil)) . -1029) (1029 . 1039)) nil (25898 63315 440947 299000) 0 nil])
([nil nil ((1041 . 1042) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 1041) (1040 . 1041)) nil (25898 63315 440944 436000) 0 nil])
([nil nil ((apply yas--snippet-revive 1042 1045 #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil #s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil)) (1042 . 1045) (#("ctx" 0 3 (fontified nil)) . 1042) (1042 . 1045) (#("ctx" 0 3 (fontified nil)) . -1042) (1042 . 1045)) nil (25898 63315 440942 480000) 0 nil])
([nil nil ((apply yas--snippet-revive 1029 1077 #s(yas--snippet nil (#s(yas--field 1 1040 1045 nil nil nil t #s(yas--field 2 1047 1076 nil nil nil nil nil)) #s(yas--field 2 1047 1076 nil nil nil nil nil)) nil 29 nil #s(yas--field 2 1047 1076 nil nil nil nil nil) nil nil))) nil (25898 63315 440940 36000) 0 nil])
([nil nil ((1013 . 1015)) nil (25898 63315 440938 569000) 0 nil])
([nil nil ((959 . 960)) nil (25898 63315 440936 683000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -959) (undo-tree-id403 . -1) 960) nil (25898 63315 440934 797000) 0 nil])
([nil nil ((959 . 961)) nil (25898 63315 440932 912000) 0 nil])
([nil nil ((961 . 964)) nil (25898 63315 440930 956000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -963) (undo-tree-id402 . -1) 964) nil (25898 63315 440929 489000) 0 nil])
([nil nil ((963 . 971)) nil (25898 63315 440927 115000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -970) (undo-tree-id401 . -1) 971) nil (25898 63315 440925 718000) 0 nil])
([nil nil ((970 . 974)) nil (25898 63315 440923 413000) 0 nil])
([nil nil ((apply yas--snippet-revive 970 978 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (970 . 978) (#("database" 0 8 (fontified nil)) . 970) (970 . 978) (#("data" 0 4 (fontified nil)) . 970) (970 . 974) (#("database" 0 8 (fontified nil)) . -970) (970 . 978) (#("data" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -970) (undo-tree-id399 . -4) (undo-tree-id400 . -4) 974) nil (25898 63315 440921 528000) 0 nil])
([nil nil ((978 . 979)) nil (25898 63315 440918 245000) 0 nil])
([nil nil ((apply yas--snippet-revive 979 995 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (979 . 995) (#("CreateUserParams" 0 16 (fontified nil)) . 979) (979 . 995) (#("CreateUserParams" 0 16 (fontified nil)) . -979) (979 . 995)) nil (25898 63315 440916 289000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -996) (996 . 997) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -996) (996 . 997) (995 . 997)) nil (25898 63315 440913 426000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -999) (undo-tree-id395 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1000) (undo-tree-id396 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1001) (undo-tree-id397 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1002) (undo-tree-id398 . -1) 1003) nil (25898 63315 440910 4000) 0 nil])
([nil nil ((999 . 1002)) nil (25898 63315 440906 162000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1001) (undo-tree-id394 . -1) 1002) nil (25898 63315 440904 277000) 0 nil])
([nil nil ((1001 . 1005)) nil (25898 63315 440902 391000) 0 nil])
([nil nil ((apply yas--snippet-revive 1005 1007 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (1005 . 1007) (#("ID" 0 2 (fontified nil)) . 1005) (1005 . 1007) (#("ID" 0 2 (fontified nil)) . -1005) (1005 . 1007)) nil (25898 63315 440900 505000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1032) (undo-tree-id385 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1033) (undo-tree-id386 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1034) (undo-tree-id387 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1035) (undo-tree-id388 . -1) (#("S" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1036) (undo-tree-id389 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1037) (undo-tree-id390 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1038) (undo-tree-id391 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1039) (undo-tree-id392 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1040) (undo-tree-id393 . -1) 1041) nil (25898 63315 440897 83000) 0 nil])
([nil nil ((1032 . 1034)) nil (25898 63315 440891 915000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1032) (undo-tree-id383 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1033) (undo-tree-id384 . -1) 1034) nil (25898 63315 440889 610000) 0 nil])
([nil nil ((1032 . 1041)) nil (25898 63315 440887 235000) 0 nil])
([nil nil ((1055 . 1057)) nil (25898 63315 440885 280000) 0 nil])
([nil nil ((1057 . 1059)) nil (25898 63315 440883 883000) 0 nil])
([nil nil ((1059 . 1063)) nil (25898 63315 440881 439000) 0 nil])
([nil nil ((apply yas--snippet-revive 1063 1072 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (1063 . 1072) (#("CreatedAt" 0 9 (fontified nil)) . 1063) (1063 . 1072) (#("CreatedAt" 0 9 (fontified nil)) . -1063) (1063 . 1072)) nil (25898 63315 440879 483000) 0 nil])
([nil nil ((1072 . 1079)) nil (25898 63315 440877 597000) 0 nil])
([nil nil ((apply yas--snippet-revive 1075 1084 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (1075 . 1084) (#("timeStamp" 0 9 (fontified nil)) . 1075) (1075 . 1084) (#("time" 0 4 (fontified nil)) . 1075) (1075 . 1079) (#("timeStamp" 0 9 (fontified nil)) . -1075) (1075 . 1084) (#("time" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1075) (undo-tree-id381 . -4) (undo-tree-id382 . -4) 1079) nil (25898 63315 440875 153000) 0 nil])
([nil nil ((1084 . 1086)) nil (25898 63315 440871 801000) 0 nil])
([nil nil ((1086 . 1089)) nil (25898 63315 440869 915000) 0 nil])
([nil nil ((apply yas--snippet-revive 1086 1101 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (1086 . 1101) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . 1086) (1086 . 1101) (#("dbO" 0 3 (fontified nil)) . 1086) (1086 . 1089) (#("dbObj.UpdatedAt" 0 15 (fontified nil)) . -1086) (1086 . 1101) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1086) (undo-tree-id379 . -3) (undo-tree-id380 . -3) 1089) nil (25898 63315 440867 610000) 0 nil])
([nil nil ((1101 . 1108)) nil (25898 63315 440863 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 1104 1113 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (1104 . 1113) (#("timeStamp" 0 9 (fontified nil)) . 1104) (1104 . 1113) (#("time" 0 4 (fontified nil)) . 1104) (1104 . 1108) (#("timeStamp" 0 9 (fontified nil)) . -1104) (1104 . 1113) (#("time" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1104) (undo-tree-id377 . -4) (undo-tree-id378 . -4) 1108) nil (25898 63315 440861 394000) 0 nil])
([nil nil ((1113 . 1115)) nil (25898 63315 440858 112000) 0 nil])
([nil nil ((1115 . 1118)) nil (25898 63315 440856 156000) 0 nil])
([nil nil ((apply yas--snippet-revive 1115 1120 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (1115 . 1120) (#("dbObj" 0 5 (fontified nil)) . 1115) (1115 . 1120) (#("dbO" 0 3 (fontified nil)) . 1115) (1115 . 1118) (#("dbObj" 0 5 (fontified nil)) . -1115) (1115 . 1120) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -1115) (undo-tree-id375 . -3) (undo-tree-id376 . -3) 1118) nil (25898 63315 440853 851000) 0 nil])
([nil nil ((1120 . 1121)) nil (25898 63315 440849 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 1121 1125 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (1121 . 1125) (#("Name" 0 4 (fontified nil)) . 1121) (1121 . 1125) (#("Name" 0 4 (fontified nil)) . -1121) (1121 . 1125)) nil (25898 63315 440848 55000) 0 nil])
([nil nil ((1125 . 1132)) nil (25898 63315 440845 610000) 0 nil])
([nil nil ((apply yas--snippet-revive 1128 1135 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (1128 . 1135) (#("userReq" 0 7 (fontified nil)) . 1128) (1128 . 1135) (#("user" 0 4 (fontified nil)) . 1128) (1128 . 1132) (#("userReq" 0 7 (fontified nil)) . -1128) (1128 . 1135) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1128) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -1) (undo-tree-id361 . -2) (undo-tree-id362 . -3) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) 1132) nil (25898 63315 440842 258000) 0 nil])
([nil nil ((1135 . 1136)) nil (25898 63315 440823 750000) 0 nil])
([nil nil ((apply yas--snippet-revive 1136 1140 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (1136 . 1140) (#("Name" 0 4 (fontified nil)) . 1136) (1136 . 1140) (#("Name" 0 4 (fontified nil)) . -1136) (1136 . 1140)) nil (25898 63315 440818 23000) 0 nil])
([nil nil ((#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1184) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1185) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1186) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1187) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("." 0 1 (fontified t)) . -1188) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("C" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1189) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1190) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1191) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1192) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1193) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1194) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("U" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1195) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1196) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1197) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1198) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1199) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1200) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1201) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1202) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1203) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1204) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) 1205 (t 25898 63315 545378 39000)) nil (25898 63337 245081 823000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1176) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1177) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1178) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (#(" " 0 1 (fontified t)) . -1179) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1180) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1181) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1182) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1183) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 1184) nil (25898 63337 244902 131000) 0 nil])
([nil nil ((1176 . 1180)) nil (25898 63337 244470 24000) 0 nil])
([nil nil ((apply yas--snippet-revive 1176 1181 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (1176 . 1181) (#("dbObj" 0 5 (fontified nil)) . 1176) (1176 . 1181) (#("dbOb" 0 4 (fontified nil)) . 1176) (1176 . 1180) (#("dbObj" 0 5 (fontified nil)) . -1176) (1176 . 1181) (#("dbOb" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1176) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -1) (undo-tree-id407 . -2) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) 1180) nil (25898 63337 244466 712000) 0 nil])
([nil nil ((1149 . 1154)) nil (25898 63337 244449 729000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1021) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1022) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1023) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1024) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1025) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1026) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1027) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1028) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1029) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . 1) (undo-tree-id1377 . -1) 1030 (t 25898 63337 254731 797000)) nil (25898 63371 487945 670000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1029) (1029 . 1030) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1029) (1029 . 1030) (1021 . 1030)) nil (25898 63371 487931 906000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1008) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) 1009) nil (25898 63371 487926 736000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1020) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1021) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1022) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1023) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1024) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1025) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1026) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1027) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1028) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . 1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) 1029 (t 25898 63371 495504 924000)) nil (25898 63377 817470 544000) 0 nil])
([nil nil ((1177 . 1179) (t 25898 63377 829827 288000)) nil (25898 63708 597445 437000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1194) (1194 . 1195) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1194) (1194 . 1195) (1179 . 1195)) nil (25898 63708 597443 552000) 0 nil])
([nil nil ((1195 . 1197) (1196 . 1197) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1195) (1195 . 1197) (1194 . 1196)) nil (25898 63708 597441 178000) 0 nil])
([nil nil ((1197 . 1203)) nil (25898 63708 597438 803000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1220 1221 nil nil nil t #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil))) #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil)) #s(yas--field 3 1228 1251 nil nil nil t nil)) nil 43 nil #s(yas--field 3 1228 1251 nil nil nil t nil) nil nil)) (1203 . 1264) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 1203) (1203 . 1279) (#("RespondWithError" 0 16 (fontified nil)) . -1203) (1203 . 1219)) nil (25898 63708 597436 429000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1221) (1220 . 1221)) nil (25898 63708 597434 55000) 0 nil])
([nil nil ((1224 . 1226) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1224) (1223 . 1224)) nil (25898 63708 597432 100000) 0 nil])
([nil nil ((1229 . 1231) (1228 . 1230) (#("\"" 0 1 (fontified nil)) . -1228) (#("msg string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 1229) (1228 . 1229)) nil (25898 63708 597429 307000) 0 nil])
([nil nil ((1231 . 1234)) nil (25898 63708 597426 933000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -1233) (undo-tree-id1524 . -1) 1234) nil (25898 63708 597425 47000) 0 nil])
([nil nil ((1233 . 1250)) nil (25898 63708 597422 673000) 0 nil])
([nil nil ((apply yas--snippet-revive 1203 1252 #s(yas--snippet nil (#s(yas--field 1 1220 1221 nil nil nil t #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil))) #s(yas--field 2 1223 1226 nil nil nil t #s(yas--field 3 1228 1251 nil nil nil t nil)) #s(yas--field 3 1228 1251 nil nil nil t nil)) nil 43 nil #s(yas--field 3 1228 1251 nil nil nil t nil) nil nil))) nil (25898 63708 597420 299000) 0 nil])
([nil nil ((1252 . 1255)) nil (25898 63708 597418 833000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1252) (undo-tree-id1521 . -1) (#("	" 0 1 (fontified t)) . -1253) (undo-tree-id1522 . -1) (#("	" 0 1 (fontified t)) . -1254) (undo-tree-id1523 . -1) 1255) nil (25898 63708 597416 878000) 0 nil])
([nil nil ((1252 . 1255)) nil (25898 63708 597413 526000) 0 nil])
([nil nil ((1255 . 1261)) nil (25898 63708 597411 571000) 0 nil])
([nil nil ((1264 . 1266)) nil (25898 63708 597409 685000) 0 nil])
([nil nil ((1266 . 1272)) nil (25898 63708 597407 800000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1266) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1267) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1268) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1269) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1270) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("." 0 1 (fontified t)) . -1271) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) 1272) nil (25898 63708 597404 937000) 0 nil])
([nil nil ((1266 . 1272)) nil (25898 63708 597397 396000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1288 1289 nil nil nil t #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil))) #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil)) #s(yas--field 3 1296 1301 nil nil nil t nil)) nil 44 nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil nil)) (1272 . 1341) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 1272) (1272 . 1357) (#("RespondWithJSON" 0 15 (fontified nil)) . -1272) (1272 . 1287)) nil (25898 63708 597395 441000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 21 (face tree-sitter-hl-face:property fontified nil)) . 1289) (undo-tree-id1508 . -21) (1288 . 1289)) nil (25898 63708 597392 648000) 0 nil])
([nil nil ((1292 . 1294) (#("code int" 0 4 (face tree-sitter-hl-face:variable fontified nil) 4 5 (fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 1292) (undo-tree-id1507 . -8) (1291 . 1292)) nil (25898 63708 597390 273000) 0 nil])
([nil nil ((1297 . 1299) (#("payload interface{}" 0 7 (face tree-sitter-hl-face:variable fontified nil) 7 8 (fontified nil) 8 16 (face tree-sitter-hl-face:keyword fontified nil) 16 17 (face tree-sitter-hl-face:keyword fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1297) (undo-tree-id1506 . -19) (1296 . 1297)) nil (25898 63708 597387 341000) 0 nil])
([nil nil ((1299 . 1301)) nil (25898 63708 597384 478000) 0 nil])
([nil nil ((apply yas--snippet-revive 1296 1301 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil)) (1296 . 1301) (#("dbObj" 0 5 (fontified nil)) . 1296) (undo-tree-id1501 . -5) (1296 . 1301) (#("dbObj" 0 5 (fontified nil)) . 1296) (undo-tree-id1502 . -5) (1296 . 1301) (#("dbObj" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -1296) (undo-tree-id1503 . -5) (undo-tree-id1504 . -5) (undo-tree-id1505 . -5) 1301) nil (25898 63708 597382 34000) 0 nil])
([nil nil ((apply yas--snippet-revive 1272 1302 #s(yas--snippet nil (#s(yas--field 1 1288 1289 nil nil nil t #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil))) #s(yas--field 2 1291 1294 nil nil nil t #s(yas--field 3 1296 1301 nil nil nil t nil)) #s(yas--field 3 1296 1301 nil nil nil t nil)) nil 44 nil #s(yas--field 3 1296 1301 nil nil nil t nil) nil nil))) nil (25898 63708 597368 348000) 0 nil])
([nil nil ((705 . 707) (t 25898 63708 700319 577000)) nil (25898 63829 641519 320000) 0 nil])
([nil nil ((656 . 662) (829 . 835)) nil (25898 63829 641517 365000) 0 nil])
([nil nil ((713 . 734)) nil (25898 63829 641515 898000) 0 nil])
([nil nil ((734 . 742)) nil (25898 63829 641514 12000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -741) (undo-tree-id1536 . -1) 742) nil (25898 63829 641512 57000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -745) (745 . 746) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -745) (745 . 746) (741 . 746)) nil (25898 63829 641509 263000) 0 nil])
([nil nil ((746 . 747) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 746) (746 . 747) (745 . 747)) nil (25898 63829 641507 377000) 0 nil])
([nil nil ((nil rear-nonsticky nil 748 . 749) (#("
" 0 1 (fontified nil)) . -828) (747 . 829) 746) nil (25898 63829 641505 72000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 746) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1)) nil (25898 63829 641502 698000) 0 nil])
([nil nil ((768 . 773) (767 . 769) (#("`" 0 1 (fontified nil)) . -767) (766 . 768)) nil (25898 63829 641499 904000) 0 nil])
([nil nil ((#("." 0 1 (face tree-sitter-hl-face:string fontified t)) . -772) (undo-tree-id1533 . -1) 773) nil (25898 63829 641497 529000) 0 nil])
([nil nil ((774 . 776) (773 . 775) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -773) (772 . 774)) nil (25898 63829 641494 596000) 0 nil])
([nil nil ((801 . 806) (800 . 802) (#("`" 0 1 (fontified nil)) . -800) (799 . 801)) nil (25898 63829 641492 221000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -805) (undo-tree-id1532 . -1) 806) nil (25898 63829 641489 777000) 0 nil])
([nil nil ((807 . 812) (806 . 808) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -806) (805 . 807)) nil (25898 63829 641486 843000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -810) (undo-tree-id1530 . -1) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -811) (undo-tree-id1531 . -1) 812) nil (25898 63829 641484 468000) 0 nil])
([nil nil ((810 . 817)) nil (25898 63829 641481 675000) 0 nil])
([nil nil ((819 . 821)) nil (25898 63829 641479 719000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -819) (undo-tree-id1528 . -1) (#("	" 0 1 (fontified t)) . -820) (undo-tree-id1529 . -1) 821) nil (25898 63829 641477 763000) 0 nil])
([nil nil ((840 . 842)) nil (25898 63829 641474 481000) 0 nil])
([nil nil ((#("<" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -841) (undo-tree-id1527 . -1) 842) nil (25898 63829 641472 176000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -842) (842 . 843) (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -842) (842 . 843) (841 . 843) (#("`" 0 1 (fontified nil)) . -841) (841 . 842)) nil (25898 63829 641468 893000) 0 nil])
([nil nil ((848 . 858) (847 . 849) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -847) (842 . 848)) nil (25898 63829 641466 30000) 0 nil])
([nil nil ((860 . 862)) nil (25898 63829 641463 166000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -860) (undo-tree-id1525 . -1) (#("	" 0 1 (fontified t)) . -861) (undo-tree-id1526 . -1) 862) nil (25898 63829 641461 211000) 0 nil])
([nil nil ((878 . 879)) nil (25898 63829 641452 550000) 0 nil])
([nil nil ((886 . 890) (885 . 887) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -885) (880 . 886) (879 . 881) (#("`" 0 1 (fontified nil)) . -879) (879 . 880)) nil (25898 63829 641446 823000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1491) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1492) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1493) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1494) (undo-tree-id1573 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1495) (undo-tree-id1574 . -1) 1496 (t 25898 63829 647704 789000)) nil (25898 64018 643672 314000) 0 nil])
([nil nil ((1491 . 1495)) nil (25898 64018 643667 425000) 0 nil])
([nil nil ((1459 . 1461)) nil (25898 64018 643666 28000) 0 nil])
([nil nil ((1461 . 1474)) nil (25898 64018 643664 561000) 0 nil])
([nil nil ((1474 . 1478)) nil (25898 64018 643662 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 1472 1490 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (1472 . 1490) (#("CreateUserResponse" 0 18 (fontified nil)) . 1472) (1472 . 1490) (#("Create" 0 6 (fontified nil)) . 1472) (1472 . 1478) (#("CreateUserResponse" 0 18 (fontified nil)) . -1472) (1472 . 1490) (#("Create" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1472) (undo-tree-id1565 . -6) (undo-tree-id1566 . -6) 1478) nil (25898 64018 643660 370000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1491) (1491 . 1492) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1491) (1491 . 1492) (1490 . 1492)) nil (25898 64018 643657 88000) 0 nil])
([nil nil ((1492 . 1494)) nil (25898 64018 643655 691000) 0 nil])
([nil nil ((1494 . 1498)) nil (25898 64018 643654 294000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1495) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1496) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (#("." 0 1 (fontified t)) . -1497) (undo-tree-id1564 . -1) 1498) nil (25898 64018 643652 408000) 0 nil])
([nil nil ((1495 . 1499)) nil (25898 64018 643649 55000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1498) (undo-tree-id1559 . -1) 1499) nil (25898 64018 643647 589000) 0 nil])
([nil nil ((1498 . 1502)) nil (25898 64018 643645 703000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1501) (undo-tree-id1558 . -1) 1502) nil (25898 64018 643643 747000) 0 nil])
([nil nil ((1501 . 1502)) nil (25898 64018 643642 280000) 0 nil])
([nil nil ((apply yas--snippet-revive 1502 1504 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (1502 . 1504) (#("ID" 0 2 (fontified nil)) . 1502) (1502 . 1504) (#("ID" 0 2 (fontified nil)) . -1502) (1502 . 1504)) nil (25898 64018 643640 325000) 0 nil])
([nil nil ((1504 . 1509)) nil (25898 64018 643638 928000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1505) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1506) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1507) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1508) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) 1509) nil (25898 64018 643636 553000) 0 nil])
([nil nil ((1505 . 1513)) nil (25898 64018 643632 222000) 0 nil])
([nil nil ((apply yas--snippet-revive 1513 1515 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (1513 . 1515) (#("ID" 0 2 (fontified nil)) . 1513) (1513 . 1515) (#("ID" 0 2 (fontified nil)) . -1513) (1513 . 1515)) nil (25898 64018 643630 756000) 0 nil])
([nil nil ((1515 . 1517)) nil (25898 64018 643628 870000) 0 nil])
([nil nil ((1517 . 1521)) nil (25898 64018 643627 473000) 0 nil])
([nil nil ((apply yas--snippet-revive 1517 1524 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (1517 . 1524) (#("userRes" 0 7 (fontified nil)) . 1517) (1517 . 1524) (#("user" 0 4 (fontified nil)) . 1517) (1517 . 1521) (#("userRes" 0 7 (fontified nil)) . -1517) (1517 . 1524) (#("user" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -1517) (undo-tree-id1548 . -4) (undo-tree-id1549 . -4) 1521) nil (25898 64018 643625 587000) 0 nil])
([nil nil ((1524 . 1525)) nil (25898 64018 643623 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 1525 1529 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (1525 . 1529) (#("Name" 0 4 (fontified nil)) . 1525) (1525 . 1529) (#("Name" 0 4 (fontified nil)) . -1525) (1525 . 1529)) nil (25898 64018 643621 396000) 0 nil])
([nil nil ((1529 . 1530)) nil (25898 64018 643619 930000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -1505) (undo-tree-id1547 . -1) 1506) nil (25898 64018 643618 533000) 0 nil])
([nil nil ((1528 . 1531)) nil (25898 64018 643616 158000) 0 nil])
([nil nil ((1531 . 1536)) nil (25898 64018 643615 180000) 0 nil])
([nil nil ((apply yas--snippet-revive 1536 1540 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (1536 . 1540) (#("Name" 0 4 (fontified nil)) . 1536) (1536 . 1540) (#("Name" 0 4 (fontified nil)) . -1536) (1536 . 1540)) nil (25898 64018 643613 224000) 0 nil])
([nil nil ((1541 . 1542) (#(" " 0 1 (fontified nil)) . -1541) (1540 . 1541)) nil (25898 64018 643611 269000) 0 nil])
([nil nil ((1542 . 1550)) nil (25898 64018 643609 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 1550 1559 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (1550 . 1559) (#("CreatedAt" 0 9 (fontified nil)) . 1550) (1550 . 1559) (#("CreatedAt" 0 9 (fontified nil)) . -1550) (1550 . 1559)) nil (25898 64018 643608 405000) 0 nil])
([nil nil ((1559 . 1567)) nil (25898 64018 643606 449000) 0 nil])
([nil nil ((apply yas--snippet-revive 1567 1576 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (1567 . 1576) (#("CreatedAt" 0 9 (fontified nil)) . 1567) (1567 . 1576) (#("CreatedAt" 0 9 (fontified nil)) . -1567) (1567 . 1576)) nil (25898 64018 643605 52000) 0 nil])
([nil nil ((1576 . 1578)) nil (25898 64018 643603 167000) 0 nil])
([nil nil ((1578 . 1586)) nil (25898 64018 643601 770000) 0 nil])
([nil nil ((apply yas--snippet-revive 1586 1595 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (1586 . 1595) (#("UpdatedAt" 0 9 (fontified nil)) . 1586) (1586 . 1595) (#("UpdatedAt" 0 9 (fontified nil)) . -1586) (1586 . 1595)) nil (25898 64018 643599 814000) 0 nil])
([nil nil ((1595 . 1599)) nil (25898 64018 643597 369000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1598) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) 1599) nil (25898 64018 643595 64000) 0 nil])
([nil nil ((1598 . 1600)) nil (25898 64018 643583 191000) 0 nil])
([nil nil ((1600 . 1603)) nil (25898 64018 643581 235000) 0 nil])
([nil nil ((apply yas--snippet-revive 1603 1612 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (1603 . 1612) (#("UpdatedAt" 0 9 (fontified nil)) . 1603) (1603 . 1612) (#("UpdatedAt" 0 9 (fontified nil)) . -1603) (1603 . 1612)) nil (25898 64018 643576 416000) 0 nil])
([nil nil ((1648 . 1651) (t 25898 64018 654193 853000)) nil (25898 64057 612472 863000) 0 nil])
([nil nil ((1978 . 1980) (t 25898 64057 622383 887000)) nil (25898 64120 477970 82000) 0 nil])
([nil nil ((1980 . 1983)) nil (25898 64120 477967 707000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -1982) (undo-tree-id1638 . -1) 1983) nil (25898 64120 477966 241000) 0 nil])
([nil nil ((1982 . 1986)) nil (25898 64120 477963 936000) 0 nil])
([nil nil ((apply yas--snippet-revive 1982 1995 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (1982 . 1995) (#("Middlewares()" 0 13 (fontified nil)) . 1982) (1982 . 1995) (#("midd" 0 4 (fontified nil)) . 1982) (1982 . 1986) (#("Middlewares" 0 11 (fontified nil)) . -1982) (1982 . 1993) (#("midd" 0 4 (face tree-sitter-hl-face:property fontified t)) . -1982) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) 1986) nil (25898 64120 477961 142000) 0 nil])
([nil nil ((1994 . 1995)) nil (25898 64120 477957 859000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1994) (undo-tree-id1635 . -1) 1995) nil (25898 64120 477956 43000) 0 nil])
([nil nil ((1994 . 2000)) nil (25898 64120 477954 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 2033 2043 #s(yas--snippet nil nil nil 57 nil nil nil nil)) (219 . 258) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 57 nil nil nil nil)) (1994 . 2004) (#("middleware" 0 10 (fontified nil)) . 1994) (1994 . 2004) (#("middle" 0 6 (fontified nil)) . 1994) (1994 . 2000) (#("middleware" 0 10 (fontified nil)) . -1994) (1994 . 2004) (#("middle" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -1994) (undo-tree-id1633 . -6) (undo-tree-id1634 . -6) 2000) nil (25898 64120 477951 294000) 0 nil])
([nil nil ((2043 . 2048)) nil (25898 64120 477947 941000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2050 2050 nil nil nil t nil)) nil 58 nil #s(yas--field 1 2050 2050 nil nil nil t nil) nil nil)) (2044 . 2069) (#("Logger(${1:next http.Handler})" 0 30 (fontified nil)) . 2044) (2044 . 2074) (#("Logg" 0 4 (fontified nil)) . 2044) (2044 . 2048) (#("Logger" 0 6 (fontified nil)) . -2044) (2044 . 2050) (#("Logg" 0 4 (face tree-sitter-hl-face:property fontified t)) . -2044) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) 2048) nil (25898 64120 477945 496000) 0 nil])
([nil nil ((#("next http.Handler" 0 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 9 (face tree-sitter-hl-face:variable fontified t) 9 10 (fontified t) 10 17 (face tree-sitter-hl-face:property fontified t)) . 2051)) nil (25898 64120 477942 144000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -2050) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . 1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2051) (undo-tree-id1628 . 1) (undo-tree-id1629 . -1) (undo-tree-id1630 . 1)) nil (25898 64120 477940 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 2044 2050 #s(yas--snippet nil (#s(yas--field 1 2050 2050 nil nil nil t nil)) nil 58 nil #s(yas--field 1 2050 2050 nil nil nil t nil) nil nil))) nil (25898 64120 477933 622000) 0 nil])
([nil nil ((2032 . 2033)) nil (25898 64120 477932 226000) 0 nil])
([nil nil ((#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2032) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) 2033) nil (25898 64120 477929 851000) 0 nil])
([nil nil ((#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2023) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (#("d" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2024) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2025) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2026) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (#("w" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2027) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2028) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2029) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2030) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2031) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) 2032) nil (25898 64120 477926 568000) 0 nil])
([nil nil ((#("M" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2021) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (#("i" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -2022) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) 2023) nil (25898 64120 477911 342000) 0 nil])
([nil nil ((2021 . 2024)) nil (25898 64120 477896 953000) 0 nil])
([nil nil ((931 . 933) (t 25898 64120 484968 807000)) nil (25901 4219 216621 712000) 0 nil])
([nil nil ((933 . 936)) nil (25901 4219 216621 51000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -933) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -934) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -935) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 936) nil (25901 4219 216619 969000) 0 nil])
([nil nil ((933 . 936)) nil (25901 4219 216615 911000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -933) (undo-tree-id1 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -934) (undo-tree-id2 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -935) (undo-tree-id3 . -1) 936) nil (25901 4219 216614 228000) 0 nil])
([nil nil ((933 . 934)) nil (25901 4219 216610 722000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -933) (undo-tree-id0 . -1) 934) nil (25901 4219 216609 990000) 0 nil])
([nil nil ((933 . 950)) nil (25901 4219 216555 678000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -951) (951 . 952) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -951) (951 . 952) (950 . 952) (#("`" 0 1 (fontified nil)) . -950) (950 . 951)) nil (25901 4219 216554 85000) 0 nil])
([nil nil ((957 . 962) (956 . 958) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -956) (951 . 957)) nil (25901 4219 216551 841000) 0 nil])
([nil nil ((962 . 964)) nil (25901 4219 216546 701000) 0 nil])
([nil nil ((1686 . 1688) (t 25901 4219 322401 403000)) nil (25901 4232 259216 375000) 0 nil])
([nil nil ((1688 . 1692)) nil (25901 4232 259215 995000) 0 nil])
([nil nil ((apply yas--snippet-revive 1688 1695 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (1688 . 1695) (#("userRes" 0 7 (fontified nil)) . 1688) (1688 . 1695) (#("user" 0 4 (fontified nil)) . 1688) (1688 . 1692) (#("userRes" 0 7 (fontified nil)) . -1688) (1688 . 1695) (#("user" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -1688) (undo-tree-id10 . -4) (undo-tree-id11 . -4) 1692) nil (25901 4232 259214 662000) 0 nil])
([nil nil ((1695 . 1696)) nil (25901 4232 259200 926000) 0 nil])
([nil nil ((apply yas--snippet-revive 1696 1702 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (1696 . 1702) (#("Apikey" 0 6 (fontified nil)) . 1696) (1696 . 1702) (#("Apikey" 0 6 (fontified nil)) . -1696) (1696 . 1702)) nil (25901 4232 259200 145000) 0 nil])
([nil nil ((1702 . 1710)) nil (25901 4232 259198 301000) 0 nil])
([nil nil ((apply yas--snippet-revive 1710 1716 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (1710 . 1716) (#("Apikey" 0 6 (fontified nil)) . 1710) (1710 . 1716) (#("Apikey" 0 6 (fontified nil)) . -1710) (1710 . 1716)) nil (25901 4232 259193 402000) 0 nil])
([nil nil ((1758 . 1760) (t 25901 4232 271456 22000)) nil (25901 4274 854156 197000) 0 nil])
([nil nil ((1760 . 1767)) nil (25901 4274 854155 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1766) (1766 . 1767) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1766) (1766 . 1767) (1760 . 1767)) nil (25901 4274 854154 895000) 0 nil])
([nil nil ((1766 . 1774)) nil (25901 4274 854153 963000) 0 nil])
([nil nil ((1775 . 1776)) nil (25901 4274 854153 182000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1784) (1784 . 1785) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1784) (1784 . 1785) (1783 . 1785)) nil (25901 4274 854152 711000) 0 nil])
([nil nil ((1784 . 1795)) nil (25901 4274 854151 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 1791 1805 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1791 . 1805) (#("ResponseWriter" 0 14 (fontified nil)) . 1791) (1791 . 1805) (#("Resp" 0 4 (fontified nil)) . 1791) (1791 . 1795) (#("ResponseWriter" 0 14 (fontified nil)) . -1791) (1791 . 1805) (#("Resp" 0 4 (fontified t face tree-sitter-hl-face:type)) . -1791) (undo-tree-id25 . -4) (undo-tree-id26 . -4) 1795) nil (25901 4274 854150 437000) 0 nil])
([nil nil ((1805 . 1810)) nil (25901 4274 854147 511000) 0 nil])
([nil nil ((1810 . 1817)) nil (25901 4274 854146 539000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1815) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1816) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 1817) nil (25901 4274 854144 986000) 0 nil])
([nil nil ((1815 . 1818)) nil (25901 4274 854142 492000) 0 nil])
([nil nil ((apply yas--snippet-revive 1815 1822 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (1815 . 1822) (#("Request" 0 7 (fontified nil)) . 1815) (1815 . 1822) (#("Req" 0 3 (fontified nil)) . 1815) (1815 . 1818) (#("Request" 0 7 (fontified nil)) . -1815) (1815 . 1822) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1815) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) 1818) nil (25901 4274 854141 490000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1825) (1825 . 1826) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1825) (1825 . 1826) (1823 . 1826)) nil (25901 4274 854123 907000) 0 nil])
([nil nil ((1826 . 1827) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1826) (1826 . 1827) (1825 . 1827)) nil (25901 4274 854117 4000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1771) (undo-tree-id27 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1772) (undo-tree-id28 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1773) (undo-tree-id29 . -1) 1774 (t 25901 4274 869635 794000)) nil (25901 4281 377866 480000) 0 nil])
([nil nil ((1771 . 1777)) nil (25901 4281 377846 753000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1831 . 1832) (#("
" 0 1 (fontified nil)) . -2126) (1830 . 2127) 1829 (t 25901 4281 391663 330000)) nil (25901 4658 211514 976000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1829) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25901 4658 211513 513000) 0 nil])
([nil nil ((#("	claims := jwt.RegisteredClaims{}
	return jwt.ParseWithClaims(jwtToken, &claims, func(token *jwt.Token) (interface{}, error) {
		jwtSecret := os.Getenv(\"JWT_SECRET\")
		return []byte(jwtSecret), nil
	})
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 10 (fontified t face tree-sitter-hl-face:operator) 10 15 (fontified t) 15 31 (fontified t face tree-sitter-hl-face:type) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 35 (fontified t) 35 41 (fontified t face tree-sitter-hl-face:keyword) 41 42 (fontified t) 42 45 (fontified t face tree-sitter-hl-face:variable) 45 46 (fontified t) 46 61 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 61 62 (fontified t face (rainbow-delimiters-depth-2-face)) 62 70 (fontified t face tree-sitter-hl-face:variable) 70 72 (fontified t) 72 73 (fontified t face tree-sitter-hl-face:operator) 73 79 (fontified t face tree-sitter-hl-face:variable) 79 81 (fontified t) 81 85 (fontified t face tree-sitter-hl-face:keyword) 85 86 (fontified t face (rainbow-delimiters-depth-3-face)) 86 91 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 91 92 (fontified t) 92 93 (fontified t face tree-sitter-hl-face:operator) 93 97 (fontified t) 97 102 (fontified t face tree-sitter-hl-face:type) 102 103 (fontified t face (rainbow-delimiters-depth-3-face)) 103 104 (fontified t) 104 105 (fontified t face (rainbow-delimiters-depth-3-face)) 105 114 (fontified t face tree-sitter-hl-face:keyword) 114 115 (fontified t face (rainbow-delimiters-depth-4-face)) 115 116 (fontified t face (rainbow-delimiters-depth-4-face)) 116 118 (fontified t) 118 123 (fontified t face tree-sitter-hl-face:type) 123 124 (fontified t face (rainbow-delimiters-depth-3-face)) 124 125 (fontified t) 125 126 (fontified t face (rainbow-delimiters-depth-3-face)) 126 129 (fontified t) 129 138 (fontified t face tree-sitter-hl-face:variable) 138 139 (fontified t) 139 141 (fontified t face tree-sitter-hl-face:operator) 141 142 (fontified t) 142 144 (fontified t face tree-sitter-hl-face:variable) 144 145 (fontified t) 145 151 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 151 152 (fontified t face (rainbow-delimiters-depth-4-face)) 152 164 (fontified t face tree-sitter-hl-face:string) 164 165 (fontified t face (rainbow-delimiters-depth-4-face)) 165 168 (fontified t) 168 174 (fontified t face tree-sitter-hl-face:keyword) 174 175 (fontified t) 175 176 (fontified t face (rainbow-delimiters-depth-4-face)) 176 177 (fontified t face (rainbow-delimiters-depth-4-face)) 177 181 (fontified t face tree-sitter-hl-face:type) 181 182 (fontified t face (rainbow-delimiters-depth-4-face)) 182 191 (fontified t face tree-sitter-hl-face:variable) 191 192 (fontified t face (rainbow-delimiters-depth-4-face)) 192 194 (fontified t) 194 197 (fontified t face tree-sitter-hl-face:constant\.builtin) 197 199 (fontified t) 199 200 (fontified t face (rainbow-delimiters-depth-3-face)) 200 201 (fontified t face (rainbow-delimiters-depth-2-face)) 201 202 (fontified t)) . 1923) (undo-tree-id187 . -198) (undo-tree-id188 . 1) (undo-tree-id189 . -201) (undo-tree-id190 . -198) (undo-tree-id191 . -198)) nil (25901 4658 211511 450000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1876) (undo-tree-id179 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1877) (undo-tree-id180 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1878) (undo-tree-id181 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1879) (undo-tree-id182 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1880) (undo-tree-id183 . -1) (#("k" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1881) (undo-tree-id184 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1882) (undo-tree-id185 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1883) (undo-tree-id186 . -1) 1884) nil (25901 4658 211509 195000) 0 nil])
([nil nil ((1876 . 1882)) nil (25901 4658 211504 156000) 0 nil])
([nil nil ((1920 . 1921)) nil (25901 4658 211503 745000) 0 nil])
([nil nil ((1921 . 1923)) nil (25901 4658 211502 994000) 0 nil])
([nil nil ((1923 . 1925)) nil (25901 4658 211502 252000) 0 nil])
([nil nil ((1925 . 1930)) nil (25901 4658 211501 631000) 0 nil])
([nil nil ((#("\305\261" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1920) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("
" 0 1 (fontified t)) . -1921) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("	" 0 1 (fontified t)) . -1922) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1923) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1924) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1925) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1926) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1927) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1928) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1929) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 1930) nil (25901 4658 211500 509000) 0 nil])
([nil nil ((1874 . 1876)) nil (25901 4658 211490 931000) 0 nil])
([nil nil ((1876 . 1882)) nil (25901 4658 211490 600000) 0 nil])
([nil nil ((apply yas--snippet-revive 1887 1894 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (158 . 169) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (1876 . 1883) (#("strings" 0 7 (fontified nil)) . 1876) (1876 . 1883) (#("string" 0 6 (fontified nil)) . 1876) (1876 . 1882) (#("strings" 0 7 (fontified nil)) . -1876) (1876 . 1883) (#("string" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -1876) (undo-tree-id157 . -6) (undo-tree-id158 . -6) 1882) nil (25901 4658 211489 348000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1885) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("	" 0 1 (fontified t)) . -1886) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1887) (undo-tree-id150 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1888) (undo-tree-id151 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1889) (undo-tree-id152 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1890) (undo-tree-id153 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1891) (undo-tree-id154 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1892) (undo-tree-id155 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1893) (undo-tree-id156 . -1) 1894) nil (25901 4658 211486 132000) 0 nil])
([nil nil ((1931 . 1933)) nil (25901 4658 211476 784000) 0 nil])
([nil nil ((1933 . 1937)) nil (25901 4658 211476 384000) 0 nil])
([nil nil ((1937 . 1940)) nil (25901 4658 211475 913000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1939) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 1940) nil (25901 4658 211475 231000) 0 nil])
([nil nil ((1939 . 1942)) nil (25901 4658 211473 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 1942 1949 #s(yas--snippet nil nil nil 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 6 nil nil nil nil)) (1942 . 1949) (#("Queries" 0 7 (fontified nil)) . 1942) (1942 . 1949) (#("Queries" 0 7 (fontified nil)) . -1942) (1942 . 1949)) nil (25901 4658 211472 847000) 0 nil])
([nil nil ((1949 . 1950)) nil (25901 4658 211471 765000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1941) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("Q" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1942) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1943) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1944) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1945) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1946) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1947) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1948) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("." 0 1 (fontified t)) . -1949) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 1950) nil (25901 4658 211470 152000) 0 nil])
([nil nil ((1941 . 1945)) nil (25901 4658 211463 159000) 0 nil])
([nil nil ((1945 . 1946)) nil (25901 4658 211462 828000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1942) (undo-tree-id122 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1943) (undo-tree-id123 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1944) (undo-tree-id124 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1945) (undo-tree-id125 . -1) 1946) nil (25901 4658 211461 876000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1958) (1958 . 1959) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1958) (1958 . 1959) (1942 . 1959)) nil (25901 4658 211459 331000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1951) (undo-tree-id121 . -1) 1952) nil (25901 4658 211458 289000) 0 nil])
([nil nil ((1951 . 1952)) nil (25901 4658 211456 837000) 0 nil])
([nil nil ((1958 . 1963)) nil (25901 4658 211456 175000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:property)) . -1962) (undo-tree-id120 . -1) 1963) nil (25901 4658 211455 484000) 0 nil])
([nil nil ((1962 . 1963)) nil (25901 4658 211454 372000) 0 nil])
([nil nil ((1963 . 1965)) nil (25901 4658 211453 901000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1933) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1934) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1935) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1936) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1937) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1938) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1939) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1940) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 1941) nil (25901 4658 211452 178000) 0 nil])
([nil nil ((1933 . 1935)) nil (25901 4658 211213 558000) 0 nil])
([nil nil ((1935 . 1936)) nil (25901 4658 211212 867000) 0 nil])
([nil nil ((1936 . 1937)) nil (25901 4658 211212 196000) 0 nil])
([nil nil ((1961 . 1967)) nil (25901 4658 211211 885000) 0 nil])
([nil nil ((1968 . 1970)) nil (25901 4658 211211 565000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1968) (undo-tree-id78 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1969) (undo-tree-id79 . -1) 1970) nil (25901 4658 211210 883000) 0 nil])
([nil nil ((1968 . 1969)) nil (25901 4658 211209 170000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1944) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("B" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1945) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1946) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("A" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1947) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1948) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("i" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1949) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("k" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1950) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1951) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1952) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 1953) nil (25901 4658 211207 798000) 0 nil])
([nil nil ((1944 . 1945)) nil (25901 4658 211197 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 1938 1953 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (1938 . 1953) (#("GetUserByApiKey" 0 15 (fontified nil)) . 1938) (1938 . 1953) (#("GetUser" 0 7 (fontified nil)) . 1938) (1938 . 1945) (#("GetUserByApiKey" 0 15 (fontified nil)) . -1938) (1938 . 1953) (#("GetUser" 0 7 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property))) . -1938) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -6) 1945) nil (25901 4658 211197 37000) 0 nil])
([nil nil ((1933 . 1937)) nil (25901 4658 211194 903000) 0 nil])
([nil nil ((1937 . 1938)) nil (25901 4658 211194 573000) 0 nil])
([nil nil ((1938 . 1944)) nil (25901 4658 211194 142000) 0 nil])
([nil nil ((1944 . 1945)) nil (25901 4658 211193 701000) 0 nil])
([nil nil ((1945 . 1946)) nil (25901 4658 211193 50000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1943) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 1944) nil (25901 4658 211191 958000) 0 nil])
([nil nil ((1943 . 1944)) nil (25901 4658 211190 164000) 0 nil])
([nil nil ((1982 . 1984)) nil (25901 4658 211189 32000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1999) (1999 . 2000) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1999) (1999 . 2000) (1984 . 2000)) nil (25901 4658 211188 10000) 0 nil])
([nil nil ((2000 . 2002) (2001 . 2002) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2000) (2000 . 2002) (1999 . 2001)) nil (25901 4658 211187 219000) 0 nil])
([nil nil ((2002 . 2009)) nil (25901 4658 211186 578000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2008) (undo-tree-id54 . -1) 2009) nil (25901 4658 211185 566000) 0 nil])
([nil nil ((2001 . 2003) (#("		" 0 2 (fontified nil)) . 2000) (undo-tree-id53 . -2) (2002 . 2003)) nil (25901 4658 211184 143000) 0 nil])
([nil nil ((2000 . 2002)) nil (25901 4658 211182 660000) 0 nil])
([nil nil ((2002 . 2009)) nil (25901 4658 211181 869000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2003) (undo-tree-id47 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2004) (undo-tree-id48 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2005) (undo-tree-id49 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2006) (undo-tree-id50 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2007) (undo-tree-id51 . -1) (#("." 0 1 (fontified t)) . -2008) (undo-tree-id52 . -1) 2009) nil (25901 4658 211180 436000) 0 nil])
([nil nil ((2003 . 2008)) nil (25901 4658 211176 278000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2025 2026 nil nil nil t #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil))) #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil)) #s(yas--field 3 2033 2035 nil nil nil t nil)) nil 8 nil #s(yas--field 3 2033 2035 nil nil nil t nil) nil nil)) (2008 . 2069) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2008) (2008 . 2084) (#("RespondWithError" 0 16 (fontified nil)) . -2008) (2008 . 2024)) nil (25901 4658 211175 467000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2026) (2025 . 2026)) nil (25901 4658 211174 795000) 0 nil])
([nil nil ((2029 . 2031) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2029) (2028 . 2029)) nil (25901 4658 211174 214000) 0 nil])
([nil nil ((2033 . 2035) (#("\"" 0 1 (fontified nil)) . -2033) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 2034) (2033 . 2034)) nil (25901 4658 211173 543000) 0 nil])
([nil nil ((apply yas--snippet-revive 2008 2036 #s(yas--snippet nil (#s(yas--field 1 2025 2026 nil nil nil t #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil))) #s(yas--field 2 2028 2031 nil nil nil t #s(yas--field 3 2033 2035 nil nil nil t nil)) #s(yas--field 3 2033 2035 nil nil nil t nil)) nil 8 nil #s(yas--field 3 2033 2035 nil nil nil t nil) nil nil))) nil (25901 4658 211172 752000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2029) (undo-tree-id45 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2030) (undo-tree-id46 . -1) 2031) nil (25901 4658 211172 211000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2028) (undo-tree-id44 . -1) 2029) nil (25901 4658 211170 608000) 0 nil])
([nil nil ((2028 . 2031)) nil (25901 4658 211169 616000) 0 nil])
([nil nil ((2034 . 2043)) nil (25901 4658 211169 135000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2040) (undo-tree-id41 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2041) (undo-tree-id42 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2042) (undo-tree-id43 . -1) 2043) nil (25901 4658 211168 83000) 0 nil])
([nil nil ((2040 . 2046)) nil (25901 4658 211165 578000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2048) (undo-tree-id32 . -1) (#("	" 0 1 (fontified t)) . -2049) (undo-tree-id33 . -1) (#("	" 0 1 (fontified t)) . -2050) (undo-tree-id34 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2051) (undo-tree-id35 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2052) (undo-tree-id36 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2053) (undo-tree-id37 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2054) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2055) (undo-tree-id39 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2056) (undo-tree-id40 . -1) 2057) nil (25901 4658 211164 366000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2058) (2058 . 2059) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2058) (2058 . 2059) (2051 . 2059)) nil (25901 4658 211159 176000) 0 nil])
([nil nil ((2059 . 2061) (2060 . 2061) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2059) (2059 . 2061) (2058 . 2060)) nil (25901 4658 211158 595000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2062 . 2063) (#("
" 0 1 (fontified nil)) . -2284) (2061 . 2285) 2060) nil (25901 4658 211157 763000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 2059) (undo-tree-id30 . -2) (undo-tree-id31 . -1) 2060) nil (25901 4658 211156 691000) 0 nil])
([nil nil ((#("Create" 0 6 (fontified t face tree-sitter-hl-face:type)) . 768) 786 (#("Create" 0 6 (fontified t face tree-sitter-hl-face:type)) . 1557) 1575 (#("Create" 0 6 (fontified t face tree-sitter-hl-face:type)) . 2071) 2081) nil (25901 4658 211138 988000) 0 nil])
([nil nil ((659 . 660) (923 . 926) (955 . 958) (1405 . 1406) (#("
  " 0 3 (fontified t)) . -1406) (#(";" 0 1 (fontified t)) . -1969) (undo-tree-id197 . -1) (2047 . 2048) (2074 . 2075) (2096 . 2097) (2122 . 2123) (2158 . 2159) (2194 . 2195) (2224 . 2225) (2534 . 2535) (#("  " 0 2 (fontified t)) . 2534) (t 25901 4658 318258 914000)) nil (25901 4775 569454 974000) 0 nil])
([nil nil ((2980 . 2982) (t 25901 4775 584756 618000)) nil (25901 4823 976647 224000) 0 nil])
([nil nil ((2982 . 2985)) nil (25901 4823 976646 22000) 0 nil])
([nil nil ((apply yas--snippet-revive 2982 2990 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (2982 . 2990) (#("v1Router" 0 8 (fontified nil)) . 2982) (2982 . 2990) (#("v1R" 0 3 (fontified nil)) . 2982) (2982 . 2985) (#("v1Router" 0 8 (fontified nil)) . -2982) (2982 . 2990) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2982) (undo-tree-id218 . -3) (undo-tree-id219 . -3) 2985) nil (25901 4823 976644 649000) 0 nil])
([nil nil ((2990 . 2994)) nil (25901 4823 976641 343000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2992) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2993) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 2994) nil (25901 4823 976640 501000) 0 nil])
([nil nil ((2995 . 2998) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:operator)) . -2995) (2992 . 2996)) nil (25901 4823 976638 37000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2996) (undo-tree-id213 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 2997)) nil (25901 4823 976636 844000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2994) (undo-tree-id211 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -2995) (undo-tree-id212 . -1) 2996) nil (25901 4823 976634 921000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2995) (2995 . 2996) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2995) (2995 . 2996) (2994 . 2996)) nil (25901 4823 976632 35000) 0 nil])
([nil nil ((2996 . 3002) (2995 . 2997) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2995) (2995 . 2996)) nil (25901 4823 976630 62000) 0 nil])
([nil nil ((3003 . 3008)) nil (25901 4823 976628 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 3005 3019 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (3005 . 3019) (#("apiCfg.GetUser" 0 14 (fontified nil)) . 3005) (3005 . 3019) (#("api" 0 3 (fontified nil)) . 3005) (3005 . 3008) (#("apiCfg.GetUser" 0 14 (fontified nil)) . -3005) (3005 . 3019) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3005) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -1) (undo-tree-id201 . -2) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) 3008) nil (25901 4823 976623 149000) 0 nil])
([nil nil ((2279 . 2281) (t 25901 4823 986962 140000)) nil (25901 20085 58351 440000) 0 nil])
([nil nil ((2281 . 2299)) nil (25901 20085 58351 19000) 0 nil])
([nil nil ((1762 . 1764)) nil (25901 20085 58350 669000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1762) (undo-tree-id225 . -1) (#("
" 0 1 (fontified t)) . -1763) (undo-tree-id226 . -1) 1764) nil (25901 20085 58350 148000) 0 nil])
([nil nil ((1762 . 1764)) nil (25901 20085 58348 224000) 0 nil])
([nil nil ((1764 . 1785)) nil (25901 20085 58347 944000) 0 nil])
([nil nil ((1785 . 1786)) nil (25901 20085 58347 403000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1788) (1788 . 1789) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1788) (1788 . 1789) (1786 . 1789)) nil (25901 20085 58346 691000) 0 nil])
([nil nil ((1788 . 1796)) nil (25901 20085 58345 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 1793 1807 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (1793 . 1807) (#("ResponseWriter" 0 14 (fontified nil)) . 1793) (1793 . 1807) (#("Res" 0 3 (fontified nil)) . 1793) (1793 . 1796) (#("ResponseWriter" 0 14 (fontified nil)) . -1793) (1793 . 1807) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1793) (undo-tree-id223 . -3) (undo-tree-id224 . -3) 1796) nil (25901 20085 58345 98000) 0 nil])
([nil nil ((1807 . 1809)) nil (25901 20085 58340 460000) 0 nil])
([nil nil ((1809 . 1814)) nil (25901 20085 58339 297000) 0 nil])
([nil nil ((#("\305\221" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1813) (undo-tree-id222 . -1) 1814) nil (25901 20085 58338 45000) 0 nil])
([nil nil ((1813 . 1818)) nil (25901 20085 58336 472000) 0 nil])
([nil nil ((apply yas--snippet-revive 1815 1822 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (1815 . 1822) (#("Request" 0 7 (fontified nil)) . 1815) (1815 . 1822) (#("Req" 0 3 (fontified nil)) . 1815) (1815 . 1818) (#("Request" 0 7 (fontified nil)) . -1815) (1815 . 1822) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1815) (undo-tree-id220 . -3) (undo-tree-id221 . -3) 1818) nil (25901 20085 58334 488000) 0 nil])
([nil nil ((1822 . 1828)) nil (25901 20085 58315 82000) 0 nil])
([nil nil ((1828 . 1833)) nil (25901 20085 58314 681000) 0 nil])
([nil nil ((apply yas--snippet-revive 1833 1837 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (1833 . 1837) (#("User" 0 4 (fontified nil)) . 1833) (1833 . 1837) (#("User" 0 4 (fontified nil)) . -1833) (1833 . 1837)) nil (25901 20085 58308 790000) 0 nil])
([nil nil ((1838 . 1840) (t 25901 20085 166455 719000)) nil (25901 20145 863417 850000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1846) (1846 . 1847) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1846) (1846 . 1847) (1840 . 1847)) nil (25901 20145 863417 459000) 0 nil])
([nil nil ((1846 . 1848)) nil (25901 20145 863417 8000) 0 nil])
([nil nil ((1859 . 1860)) nil (25901 20145 863416 748000) 0 nil])
([nil nil ((990 . 991)) nil (25901 20145 863416 467000) 0 nil])
([nil nil ((1849 . 1853)) nil (25901 20145 863416 146000) 0 nil])
([nil nil ((1853 . 1854)) nil (25901 20145 863415 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 1850 1859 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (1850 . 1859) (#("apiConfig" 0 9 (fontified nil)) . 1850) (1850 . 1859) (#("apiC" 0 4 (fontified nil)) . 1850) (1850 . 1854) (#("apiConfig" 0 9 (fontified nil)) . -1850) (1850 . 1859) (#("apiC" 0 4 (fontified t face tree-sitter-hl-face:type)) . -1850) (undo-tree-id231 . -4) (undo-tree-id232 . -4) 1854) nil (25901 20145 863415 24000) 0 nil])
([nil nil ((1860 . 1866)) nil (25901 20145 863413 201000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1865) (undo-tree-id230 . -1) 1866) nil (25901 20145 863412 850000) 0 nil])
([nil nil ((1865 . 1869)) nil (25901 20145 863411 959000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1868) (undo-tree-id229 . -1) 1869) nil (25901 20145 863411 438000) 0 nil])
([nil nil ((1868 . 1872)) nil (25901 20145 863410 265000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1876) (1876 . 1877) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1876) (1876 . 1877) (1872 . 1877)) nil (25901 20145 863409 694000) 0 nil])
([nil nil ((1876 . 1897)) nil (25901 20145 863408 712000) 0 nil])
([nil nil ((1898 . 1909)) nil (25901 20145 863407 681000) 0 nil])
([nil nil ((apply yas--snippet-revive 1904 1915 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (1904 . 1915) (#("HandlerFunc" 0 11 (fontified nil)) . 1904) (1904 . 1915) (#("Handl" 0 5 (fontified nil)) . 1904) (1904 . 1909) (#("HandlerFunc" 0 11 (fontified nil)) . -1904) (1904 . 1915) (#("Handl" 0 5 (fontified t face tree-sitter-hl-face:type)) . -1904) (undo-tree-id227 . -5) (undo-tree-id228 . -5) 1909) nil (25901 20145 863406 528000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1917) (1917 . 1918) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1917) (1917 . 1918) (1915 . 1918)) nil (25901 20145 863391 861000) 0 nil])
([nil nil ((1918 . 1919) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1918) (1918 . 1919) (1917 . 1919)) nil (25901 20145 863385 569000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1918) (undo-tree-id244 . -1) 1919 (t 25901 20145 879050 641000)) nil (25901 20467 636330 328000) 0 nil])
([nil nil ((1918 . 1920)) nil (25901 20467 636328 455000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1917) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -1918) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#(" " 0 1 (fontified t)) . -1919) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("
" 0 1 (fontified t)) . -1920) (undo-tree-id242 . 1) (undo-tree-id243 . -1) 1921) nil (25901 20467 636326 591000) 0 nil])
([nil nil ((1918 . 1919) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1918) (1918 . 1919) (1917 . 1919)) nil (25901 20467 636301 985000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1900) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1901) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1902) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (#("." 0 1 (fontified t)) . -1903) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1904) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1905) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1906) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1907) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1908) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1909) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1910) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1911) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1912) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1913) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1914) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#(" " 0 1 (fontified t)) . -1915) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1916) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (#("
" 0 1 (fontified t)) . -1917) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("	" 0 1 (fontified t)) . -1918) (undo-tree-id842 . -1) (#("
" 0 1 (fontified t)) . -1919) (undo-tree-id843 . 1) (undo-tree-id844 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1920) (undo-tree-id845 . -1) (undo-tree-id846 . 1) (undo-tree-id847 . -1) 1921 (t 25901 20467 649916 632000)) nil (25901 20673 69439 829000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1879) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (#("l" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1880) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1881) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1882) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#(" " 0 1 (fontified t)) . -1883) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1884) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1885) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1886) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1887) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1888) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1889) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1890) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1891) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1892) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1893) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1894) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1895) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1896) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1897) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#(" " 0 1 (fontified t)) . -1898) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1899) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) 1900) nil (25901 20673 69415 72000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1858) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1859) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#(" " 0 1 (fontified t)) . -1860) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1861) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1862) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1863) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1864) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1865) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1866) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1867) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1868) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("r" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1869) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("e" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1870) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#("A" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1871) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (#("u" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -1872) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1873) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1874) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1875) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("h" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1876) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1877) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1878) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) 1879) nil (25901 20673 69373 223000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1837) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1838) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("
" 0 1 (fontified t)) . -1839) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("
" 0 1 (fontified t)) . -1840) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1841) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1842) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1843) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -1844) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#(" " 0 1 (fontified t)) . -1845) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1846) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1847) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#(" " 0 1 (fontified t)) . -1848) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -1849) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1850) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1851) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1852) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1853) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1854) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1855) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1856) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1857) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) 1858) nil (25901 20673 69348 997000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1816) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1817) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1818) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1819) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1820) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1821) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1822) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("," 0 1 (fontified t)) . -1823) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (#(" " 0 1 (fontified t)) . -1824) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1825) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1826) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1827) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1828) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("b" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1829) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1830) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1831) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1832) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (#("." 0 1 (fontified t)) . -1833) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1834) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1835) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1836) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 1837) nil (25901 20673 69323 189000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1795) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1796) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1797) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1798) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1799) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1800) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1801) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1802) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1803) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1804) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1805) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1806) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1807) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("," 0 1 (fontified t)) . -1808) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#(" " 0 1 (fontified nil)) . -1809) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("*" 0 1 (fontified nil face tree-sitter-hl-face:operator)) . -1810) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("h" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1811) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#("t" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1812) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1813) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1814) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("." 0 1 (fontified t)) . -1815) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) 1816) nil (25901 20673 69283 594000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1774) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1775) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1776) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1777) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1778) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1779) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1780) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1781) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1782) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (#(" " 0 1 (fontified t)) . -1783) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1784) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1785) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1786) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -1787) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1788) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("h" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1789) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1790) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1791) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("p" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -1792) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("." 0 1 (fontified t)) . -1793) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1794) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 1795) nil (25901 20673 69254 860000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1765) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1766) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1767) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -1768) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#(" " 0 1 (fontified t)) . -1769) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1770) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1771) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1772) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1773) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) 1774) nil (25901 20673 69218 191000) 0 nil])
([nil nil ((1765 . 1782)) nil (25901 20673 69205 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1771) (1771 . 1772) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1771) (1771 . 1772) (1769 . 1772)) nil (25901 20673 69204 355000) 0 nil])
([nil nil ((1771 . 1778)) nil (25901 20673 69202 762000) 0 nil])
([nil nil ((1778 . 1780)) nil (25901 20673 69202 611000) 0 nil])
([nil nil ((apply yas--snippet-revive 1774 1783 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (1774 . 1783) (#("apiConfig" 0 9 (fontified nil)) . 1774) (1774 . 1783) (#("apiCon" 0 6 (fontified nil)) . 1774) (1774 . 1780) (#("apiConfig" 0 9 (fontified nil)) . -1774) (1774 . 1783) (#("apiCon" 0 6 (fontified t face tree-sitter-hl-face:type)) . -1774) (undo-tree-id298 . -6) (undo-tree-id299 . -6) 1780) nil (25901 20673 69201 599000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1798) (1798 . 1799) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1798) (1798 . 1799) (1797 . 1799)) nil (25901 20673 69199 786000) 0 nil])
([nil nil ((1798 . 1805)) nil (25901 20673 69199 485000) 0 nil])
([nil nil ((1806 . 1807)) nil (25901 20673 69199 115000) 0 nil])
([nil nil ((1805 . 1817)) nil (25901 20673 69198 824000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1812) (undo-tree-id293 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1813) (undo-tree-id294 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1814) (undo-tree-id295 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1815) (undo-tree-id296 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1816) (undo-tree-id297 . -1) 1817) nil (25901 20673 69197 972000) 0 nil])
([nil nil ((1812 . 1822)) nil (25901 20673 69195 929000) 0 nil])
([nil nil ((1823 . 1836)) nil (25901 20673 69195 608000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1829) (undo-tree-id286 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1830) (undo-tree-id287 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1831) (undo-tree-id288 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1832) (undo-tree-id289 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1833) (undo-tree-id290 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1834) (undo-tree-id291 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1835) (undo-tree-id292 . -1) 1836) nil (25901 20673 69194 927000) 0 nil])
([nil nil ((1829 . 1835)) nil (25901 20673 69191 861000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1823) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1824) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1825) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("T" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1826) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1827) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("." 0 1 (fontified nil)) . -1828) (undo-tree-id279 . -1) (#("H" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1829) (undo-tree-id280 . -1) (#("a" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1830) (undo-tree-id281 . -1) (#("n" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -1831) (undo-tree-id282 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1832) (undo-tree-id283 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1833) (undo-tree-id284 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1834) (undo-tree-id285 . -1) 1835) nil (25901 20673 69190 38000) 0 nil])
([nil nil ((1823 . 1832)) nil (25901 20673 69183 325000) 0 nil])
([nil nil ((apply yas--snippet-revive 1829 1840 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (1829 . 1840) (#("HandlerFunc" 0 11 (fontified nil)) . 1829) (1829 . 1840) (#("han" 0 3 (fontified nil)) . 1829) (1829 . 1832) (#("HandlerFunc" 0 11 (fontified nil)) . -1829) (1829 . 1840) (#("han" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1829) (undo-tree-id267 . -3) (undo-tree-id268 . -3) 1832) nil (25901 20673 69182 203000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1811) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 1812) nil (25901 20673 69179 768000) 0 nil])
([nil nil ((1811 . 1812)) nil (25901 20673 69177 304000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t)) . -1806) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("T" 0 1 (fontified t)) . -1807) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("T" 0 1 (fontified t)) . -1808) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("P" 0 1 (fontified t)) . -1809) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 1810) nil (25901 20673 69176 11000) 0 nil])
([nil nil ((1806 . 1809)) nil (25901 20673 68879 382000) 0 nil])
([nil nil ((1809 . 1810)) nil (25901 20673 68873 881000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1842) (1842 . 1843) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1842) (1842 . 1843) (1841 . 1843) (t 25901 20673 78301 577000)) nil (25901 20677 901433 804000) 0 nil])
([nil nil ((1843 . 1844) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1843) (1843 . 1844) (1842 . 1844)) nil (25901 20677 901427 563000) 0 nil])
([nil nil ((1844 . 1846) (t 25901 20678 10325 891000)) nil (25901 21005 928808 862000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1844) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("." 0 1 (fontified t)) . -1845) (undo-tree-id926 . -1) (undo-tree-id927 . -1) 1846) nil (25901 21005 928807 960000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1936) (1844 . 1937) 1843) nil (25901 21005 928805 125000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1843) (undo-tree-id922 . -1) (undo-tree-id923 . -1)) nil (25901 21005 928803 913000) 0 nil])
([nil nil ((1934 . 1936)) nil (25901 21005 928802 861000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1937 . 1938) (#("
" 0 1 (fontified nil)) . -1986) (1936 . 1987) 1935) nil (25901 21005 928801 548000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1935) (undo-tree-id921 . -1)) nil (25901 21005 928800 456000) 0 nil])
([nil nil ((1984 . 1986)) nil (25901 21005 928799 845000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2001) (2001 . 2002) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2001) (2001 . 2002) (1986 . 2002)) nil (25901 21005 928798 583000) 0 nil])
([nil nil ((2002 . 2004) (2003 . 2004) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2002) (2002 . 2004) (2001 . 2003)) nil (25901 21005 928796 328000) 0 nil])
([nil nil ((2004 . 2006)) nil (25901 21005 928795 76000) 0 nil])
([nil nil ((2006 . 2008)) nil (25901 21005 928794 585000) 0 nil])
([nil nil ((2008 . 2009)) nil (25901 21005 928793 794000) 0 nil])
([nil nil ((2009 . 2010)) nil (25901 21005 928792 702000) 0 nil])
([nil nil ((#("	if err != nil {
		utils.
	}
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t) 4 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 10 (fontified t face tree-sitter-hl-face:operator) 10 11 (fontified t) 11 14 (fontified t face tree-sitter-hl-face:constant\.builtin) 14 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 19 (fontified t) 19 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t)) . 1985) (undo-tree-id912 . -27) (undo-tree-id913 . 4) (undo-tree-id914 . -28) (undo-tree-id915 . -27) (undo-tree-id916 . -1) (undo-tree-id917 . -24) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -27) 1986) nil (25901 21005 928791 579000) 0 nil])
([nil nil ((1984 . 1986)) nil (25901 21005 928785 268000) 0 nil])
([nil nil ((1986 . 1998)) nil (25901 21005 928783 815000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1997) (undo-tree-id910 . -1) (undo-tree-id911 . -1) 1998) nil (25901 21005 928782 603000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1998) (1998 . 1999) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1998) (1998 . 1999) (1997 . 1999)) nil (25901 21005 928780 789000) 0 nil])
([nil nil ((1998 . 2000)) nil (25901 21005 928778 765000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1999) (undo-tree-id909 . -1) 2000) nil (25901 21005 928777 904000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1801) (undo-tree-id888 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1802) (undo-tree-id889 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1803) (undo-tree-id890 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1804) (undo-tree-id891 . -1) (#(" " 0 1 (fontified t)) . -1805) (undo-tree-id892 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1806) (undo-tree-id893 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1807) (undo-tree-id894 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1808) (undo-tree-id895 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1809) (undo-tree-id896 . -1) (#("." 0 1 (fontified t)) . -1810) (undo-tree-id897 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1811) (undo-tree-id898 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1812) (undo-tree-id899 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1813) (undo-tree-id900 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1814) (undo-tree-id901 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1815) (undo-tree-id902 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1816) (undo-tree-id903 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1817) (undo-tree-id904 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1818) (undo-tree-id905 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1819) (undo-tree-id906 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1820) (undo-tree-id907 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1821) (undo-tree-id908 . -1) 1822) nil (25901 21005 928771 211000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1798) (undo-tree-id885 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1799) (undo-tree-id886 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1800) (undo-tree-id887 . -1) 1801) nil (25901 21005 928757 686000) 0 nil])
([nil nil ((1798 . 1801)) nil (25901 21005 928754 921000) 0 nil])
([nil nil ((1801 . 1822)) nil (25901 21005 928753 889000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1801) (undo-tree-id864 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1802) (undo-tree-id865 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1803) (undo-tree-id866 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1804) (undo-tree-id867 . -1) (#(" " 0 1 (fontified t)) . -1805) (undo-tree-id868 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1806) (undo-tree-id869 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1807) (undo-tree-id870 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1808) (undo-tree-id871 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1809) (undo-tree-id872 . -1) (#("." 0 1 (fontified t)) . -1810) (undo-tree-id873 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1811) (undo-tree-id874 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1812) (undo-tree-id875 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1813) (undo-tree-id876 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1814) (undo-tree-id877 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1815) (undo-tree-id878 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1816) (undo-tree-id879 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1817) (undo-tree-id880 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1818) (undo-tree-id881 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1819) (undo-tree-id882 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1820) (undo-tree-id883 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1821) (undo-tree-id884 . -1) 1822) nil (25901 21005 928747 437000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1798) (undo-tree-id861 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1799) (undo-tree-id862 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1800) (undo-tree-id863 . -1) 1801) nil (25901 21005 928546 19000) 0 nil])
([nil nil ((1798 . 1799)) nil (25901 21005 928543 354000) 0 nil])
([nil nil ((1976 . 1979)) nil (25901 21005 928542 362000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1978) (undo-tree-id860 . -1) 1979) nil (25901 21005 928541 781000) 0 nil])
([nil nil ((1978 . 1981)) nil (25901 21005 928540 418000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1977) (undo-tree-id856 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1978) (undo-tree-id857 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1979) (undo-tree-id858 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1980) (undo-tree-id859 . -1) 1981) nil (25901 21005 928539 236000) 0 nil])
([nil nil ((1977 . 1988)) nil (25901 21005 928533 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 1982 1996 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (1982 . 1996) (#("ResponseWriter" 0 14 (fontified nil)) . 1982) (1982 . 1996) (#("Respon" 0 6 (fontified nil)) . 1982) (1982 . 1988) (#("ResponseWriter" 0 14 (fontified nil)) . -1982) (1982 . 1996) (#("Respon" 0 6 (fontified t face tree-sitter-hl-face:type)) . -1982) (undo-tree-id854 . -6) (undo-tree-id855 . -6) 1988) nil (25901 21005 928532 373000) 0 nil])
([nil nil ((1996 . 1997)) nil (25901 21005 928529 327000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1798) (undo-tree-id853 . -1) 1799) nil (25901 21005 928528 135000) 0 nil])
([nil nil ((1798 . 1801)) nil (25901 21005 928526 231000) 0 nil])
([nil nil ((1801 . 1810)) nil (25901 21005 928525 39000) 0 nil])
([nil nil ((apply yas--snippet-revive 1803 1814 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (1803 . 1814) (#("HandlerFunc" 0 11 (fontified nil)) . 1803) (1803 . 1814) (#("Handler" 0 7 (fontified nil)) . 1803) (1803 . 1810) (#("HandlerFunc" 0 11 (fontified nil)) . -1803) (1803 . 1814) (#("Handler" 0 7 (fontified t face tree-sitter-hl-face:type)) . -1803) (undo-tree-id851 . -7) (undo-tree-id852 . -7) 1810) nil (25901 21005 928522 785000) 0 nil])
([nil nil ((1799 . 1805)) nil (25901 21005 928518 547000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1799) (undo-tree-id850 . -1) 1800) nil (25901 21005 928517 465000) 0 nil])
([nil nil ((1802 . 1803)) nil (25901 21005 928516 203000) 0 nil])
([nil nil ((1805 . 1807)) nil (25901 21005 928515 551000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1805) (undo-tree-id848 . -1) (#(" " 0 1 (fontified t)) . -1806) (undo-tree-id849 . -1) 1807) nil (25901 21005 928512 826000) 0 nil])
([nil nil ((1805 . 1807)) nil (25901 21005 928488 0) 0 nil])
([nil nil ((2020 . 2021) (t 25901 21006 37340 620000)) nil (25901 21010 88016 216000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2020) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) 2021 (t 25901 21010 104329 515000)) nil (25901 21013 274721 245000) 0 nil])
([nil nil ((2020 . 2028) (t 25901 21013 382320 512000)) nil (25901 21112 123060 293000) 0 nil])
([nil nil ((2028 . 2029)) nil (25901 21112 123059 852000) 0 nil])
([nil nil ((2029 . 2032)) nil (25901 21112 123059 602000) 0 nil])
([nil nil ((apply yas--snippet-revive 2029 2036 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (2029 . 2036) (#("Request" 0 7 (fontified nil)) . 2029) (2029 . 2036) (#("Req" 0 3 (fontified nil)) . 2029) (2029 . 2032) (#("Request" 0 7 (fontified nil)) . -2029) (2029 . 2036) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2029) (undo-tree-id956 . -3) (undo-tree-id957 . -3) 2032) nil (25901 21112 123058 350000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2039) (2039 . 2040) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2039) (2039 . 2040) (2037 . 2040)) nil (25901 21112 123054 362000) 0 nil])
([nil nil ((2040 . 2042) (2041 . 2042) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2040) (2040 . 2042) (2039 . 2041)) nil (25901 21112 123052 649000) 0 nil])
([nil nil ((2042 . 2048)) nil (25901 21112 123051 226000) 0 nil])
([nil nil ((1984 . 1986)) nil (25901 21112 123050 755000) 0 nil])
([nil nil ((1986 . 1996)) nil (25901 21112 123049 934000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2001) (2001 . 2002) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2001) (2001 . 2002) (1996 . 2002)) nil (25901 21112 123049 253000) 0 nil])
([nil nil ((2002 . 2004) (2003 . 2004) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2002) (2002 . 2004) (2001 . 2003)) nil (25901 21112 123048 792000) 0 nil])
([nil nil ((#("	return func(w http.ResponseWriter, r *http.Request) {
		utils.
	}
" 0 1 (fontified t) 1 7 (fontified t face tree-sitter-hl-face:keyword) 7 8 (fontified t) 8 12 (fontified t face tree-sitter-hl-face:keyword) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 14 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 14 15 (fontified t) 15 19 (fontified t) 19 20 (fontified t) 20 34 (fontified t face tree-sitter-hl-face:type) 34 36 (fontified t) 36 37 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 37 38 (fontified t) 38 39 (fontified t face tree-sitter-hl-face:operator) 39 43 (fontified t) 43 44 (fontified t) 44 51 (fontified t face tree-sitter-hl-face:type) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 55 (fontified t) 55 57 (fontified t) 57 62 (fontified t face tree-sitter-hl-face:variable) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-2-face)) 66 67 (fontified t)) . 2008) (undo-tree-id947 . -66) (undo-tree-id948 . 64) (undo-tree-id949 . -66) (undo-tree-id950 . -2) (undo-tree-id951 . -66) (undo-tree-id952 . -52) (undo-tree-id953 . -66) (undo-tree-id954 . -2) (undo-tree-id955 . -66) 2074) nil (25901 21112 123047 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2002 . 2003) (#("
" 0 1 (fontified nil)) . -2068) (2001 . 2069) 1985) nil (25901 21112 123043 31000) 0 nil])
([nil nil ((#("		
" 0 3 (fontified t)) . 2069) (undo-tree-id945 . -2) (undo-tree-id946 . -1) 2070) nil (25901 21112 123042 290000) 0 nil])
([nil nil ((2065 . 2070)) nil (25901 21112 123041 27000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil)) #s(yas--field 3 2114 2133 nil nil nil nil nil)) nil 21 nil #s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) nil nil)) (2065 . 2134) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2065) (2065 . 2150) (#("Respo" 0 5 (fontified nil)) . 2065) (2065 . 2070) (#("RespondWithJSON" 0 15 (fontified nil)) . -2065) (2065 . 2080) (#("Respo" 0 5 (fontified t face tree-sitter-hl-face:property)) . -2065) (undo-tree-id943 . -5) (undo-tree-id944 . -5) 2070) nil (25901 21112 123040 416000) 0 nil])
([nil nil ((apply yas--snippet-revive 2065 2134 #s(yas--snippet nil (#s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil)) #s(yas--field 3 2114 2133 nil nil nil nil nil)) nil 21 nil #s(yas--field 1 2081 2102 nil nil nil nil #s(yas--field 2 2104 2112 nil nil nil nil #s(yas--field 3 2114 2133 nil nil nil nil nil))) nil nil))) nil (25901 21112 123038 422000) 0 nil])
([nil nil ((#("		utils.RespondWithJSON(w http.ResponseWriter, code int, payload interface{})
" 0 2 (fontified t) 2 7 (fontified t) 7 8 (fontified t) 8 23 (fontified t face tree-sitter-hl-face:type) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 25 (fontified t face tree-sitter-hl-face:variable) 25 26 (fontified t) 26 30 (fontified t face tree-sitter-hl-face:variable) 30 31 (fontified t) 31 45 (fontified t face tree-sitter-hl-face:property) 45 47 (fontified t) 47 51 (fontified t face tree-sitter-hl-face:variable) 51 52 (fontified t) 52 55 (fontified t face tree-sitter-hl-face:variable) 55 57 (fontified t) 57 64 (fontified t face tree-sitter-hl-face:variable) 64 65 (fontified t) 65 73 (fontified t face tree-sitter-hl-face:keyword) 73 74 (fontified t face tree-sitter-hl-face:keyword) 74 75 (fontified t face (rainbow-delimiters-depth-5-face)) 75 76 (fontified t face (rainbow-delimiters-depth-5-face)) 76 77 (fontified t face (rainbow-delimiters-depth-4-face)) 77 78 (fontified t)) . 2057) (undo-tree-id939 . 54) (undo-tree-id940 . -77) (undo-tree-id941 . -26) (undo-tree-id942 . -26) 2083) nil (25901 21112 123038 22000) 0 nil])
([nil nil ((2058 . 2061) (2002 . 2004) (#("	" 0 1 (fontified nil rear-nonsticky t)) . -2002) (2056 . 2057)) nil (25901 21112 123035 397000) 0 nil])
([nil nil ((2063 . 2065)) nil (25901 21112 123034 966000) 0 nil])
([nil nil ((2060 . 2062)) nil (25901 21112 123034 665000) 0 nil])
([nil nil ((2062 . 2068)) nil (25901 21112 123034 345000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2085 2086 nil nil nil t #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil))) #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil)) #s(yas--field 3 2093 2095 nil nil nil t nil)) nil 22 nil #s(yas--field 3 2093 2095 nil nil nil t nil) nil nil)) (2068 . 2129) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 2068) (2068 . 2144) (#("RespondWithError" 0 16 (fontified nil)) . -2068) (2068 . 2084)) nil (25901 21112 123033 774000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2086) (2085 . 2086)) nil (25901 21112 123033 183000) 0 nil])
([nil nil ((2089 . 2091) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2089) (2088 . 2089)) nil (25901 21112 123032 622000) 0 nil])
([nil nil ((2093 . 2095) (#("\"" 0 1 (fontified nil)) . -2093) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 2094) (2093 . 2094)) nil (25901 21112 123031 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 2068 2096 #s(yas--snippet nil (#s(yas--field 1 2085 2086 nil nil nil t #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil))) #s(yas--field 2 2088 2091 nil nil nil t #s(yas--field 3 2093 2095 nil nil nil t nil)) #s(yas--field 3 2093 2095 nil nil nil t nil)) nil 22 nil #s(yas--field 3 2093 2095 nil nil nil t nil) nil nil))) nil (25901 21112 123031 499000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2089) (undo-tree-id937 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2090) (undo-tree-id938 . -1) 2091) nil (25901 21112 123030 417000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2088) (undo-tree-id936 . -1) 2089) nil (25901 21112 123027 211000) 0 nil])
([nil nil ((2088 . 2091)) nil (25901 21112 123015 99000) 0 nil])
([nil nil ((2094 . 2106)) nil (25901 21112 123010 540000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2124) (2124 . 2125) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2124) (2124 . 2125) (2117 . 2125) (t 25901 21112 232574 492000)) nil (25901 21123 245707 713000) 0 nil])
([nil nil ((2125 . 2127) (2126 . 2127) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 2125) (2125 . 2127) (2124 . 2126)) nil (25901 21123 245706 981000) 0 nil])
([nil nil ((2127 . 2141)) nil (25901 21123 245706 89000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2138) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2139) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2140) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) 2141) nil (25901 21123 245704 66000) 0 nil])
([nil nil ((2138 . 2141)) nil (25901 21123 245672 26000) 0 nil])
([nil nil ((#("func authedHandler
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 18 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable)) 18 19 (fontified t)) . 2666) (undo-tree-id989 . -18) (undo-tree-id990 . -18) (undo-tree-id991 . -5) (undo-tree-id992 . -18) (undo-tree-id993 . -19) (undo-tree-id994 . -17) (undo-tree-id995 . -5) (undo-tree-id996 . -18) (undo-tree-id997 . -17) (undo-tree-id998 . -17) (undo-tree-id999 . -19) 2683 (t 25901 21123 261444 433000)) nil (25901 21355 457809 215000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2666) (undo-tree-id988 . -1)) nil (25901 21355 457798 175000) 0 nil])
([nil nil ((1763 . 1765) (t 25901 21355 474671 95000)) nil (25901 21540 799114 203000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1839 . 1840) (nil fontified nil 1765 . 1840) (1765 . 1840)) nil (25901 21540 799113 692000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1840) (undo-tree-id1049 . 1)) nil (25901 21540 799112 851000) 0 nil])
([nil nil ((#("n handler" 0 1 (fontified t face tree-sitter-hl-face:keyword) 1 2 (fontified t) 2 9 (fontified t face tree-sitter-hl-face:variable)) . 2208) (undo-tree-id1048 . -8)) nil (25901 21540 799112 210000) 0 nil])
([nil nil ((#("	bearerToken := r.Header.Get(\"Authorization\")
	apikey := strings.Split(bearerToken, \" \")[1]
	user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
	if err != nil {
		return func(w http.ResponseWriter, r *http.Request) {
		  utils.RespondWithError(w, 401, \"Unauthorized\")	
	  }
	} else {
		retur
	}
" 0 1 (rear-nonsticky t fontified t) 1 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 15 (fontified t face tree-sitter-hl-face:operator) 15 16 (fontified t) 16 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t) 18 24 (fontified t face tree-sitter-hl-face:property) 24 25 (fontified t) 25 28 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 44 (fontified t face tree-sitter-hl-face:string) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t) 46 47 (fontified t) 47 53 (fontified t face tree-sitter-hl-face:variable) 53 54 (fontified t) 54 56 (fontified t face tree-sitter-hl-face:operator) 56 57 (fontified t) 57 64 (fontified t face tree-sitter-hl-face:variable) 64 65 (fontified t) 65 70 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 70 71 (fontified t face (rainbow-delimiters-depth-2-face)) 71 82 (fontified t face tree-sitter-hl-face:variable) 82 84 (fontified t) 84 87 (fontified t face tree-sitter-hl-face:string) 87 88 (fontified t face (rainbow-delimiters-depth-2-face)) 88 89 (fontified t face (rainbow-delimiters-depth-2-face)) 89 90 (fontified t face tree-sitter-hl-face:number) 90 91 (fontified t face (rainbow-delimiters-depth-2-face)) 91 92 (fontified t) 92 93 (rear-nonsticky t fontified t) 93 97 (fontified t face tree-sitter-hl-face:variable) 97 99 (fontified t) 99 102 (fontified t face tree-sitter-hl-face:variable) 102 103 (fontified t) 103 104 (fontified t face tree-sitter-hl-face:operator) 104 105 (fontified t face tree-sitter-hl-face:operator) 105 106 (fontified t) 106 107 (fontified t face tree-sitter-hl-face:variable) 107 108 (fontified t) 108 110 (fontified t face tree-sitter-hl-face:property) 110 111 (fontified t) 111 126 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 126 127 (fontified t face (rainbow-delimiters-depth-2-face)) 127 128 (fontified t face tree-sitter-hl-face:variable) 128 129 (fontified t) 129 132 (fontified t face tree-sitter-hl-face:property) 132 134 (fontified t) 134 140 (fontified t face tree-sitter-hl-face:variable) 140 141 (fontified t face (rainbow-delimiters-depth-2-face)) 141 142 (fontified t) 142 143 (fontified t) 143 145 (fontified t face tree-sitter-hl-face:keyword) 145 146 (fontified t) 146 149 (fontified t face tree-sitter-hl-face:variable) 149 150 (fontified t) 150 152 (fontified t face tree-sitter-hl-face:operator) 152 153 (fontified t) 153 156 (fontified t face tree-sitter-hl-face:constant\.builtin) 156 157 (fontified t) 157 158 (fontified t face (rainbow-delimiters-depth-2-face)) 158 159 (fontified t) 159 161 (fontified t) 161 167 (fontified t face tree-sitter-hl-face:keyword) 167 168 (fontified t) 168 172 (fontified t face tree-sitter-hl-face:keyword) 172 173 (fontified t face (rainbow-delimiters-depth-3-face)) 173 174 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 174 175 (fontified t) 175 179 (fontified t) 179 180 (fontified t) 180 194 (fontified t face tree-sitter-hl-face:type) 194 196 (fontified t) 196 197 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable)) 197 198 (fontified t) 198 199 (fontified t face tree-sitter-hl-face:operator) 199 203 (fontified t) 203 204 (fontified t) 204 211 (fontified t face tree-sitter-hl-face:type) 211 212 (fontified t face (rainbow-delimiters-depth-3-face)) 212 213 (fontified t) 213 214 (fontified t face (rainbow-delimiters-depth-3-face)) 214 215 (fontified t) 215 219 (fontified t) 219 224 (fontified t face tree-sitter-hl-face:variable) 224 225 (fontified t) 225 241 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 241 242 (fontified t face (rainbow-delimiters-depth-4-face)) 242 243 (fontified t face tree-sitter-hl-face:variable) 243 245 (fontified t) 245 248 (fontified t face tree-sitter-hl-face:number) 248 250 (fontified t) 250 264 (fontified t face tree-sitter-hl-face:string) 264 265 (fontified t face (rainbow-delimiters-depth-4-face)) 265 266 (fontified t) 266 267 (fontified t) 267 270 (fontified t) 270 271 (fontified t face (rainbow-delimiters-depth-3-face)) 271 272 (fontified t) 272 273 (fontified t) 273 274 (fontified t face (rainbow-delimiters-depth-2-face)) 274 275 (fontified t) 275 279 (fontified t face tree-sitter-hl-face:keyword) 279 280 (fontified t) 280 281 (fontified t face (rainbow-delimiters-depth-2-face)) 281 282 (fontified t) 282 284 (fontified t) 284 289 (fontified t face tree-sitter-hl-face:variable) 289 290 (fontified t) 290 291 (fontified t) 291 292 (fontified t face (rainbow-delimiters-depth-2-face)) 292 293 (fontified t)) . 1919) (undo-tree-id1038 . -291) (undo-tree-id1039 . 4) (undo-tree-id1040 . -292) (undo-tree-id1041 . -291) (undo-tree-id1042 . -1) (undo-tree-id1043 . -242) (undo-tree-id1044 . 4) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -291) 1920) nil (25901 21540 799111 188000) 0 nil])
([nil nil ((1918 . 1920)) nil (25901 21540 799107 250000) 0 nil])
([nil nil ((1920 . 1927)) nil (25901 21540 799106 860000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1882) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1883) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1884) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1885) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("." 0 1 (fontified t)) . -1886) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (#("H" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1887) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1888) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1889) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1890) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1891) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1892) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1893) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1894) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1895) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1896) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1897) (undo-tree-id1037 . -1) 1898) nil (25901 21540 799104 195000) 0 nil])
([nil nil ((1882 . 1886)) nil (25901 21540 798989 670000) 0 nil])
([nil nil ((1886 . 1887)) nil (25901 21540 798989 269000) 0 nil])
([nil nil ((apply yas--snippet-revive 1882 1895 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (1882 . 1895) (#("authedHandler" 0 13 (fontified nil)) . 1882) (1882 . 1895) (#("authe" 0 5 (fontified nil)) . 1882) (1882 . 1887) (#("authedHandler" 0 13 (fontified nil)) . -1882) (1882 . 1895) (#("authe" 0 5 (fontified t face tree-sitter-hl-face:type)) . -1882) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) (undo-tree-id1006 . -5) 1887) nil (25901 21540 798985 242000) 0 nil])
([nil nil ((1924 . 1932) (t 25901 21540 914749 483000)) nil (25901 21781 120745 425000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1929) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1930) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1931) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) 1932) nil (25901 21781 120744 513000) 0 nil])
([nil nil ((1930 . 1931) (1929 . 1931)) nil (25901 21781 120740 75000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1930) (undo-tree-id1081 . -1) 1931) nil (25901 21781 120739 363000) 0 nil])
([nil nil ((1930 . 1932)) nil (25901 21781 120737 580000) 0 nil])
([nil nil ((1932 . 1941)) nil (25901 21781 120736 809000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1940) (undo-tree-id1080 . -1) 1941) nil (25901 21781 120736 458000) 0 nil])
([nil nil ((1940 . 1941)) nil (25901 21781 120735 45000) 0 nil])
([nil nil ((apply yas--snippet-revive 1937 1951 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (1937 . 1951) (#("ResponseWriter" 0 14 (fontified nil)) . 1937) (1937 . 1951) (#("Resp" 0 4 (fontified nil)) . 1937) (1937 . 1941) (#("ResponseWriter" 0 14 (fontified nil)) . -1937) (1937 . 1951) (#("Resp" 0 4 (fontified t face tree-sitter-hl-face:type)) . -1937) (undo-tree-id1078 . -4) (undo-tree-id1079 . -4) 1941) nil (25901 21781 120734 224000) 0 nil])
([nil nil ((1951 . 1958)) nil (25901 21781 120730 877000) 0 nil])
([nil nil ((1958 . 1964)) nil (25901 21781 120729 765000) 0 nil])
([nil nil ((apply yas--snippet-revive 1961 1968 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (1961 . 1968) (#("Request" 0 7 (fontified nil)) . 1961) (1961 . 1968) (#("Req" 0 3 (fontified nil)) . 1961) (1961 . 1964) (#("Request" 0 7 (fontified nil)) . -1961) (1961 . 1968) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -1961) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) 1964) nil (25901 21781 120728 623000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1971) (1971 . 1972) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1971) (1971 . 1972) (1969 . 1972)) nil (25901 21781 120726 659000) 0 nil])
([nil nil ((1972 . 1974) (1973 . 1974) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 1972) (1972 . 1974) (1971 . 1973)) nil (25901 21781 120725 107000) 0 nil])
([nil nil ((1974 . 1981)) nil (25901 21781 120724 125000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1978) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1979) (undo-tree-id1074 . -1) (#(" " 0 1 (fontified t)) . -1980) (undo-tree-id1075 . -1) 1981) nil (25901 21781 120723 634000) 0 nil])
([nil nil ((1978 . 1983)) nil (25901 21781 120720 247000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1989) (1989 . 1990) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1989) (1989 . 1990) (1983 . 1990)) nil (25901 21781 120719 316000) 0 nil])
([nil nil ((1989 . 1999)) nil (25901 21781 120717 542000) 0 nil])
([nil nil ((1915 . 1917)) nil (25901 21781 120716 621000) 0 nil])
([nil nil ((1917 . 1918)) nil (25901 21781 120715 889000) 0 nil])
([nil nil ((1918 . 1925)) nil (25901 21781 120714 948000) 0 nil])
([nil nil ((1925 . 1934)) nil (25901 21781 120714 146000) 0 nil])
([nil nil ((apply yas--snippet-revive 1934 1938 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (1934 . 1938) (#("User" 0 4 (fontified nil)) . 1934) (1934 . 1938) (#("User" 0 4 (fontified nil)) . -1934) (1934 . 1938)) nil (25901 21781 120712 944000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1939) (1939 . 1940) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -1939) (1939 . 1940) (1938 . 1940)) nil (25901 21781 120711 331000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1953) (undo-tree-id1071 . -1) 1954) nil (25901 21781 120710 8000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -1998) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -1999) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2000) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (#("u" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2001) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2002) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (#("n" 0 1 (fontified t face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable))) . -2003) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#(" " 0 1 (fontified t)) . -2004) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) 2005) nil (25901 21781 120705 420000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2133) (1915 . 2134) 1914 (t 25901 21781 229671 788000)) nil (25901 22162 501407 62000) 0 nil])
([nil nil ((2160 . 2162) (2134 . 2136) (#("	" 0 1 (fontified nil)) . -2134) (2158 . 2159)) nil (25901 22162 501405 649000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2160) (undo-tree-id1101 . -2) 2162) nil (25901 22162 501404 697000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2343) (2160 . 2344)) nil (25901 22162 501402 483000) 0 nil])
([nil nil ((2140 . 2143)) nil (25901 22162 501401 511000) 0 nil])
([nil nil ((#("		userRes := database.User{}

		userRes := UserResponse{}
		userRes.ID = user.ID
		userRes.Name = user.Name
		userRes.CreatedAt = user.CreatedAt
		userRes.UpdatedAt = user.UpdatedAt
		userRes.Apikey = user.Apikey
" 0 2 (fontified t) 2 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 12 (fontified t face tree-sitter-hl-face:operator) 12 13 (fontified t) 13 21 (fontified t) 21 22 (fontified t) 22 26 (fontified t face tree-sitter-hl-face:type) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (rear-nonsticky t fontified t) 32 33 (fontified t face tree-sitter-hl-face:variable) 33 39 (fontified t face tree-sitter-hl-face:variable) 39 40 (fontified t) 40 42 (fontified t face tree-sitter-hl-face:operator) 42 43 (fontified t) 43 55 (fontified t face tree-sitter-hl-face:type) 55 56 (fontified t face (rainbow-delimiters-depth-3-face)) 56 57 (fontified t face (rainbow-delimiters-depth-3-face)) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 67 (fontified t face tree-sitter-hl-face:variable) 67 68 (fontified t) 68 70 (fontified t face tree-sitter-hl-face:property) 70 71 (fontified t) 71 72 (fontified t face tree-sitter-hl-face:operator) 72 73 (fontified t) 73 77 (fontified t face tree-sitter-hl-face:variable) 77 78 (fontified t) 78 80 (fontified t face tree-sitter-hl-face:property) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 90 (fontified t face tree-sitter-hl-face:variable) 90 91 (fontified t) 91 95 (fontified t face tree-sitter-hl-face:property) 95 96 (fontified t) 96 97 (fontified t face tree-sitter-hl-face:operator) 97 98 (fontified t) 98 102 (fontified t face tree-sitter-hl-face:variable) 102 103 (fontified t) 103 107 (fontified t face tree-sitter-hl-face:property) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 117 (fontified t face tree-sitter-hl-face:variable) 117 118 (fontified t) 118 127 (fontified t face tree-sitter-hl-face:property) 127 128 (fontified t) 128 129 (fontified t face tree-sitter-hl-face:operator) 129 130 (fontified t) 130 134 (fontified t face tree-sitter-hl-face:variable) 134 135 (fontified t) 135 144 (fontified t face tree-sitter-hl-face:property) 144 145 (fontified t) 145 146 (fontified t) 146 147 (fontified t) 147 154 (fontified t face tree-sitter-hl-face:variable) 154 155 (fontified t) 155 164 (fontified t face tree-sitter-hl-face:property) 164 165 (fontified t) 165 166 (fontified t face tree-sitter-hl-face:operator) 166 167 (fontified t) 167 171 (fontified t face tree-sitter-hl-face:variable) 171 172 (fontified t) 172 181 (fontified t face tree-sitter-hl-face:property) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 191 (fontified t face tree-sitter-hl-face:variable) 191 192 (fontified t) 192 198 (fontified t face tree-sitter-hl-face:property) 198 199 (fontified t) 199 200 (fontified t face tree-sitter-hl-face:operator) 200 201 (fontified t) 201 205 (fontified t face tree-sitter-hl-face:variable) 205 206 (fontified t) 206 212 (fontified t face tree-sitter-hl-face:property) 212 213 (fontified t)) . 2134) (undo-tree-id1088 . -190) (undo-tree-id1089 . 22) (undo-tree-id1090 . -212) (undo-tree-id1091 . -8) (undo-tree-id1092 . -190) (undo-tree-id1093 . -190) (undo-tree-id1094 . 204) (undo-tree-id1095 . -213) (undo-tree-id1096 . -8) (undo-tree-id1097 . -190) (undo-tree-id1098 . -182) (undo-tree-id1099 . -190) (undo-tree-id1100 . -213) 2324) nil (25901 22162 501396 812000) 0 nil])
([nil nil ((#("	bearerToken := r.Header.Get(\"Authorization\")
	apikey := strings.Split(bearerToken, \" \")[1]
	user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
	if err != nil {
		utils.RespondWithError(w, 401, \"Unauthorized\")
	} else {
" 0 1 (rear-nonsticky t fontified t) 1 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 15 (fontified t face tree-sitter-hl-face:operator) 15 16 (fontified t) 16 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t) 18 24 (fontified t face tree-sitter-hl-face:property) 24 25 (fontified t) 25 28 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 44 (fontified t face tree-sitter-hl-face:string) 44 45 (fontified t face (rainbow-delimiters-depth-3-face)) 45 46 (fontified t) 46 47 (fontified t) 47 53 (fontified t face tree-sitter-hl-face:variable) 53 54 (fontified t) 54 56 (fontified t face tree-sitter-hl-face:operator) 56 57 (fontified t) 57 64 (fontified t face tree-sitter-hl-face:variable) 64 65 (fontified t) 65 70 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 70 71 (fontified t face (rainbow-delimiters-depth-3-face)) 71 82 (fontified t face tree-sitter-hl-face:variable) 82 84 (fontified t) 84 87 (fontified t face tree-sitter-hl-face:string) 87 88 (fontified t face (rainbow-delimiters-depth-3-face)) 88 89 (fontified t face (rainbow-delimiters-depth-3-face)) 89 90 (fontified t face tree-sitter-hl-face:number) 90 91 (fontified t face (rainbow-delimiters-depth-3-face)) 91 92 (fontified t) 92 93 (fontified t) 93 97 (fontified t face tree-sitter-hl-face:variable) 97 99 (fontified t) 99 102 (fontified t face tree-sitter-hl-face:variable) 102 103 (fontified t) 103 104 (fontified t face tree-sitter-hl-face:operator) 104 105 (fontified t face tree-sitter-hl-face:operator) 105 106 (fontified t) 106 107 (fontified t face tree-sitter-hl-face:variable) 107 108 (fontified t) 108 110 (fontified t face tree-sitter-hl-face:property) 110 111 (fontified t) 111 126 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 126 127 (fontified t face (rainbow-delimiters-depth-3-face)) 127 128 (fontified t face tree-sitter-hl-face:variable) 128 129 (fontified t) 129 132 (fontified t face tree-sitter-hl-face:property) 132 134 (fontified t) 134 140 (fontified t face tree-sitter-hl-face:variable) 140 141 (fontified t face (rainbow-delimiters-depth-3-face)) 141 142 (fontified t) 142 143 (fontified t) 143 145 (fontified t face tree-sitter-hl-face:keyword) 145 146 (fontified t) 146 149 (fontified t face tree-sitter-hl-face:variable) 149 150 (fontified t) 150 152 (fontified t face tree-sitter-hl-face:operator) 152 153 (fontified t) 153 156 (fontified t face tree-sitter-hl-face:constant\.builtin) 156 157 (fontified t) 157 158 (fontified t face (rainbow-delimiters-depth-3-face)) 158 159 (fontified t) 159 161 (fontified t) 161 166 (fontified t face tree-sitter-hl-face:variable) 166 167 (fontified t) 167 183 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 183 184 (fontified t face (rainbow-delimiters-depth-4-face)) 184 185 (fontified t face tree-sitter-hl-face:variable) 185 187 (fontified t) 187 190 (fontified t face tree-sitter-hl-face:number) 190 192 (fontified t) 192 206 (fontified t face tree-sitter-hl-face:string) 206 207 (fontified t face (rainbow-delimiters-depth-4-face)) 207 208 (fontified t) 208 209 (fontified t) 209 210 (fontified t face (rainbow-delimiters-depth-3-face)) 210 211 (fontified t) 211 215 (fontified t face tree-sitter-hl-face:keyword) 215 216 (fontified t) 216 217 (fontified t face (rainbow-delimiters-depth-3-face)) 217 218 (fontified t)) . 2287) (undo-tree-id1102 . -216) (undo-tree-id1103 . -217) (undo-tree-id1104 . -216) (undo-tree-id1105 . -8) (undo-tree-id1106 . -91) (undo-tree-id1107 . -111) (undo-tree-id1108 . -111) (undo-tree-id1109 . -93) (undo-tree-id1110 . -77) (undo-tree-id1111 . -111) (undo-tree-id1112 . -141) (undo-tree-id1113 . -8) (undo-tree-id1114 . -8) (undo-tree-id1115 . -216) 2295 (t 25901 22162 610029 692000)) nil (25901 22194 859150 725000) 0 nil])
([nil nil ((2283 . 2289)) nil (25901 22194 859133 312000) 0 nil])
([nil nil ((2289 . 2294)) nil (25901 22194 859132 971000) 0 nil])
([nil nil ((2294 . 2298)) nil (25901 22194 859132 480000) 0 nil])
([nil nil ((2284 . 2289)) nil (25901 22194 859127 391000) 0 nil])
([nil nil ((#("	}
" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 2531) (undo-tree-id1326 . -2) (t 25901 22194 875929 407000)) nil (25901 22247 401555 869000) 0 nil])
([nil nil ((2217 . 2218) (2214 . 2215) (2215 . 2216)) nil (25901 22247 401554 236000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2217) (undo-tree-id1325 . -1) (2218 . 2219) (#("}" 0 1 (fontified nil)) . -2218) (2218 . 2219)) nil (25901 22247 401553 585000) 0 nil])
([nil nil ((2135 . 2136) (2191 . 2192) (2212 . 2213) (#("	" 0 1 (rear-nonsticky t fontified t)) . 2311) (#("	" 0 1 (fontified t)) . 2338) (#("	" 0 1 (fontified t)) . 2361) (#("	" 0 1 (fontified t)) . 2388) (#("	" 0 1 (fontified t)) . 2425) (#("	" 0 1 (fontified t)) . 2462) (#("	" 0 1 (fontified t)) . 2493) 2218) nil (25901 22247 401550 99000) 0 nil])
([nil nil ((1915 . 1917)) nil (25901 22247 401549 187000) 0 nil])
([nil nil ((1917 . 1925)) nil (25901 22247 401548 866000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1915) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . 1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("	" 0 1 (fontified t)) . -1916) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1917) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1918) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1919) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1920) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1921) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1922) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1923) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("." 0 1 (fontified t)) . -1924) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 1925) nil (25901 22247 401542 134000) 0 nil])
([nil nil ((#("	bearerToken := r.Header.Get(\"Authorization\")
	apikey := strings.Split(bearerToken, \" \")[1]
	user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
	if err != nil {
		utils.RespondWithError(w, 401, \"Unauthorized\")
	} else {
" 0 1 (rear-nonsticky t fontified t) 1 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 15 (fontified t face tree-sitter-hl-face:operator) 15 16 (fontified t) 16 17 (fontified t face tree-sitter-hl-face:variable) 17 18 (fontified t) 18 24 (fontified t face tree-sitter-hl-face:property) 24 25 (fontified t) 25 28 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 44 (fontified t face tree-sitter-hl-face:string) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t) 46 47 (fontified t) 47 53 (fontified t face tree-sitter-hl-face:variable) 53 54 (fontified t) 54 56 (fontified t face tree-sitter-hl-face:operator) 56 57 (fontified t) 57 64 (fontified t face tree-sitter-hl-face:variable) 64 65 (fontified t) 65 70 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 70 71 (fontified t face (rainbow-delimiters-depth-2-face)) 71 82 (fontified t face tree-sitter-hl-face:variable) 82 84 (fontified t) 84 87 (fontified t face tree-sitter-hl-face:string) 87 88 (fontified t face (rainbow-delimiters-depth-2-face)) 88 89 (fontified t face (rainbow-delimiters-depth-2-face)) 89 90 (fontified t face tree-sitter-hl-face:number) 90 91 (fontified t face (rainbow-delimiters-depth-2-face)) 91 92 (fontified t) 92 93 (fontified t) 93 97 (fontified t face tree-sitter-hl-face:variable) 97 99 (fontified t) 99 102 (fontified t face tree-sitter-hl-face:variable) 102 103 (fontified t) 103 104 (fontified t face tree-sitter-hl-face:operator) 104 105 (fontified t face tree-sitter-hl-face:operator) 105 106 (fontified t) 106 107 (fontified t face tree-sitter-hl-face:variable) 107 108 (fontified t) 108 110 (fontified t face tree-sitter-hl-face:property) 110 111 (fontified t) 111 126 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 126 127 (fontified t face (rainbow-delimiters-depth-2-face)) 127 128 (fontified t face tree-sitter-hl-face:variable) 128 129 (fontified t) 129 132 (fontified t face tree-sitter-hl-face:property) 132 134 (fontified t) 134 140 (fontified t face tree-sitter-hl-face:variable) 140 141 (fontified t face (rainbow-delimiters-depth-2-face)) 141 142 (fontified t) 142 143 (fontified t) 143 145 (fontified t face tree-sitter-hl-face:keyword) 145 146 (fontified t) 146 149 (fontified t face tree-sitter-hl-face:variable) 149 150 (fontified t) 150 152 (fontified t face tree-sitter-hl-face:operator) 152 153 (fontified t) 153 156 (fontified t face tree-sitter-hl-face:constant\.builtin) 156 157 (fontified t) 157 158 (fontified t face (rainbow-delimiters-depth-2-face)) 158 159 (fontified t) 159 161 (fontified t) 161 166 (fontified t face tree-sitter-hl-face:variable) 166 167 (fontified t) 167 183 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 183 184 (fontified t face (rainbow-delimiters-depth-3-face)) 184 185 (fontified t face tree-sitter-hl-face:variable) 185 187 (fontified t) 187 190 (fontified t face tree-sitter-hl-face:number) 190 192 (fontified t) 192 206 (fontified t face tree-sitter-hl-face:string) 206 207 (fontified t face (rainbow-delimiters-depth-3-face)) 207 208 (fontified t) 208 209 (fontified t) 209 210 (fontified t face (rainbow-delimiters-depth-2-face)) 210 211 (fontified t) 211 215 (fontified t face tree-sitter-hl-face:keyword) 215 216 (fontified t) 216 217 (fontified t face (rainbow-delimiters-depth-2-face)) 217 218 (fontified t)) . 1916) (undo-tree-id1573 . -216) (undo-tree-id1574 . -217) (undo-tree-id1575 . -8) (undo-tree-id1576 . -216) (undo-tree-id1577 . -216) (undo-tree-id1578 . -8) (undo-tree-id1579 . -216) (undo-tree-id1580 . 2) (undo-tree-id1581 . -217) 2132 (t 25901 22247 418759 511000)) nil (25901 22295 799764 247000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2189) (1971 . 2190) 1923) nil (25901 22295 799758 646000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1917) (1973 . 1974) (2019 . 2020) (2064 . 2065) (2114 . 2115) (2131 . 2132) (2180 . 2181) 2215) nil (25901 22295 799757 144000) 0 nil])
([nil nil ((2183 . 2187)) nil (25901 22295 799755 691000) 0 nil])
([nil nil ((2187 . 2193)) nil (25901 22295 799754 739000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2183) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (#("	" 0 1 (fontified t)) . -2184) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("	" 0 1 (fontified t)) . -2185) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (#("	" 0 1 (fontified t)) . -2186) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2187) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2188) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2189) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2190) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2191) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -2192) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) 2193) nil (25901 22295 799748 167000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3268) (undo-tree-id1636 . -1) 3269 (t 25901 22295 909597 591000)) nil (25901 28096 89141 880000) 0 nil])
([nil nil ((3268 . 3269)) nil (25901 28096 89140 638000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3282 3282 nil nil nil t nil)) nil 27 nil #s(yas--field 1 3282 3282 nil nil nil t nil) nil nil)) (3269 . 3304) (#("authenticate(${1:handler authedHandler})" 0 40 (fontified nil)) . 3269) (3269 . 3309) (#("authenticate" 0 12 (fontified nil)) . -3269) (3269 . 3281)) nil (25901 28096 89140 137000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 21 (fontified t face tree-sitter-hl-face:variable)) . 3282)) nil (25901 28096 89139 455000) 0 nil])
([nil nil ((apply yas--snippet-revive 3269 3283 #s(yas--snippet nil (#s(yas--field 1 3282 3282 nil nil nil t nil)) nil 27 nil #s(yas--field 1 3282 3282 nil nil nil t nil) nil nil))) nil (25901 28096 89139 185000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -3282) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . 1) (undo-tree-id1635 . -1) 3283) nil (25901 28096 89138 363000) 0 nil])
([nil nil ((3289 . 3290) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -3289) (3289 . 3290)) nil (25901 28096 89136 550000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2232) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2233) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . 1) (undo-tree-id1590 . -1) (#("a" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -2234) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#(" " 0 1 (fontified t)) . -2235) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("*" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2236) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2237) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2238) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2239) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2240) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2241) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2242) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2243) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2244) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2245) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -2246) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . 1) (undo-tree-id1630 . -1) (#(" " 0 1 (fontified t)) . -2247) (undo-tree-id1631 . -1) 2248) nil (25901 28096 89133 935000) 0 nil])
([nil nil ((2232 . 2233)) nil (25901 28096 89062 491000) 0 nil])
([nil nil ((2521 . 2523) (t 25901 28096 200566 880000)) nil (25901 28336 132029 291000) 0 nil])
([nil nil ((2523 . 2542)) nil (25901 28336 132028 990000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2543) (2543 . 2544) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2543) (2543 . 2544) (2542 . 2544)) nil (25901 28336 132028 529000) 0 nil])
([nil nil ((2543 . 2558)) nil (25901 28336 132028 139000) 0 nil])
([nil nil ((apply yas--snippet-revive 2550 2564 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (2550 . 2564) (#("ResponseWriter" 0 14 (fontified nil)) . 2550) (2550 . 2564) (#("Response" 0 8 (fontified nil)) . 2550) (2550 . 2558) (#("ResponseWriter" 0 14 (fontified nil)) . -2550) (2550 . 2564) (#("Response" 0 8 (fontified t face tree-sitter-hl-face:type)) . -2550) (undo-tree-id1721 . -8) (undo-tree-id1722 . -8) 2558) nil (25901 28336 132027 648000) 0 nil])
([nil nil ((2564 . 2577)) nil (25901 28336 132026 485000) 0 nil])
([nil nil ((apply yas--snippet-revive 2574 2581 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (2574 . 2581) (#("Request" 0 7 (fontified nil)) . 2574) (2574 . 2581) (#("Req" 0 3 (fontified nil)) . 2574) (2574 . 2577) (#("Request" 0 7 (fontified nil)) . -2574) (2574 . 2581) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2574) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) 2577) nil (25901 28336 132024 912000) 0 nil])
([nil nil ((2581 . 2587)) nil (25901 28336 132023 179000) 0 nil])
([nil nil ((2587 . 2592)) nil (25901 28336 132022 829000) 0 nil])
([nil nil ((apply yas--snippet-revive 2588 2596 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (2588 . 2596) (#("database" 0 8 (fontified nil)) . 2588) (2588 . 2596) (#("data" 0 4 (fontified nil)) . 2588) (2588 . 2592) (#("database" 0 8 (fontified nil)) . -2588) (2588 . 2596) (#("data" 0 4 (fontified t face tree-sitter-hl-face:type)) . -2588) (undo-tree-id1717 . -4) (undo-tree-id1718 . -4) 2592) nil (25901 28336 132021 967000) 0 nil])
([nil nil ((2596 . 2597)) nil (25901 28336 132020 234000) 0 nil])
([nil nil ((apply yas--snippet-revive 2597 2601 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (2597 . 2601) (#("User" 0 4 (fontified nil)) . 2597) (2597 . 2601) (#("User" 0 4 (fontified nil)) . -2597) (2597 . 2601)) nil (25901 28336 132019 412000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2604) (2604 . 2605) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2604) (2604 . 2605) (2602 . 2605)) nil (25901 28336 132018 110000) 0 nil])
([nil nil ((2605 . 2606) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 2605) (2605 . 2606) (2604 . 2606)) nil (25901 28336 132017 629000) 0 nil])
([nil nil ((2606 . 2612)) nil (25901 28336 132016 647000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2606) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2607) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2608) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2609) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2610) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (#("." 0 1 (fontified t)) . -2611) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) 2612) nil (25901 28336 132015 715000) 0 nil])
([nil nil ((2606 . 2612)) nil (25901 28336 132011 758000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2628 2629 nil nil nil t #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil))) #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil)) #s(yas--field 3 2636 2636 nil nil nil t nil)) nil 32 nil #s(yas--field 3 2636 2636 nil nil nil t nil) nil nil)) (2612 . 2681) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 2612) (2612 . 2697) (#("RespondWithJSON" 0 15 (fontified nil)) . -2612) (2612 . 2627)) nil (25901 28336 132011 317000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 2629) (2628 . 2629)) nil (25901 28336 132010 706000) 0 nil])
([nil nil ((2632 . 2634) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2632) (2631 . 2632)) nil (25901 28336 132010 355000) 0 nil])
([nil nil ((#("payload interface{}" 0 7 (fontified t face tree-sitter-hl-face:variable) 7 8 (fontified t) 8 16 (fontified t face tree-sitter-hl-face:keyword) 16 17 (fontified t face tree-sitter-hl-face:keyword) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 19 (fontified t face (rainbow-delimiters-depth-3-face))) . 2636)) nil (25901 28336 132009 794000) 0 nil])
([nil nil ((2636 . 2638) (#("\"" 0 1 (fontified nil)) . -2636) (2636 . 2637)) nil (25901 28336 132009 484000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -2636) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 2637)) nil (25901 28336 132008 852000) 0 nil])
([nil nil ((apply yas--snippet-revive 2612 2637 #s(yas--snippet nil (#s(yas--field 1 2628 2629 nil nil nil t #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil))) #s(yas--field 2 2631 2634 nil nil nil t #s(yas--field 3 2636 2636 nil nil nil t nil)) #s(yas--field 3 2636 2636 nil nil nil t nil)) nil 32 nil #s(yas--field 3 2636 2636 nil nil nil t nil) nil nil))) nil (25901 28336 132007 480000) 0 nil])
([nil nil ((2604 . 2606)) nil (25901 28336 132007 89000) 0 nil])
([nil nil ((2606 . 2615)) nil (25901 28336 132006 829000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2528) (undo-tree-id1700 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2529) (undo-tree-id1701 . -1) (#("t" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2530) (undo-tree-id1702 . -1) 2531) nil (25901 28336 132006 288000) 0 nil])
([nil nil ((2528 . 2534)) nil (25901 28336 132004 995000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2538) (undo-tree-id1693 . -1) (#("B" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2539) (undo-tree-id1694 . -1) (#("y" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2540) (undo-tree-id1695 . -1) (#("U" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2541) (undo-tree-id1696 . -1) (#("s" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2542) (undo-tree-id1697 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2543) (undo-tree-id1698 . -1) (#("r" 0 1 (fontified t face (tree-sitter-hl-face:function tree-sitter-hl-face:variable))) . -2544) (undo-tree-id1699 . -1) 2545) nil (25901 28336 132004 204000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2602) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2603) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2604) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2605) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2606) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#(" " 0 1 (fontified t)) . -2607) (undo-tree-id1689 . -1) (#(":" 0 1 (fontified t)) . -2608) (undo-tree-id1690 . -1) (#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -2609) (undo-tree-id1691 . -1) (#(" " 0 1 (fontified t)) . -2610) (undo-tree-id1692 . -1) 2611) nil (25901 28336 132000 827000) 0 nil])
([nil nil ((2602 . 2607)) nil (25901 28336 131995 247000) 0 nil])
([nil nil ((2607 . 2616)) nil (25901 28336 131994 976000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2600) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (#("	" 0 1 (fontified t)) . -2601) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2602) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2603) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2604) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2605) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2606) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2607) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2608) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2609) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (#("." 0 1 (fontified t)) . -2610) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2611) (undo-tree-id1674 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2612) (undo-tree-id1675 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2613) (undo-tree-id1676 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2614) (undo-tree-id1677 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2615) (undo-tree-id1678 . -1) 2616) nil (25901 28336 131992 311000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2529) (2529 . 2530) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -2529) (2529 . 2530) (2527 . 2530)) nil (25901 28336 131676 499000) 0 nil])
([nil nil ((2529 . 2532)) nil (25901 28336 131676 28000) 0 nil])
([nil nil ((2532 . 2534)) nil (25901 28336 131675 777000) 0 nil])
([nil nil ((apply yas--snippet-revive 2531 2540 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (2531 . 2540) (#("apiConfig" 0 9 (fontified nil)) . 2531) (2531 . 2540) (#("api" 0 3 (fontified nil)) . 2531) (2531 . 2534) (#("apiConfig" 0 9 (fontified nil)) . -2531) (2531 . 2540) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -2531) (undo-tree-id1650 . -3) (undo-tree-id1651 . -3) 2534) nil (25901 28336 131675 46000) 0 nil])
([nil nil ((2531 . 2532)) nil (25901 28336 131673 313000) 0 nil])
([nil nil ((2617 . 2618) (#("	" 0 1 (fontified nil)) . 2616) (undo-tree-id1649 . -1) (2617 . 2618)) nil (25901 28336 131672 952000) 0 nil])
([nil nil ((2616 . 2617)) nil (25901 28336 131672 361000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2616) (undo-tree-id1648 . -1) 2617) nil (25901 28336 131672 0) 0 nil])
([nil nil ((2616 . 2620)) nil (25901 28336 131671 549000) 0 nil])
([nil nil ((2620 . 2621)) nil (25901 28336 131671 219000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2620) (undo-tree-id1647 . -1) 2621) nil (25901 28336 131670 848000) 0 nil])
([nil nil ((2620 . 2623)) nil (25901 28336 131670 307000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2620) (undo-tree-id1645 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:property)) . -2621) (undo-tree-id1646 . -1) 2622) nil (25901 28336 131669 886000) 0 nil])
([nil nil ((2620 . 2622)) nil (25901 28336 131668 924000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2622) (undo-tree-id1644 . -1) 2623) nil (25901 28336 131668 424000) 0 nil])
([nil nil ((2622 . 2623)) nil (25901 28336 131667 221000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2634 2639 nil nil nil t #s(yas--field 2 2641 2641 nil nil nil t nil)) #s(yas--field 2 2641 2641 nil nil nil t nil)) nil 34 nil #s(yas--field 2 2641 2641 nil nil nil t nil) nil nil)) (2623 . 2685) (#("CreateFeed(${1:ctx context.Context}, ${2:arg database.CreateFeedParams})" 0 72 (fontified nil)) . 2623) (2623 . 2695) (#("CreateFeed" 0 10 (fontified nil)) . -2623) (2623 . 2633)) nil (25901 28336 131666 410000) 0 nil])
([nil nil ((2635 . 2637) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 2635) (undo-tree-id1643 . -17) (2634 . 2635)) nil (25901 28336 131664 867000) 0 nil])
([nil nil ((2634 . 2636)) nil (25901 28336 131663 635000) 0 nil])
([nil nil ((#("arg database.CreateFeedParams" 0 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t) 4 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 29 (fontified t face tree-sitter-hl-face:property)) . 2641)) nil (25901 28336 131662 883000) 0 nil])
([nil nil ((apply yas--snippet-revive 2623 2642 #s(yas--snippet nil (#s(yas--field 1 2634 2639 nil nil nil t #s(yas--field 2 2641 2641 nil nil nil t nil)) #s(yas--field 2 2641 2641 nil nil nil t nil)) nil 34 nil #s(yas--field 2 2641 2641 nil nil nil t nil) nil nil))) nil (25901 28336 131662 312000) 0 nil])
([nil nil ((2615 . 2617)) nil (25901 28336 131661 741000) 0 nil])
([nil nil ((2617 . 2625)) nil (25901 28336 131661 410000) 0 nil])
([nil nil ((980 . 982)) nil (25901 28336 131660 960000) 0 nil])
([nil nil ((982 . 991)) nil (25901 28336 131660 629000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:type)) . -987) (undo-tree-id1639 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -988) (undo-tree-id1640 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -989) (undo-tree-id1641 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -990) (undo-tree-id1642 . -1) 991) nil (25901 28336 131659 857000) 0 nil])
([nil nil ((987 . 991)) nil (25901 28336 131657 693000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -990) (undo-tree-id1638 . -1) 991) nil (25901 28336 131657 413000) 0 nil])
([nil nil ((990 . 994)) nil (25901 28336 131656 431000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -993) (undo-tree-id1637 . -1) 994) nil (25901 28336 131656 20000) 0 nil])
([nil nil ((993 . 1004)) nil (25901 28336 131649 658000) 0 nil])
([nil nil ((1004 . 1011)) nil (25901 28336 131649 408000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1013) (1013 . 1014) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1013) (1013 . 1014) (1010 . 1014)) nil (25901 28336 131648 937000) 0 nil])
([nil nil ((1014 . 1015) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1014) (1014 . 1015) (1013 . 1015)) nil (25901 28336 131648 456000) 0 nil])
([nil nil ((1015 . 1027)) nil (25901 28336 131648 65000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -1028) (1028 . 1029) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -1028) (1028 . 1029) (1027 . 1029) (#("`" 0 1 (fontified nil)) . -1027) (1027 . 1028)) nil (25901 28336 131647 444000) 0 nil])
([nil nil ((1034 . 1038) (1033 . 1035) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -1033) (1028 . 1034)) nil (25901 28336 131646 793000) 0 nil])
([nil nil ((1040 . 1042)) nil (25901 28336 131646 272000) 0 nil])
([nil nil ((1042 . 1053)) nil (25901 28336 131645 881000) 0 nil])
([nil nil ((1060 . 1063) (1059 . 1061) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -1059) (1054 . 1060) (1053 . 1055) (#("`" 0 1 (fontified nil)) . -1053) (1053 . 1054)) nil (25901 28336 131642 775000) 0 nil])
([nil nil ((2705 . 2706) (#("	" 0 1 (fontified nil)) . 2704) (undo-tree-id1788 . -1) (2705 . 2706) (t 25901 28336 146847 444000)) nil (25901 28431 672340 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2705 . 2706) (#("
" 0 1 (fontified nil)) . -2891) (2704 . 2892)) nil (25901 28431 672339 156000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2759) (undo-tree-id1777 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2760) (undo-tree-id1778 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2761) (undo-tree-id1779 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2762) (undo-tree-id1780 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2763) (undo-tree-id1781 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2764) (undo-tree-id1782 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2765) (undo-tree-id1783 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2766) (undo-tree-id1784 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2767) (undo-tree-id1785 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2768) (undo-tree-id1786 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -2769) (undo-tree-id1787 . -1) 2770) nil (25901 28431 672337 42000) 0 nil])
([nil nil ((2759 . 2762)) nil (25901 28431 672332 844000) 0 nil])
([nil nil ((apply yas--snippet-revive 2753 2770 #s(yas--snippet nil nil nil 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil nil nil)) (2753 . 2770) (#("CreateFeedRequest" 0 17 (fontified nil)) . 2753) (2753 . 2770) (#("CreateFee" 0 9 (fontified nil)) . 2753) (2753 . 2762) (#("CreateFeedRequest" 0 17 (fontified nil)) . -2753) (2753 . 2770) (#("CreateFee" 0 9 (fontified t face tree-sitter-hl-face:type)) . -2753) (undo-tree-id1775 . -9) (undo-tree-id1776 . -9) 2762) nil (25901 28431 672332 122000) 0 nil])
([nil nil ((2742 . 2743) (#("us" 0 2 (fontified t face tree-sitter-hl-face:variable)) . 2742) (2745 . 2747) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2745) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) 2746 (2797 . 2798) (#("us" 0 2 (fontified t face tree-sitter-hl-face:variable)) . 2797) (2800 . 2802) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . 2800) 2797) nil (25901 28431 672330 690000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2851) (undo-tree-id1770 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2852) (undo-tree-id1771 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -2853) (undo-tree-id1772 . -1) 2854) nil (25901 28431 672329 297000) 0 nil])
([nil nil ((2851 . 2854)) nil (25901 28431 672328 85000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2857) (undo-tree-id1750 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2858) (undo-tree-id1751 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2859) (undo-tree-id1752 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2860) (undo-tree-id1753 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2861) (undo-tree-id1754 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2862) (undo-tree-id1755 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2863) (undo-tree-id1756 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2864) (undo-tree-id1757 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2865) (undo-tree-id1758 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -2866) (undo-tree-id1759 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2867) (undo-tree-id1760 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2868) (undo-tree-id1761 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2869) (undo-tree-id1762 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2870) (undo-tree-id1763 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -2871) (undo-tree-id1764 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2872) (undo-tree-id1765 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2873) (undo-tree-id1766 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2874) (undo-tree-id1767 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2875) (undo-tree-id1768 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -2876) (undo-tree-id1769 . -1) 2877) nil (25901 28431 672326 41000) 0 nil])
([nil nil ((2857 . 2868)) nil (25901 28431 672318 597000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1591) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1592) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1593) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) 1594) nil (25901 28431 672317 906000) 0 nil])
([nil nil ((1591 . 1594)) nil (25901 28431 672314 499000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1597) (undo-tree-id1723 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1598) (undo-tree-id1724 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1599) (undo-tree-id1725 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1600) (undo-tree-id1726 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1601) (undo-tree-id1727 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1602) (undo-tree-id1728 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1603) (undo-tree-id1729 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1604) (undo-tree-id1730 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -1605) (undo-tree-id1731 . -1) (#("S" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1606) (undo-tree-id1732 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1607) (undo-tree-id1733 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1608) (undo-tree-id1734 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1609) (undo-tree-id1735 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1610) (undo-tree-id1736 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1611) (undo-tree-id1737 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:string)) . -1612) (undo-tree-id1738 . -1) (#("E" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1613) (undo-tree-id1739 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1614) (undo-tree-id1740 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1615) (undo-tree-id1741 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1616) (undo-tree-id1742 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -1617) (undo-tree-id1743 . -1) 1618) nil (25901 28431 672311 874000) 0 nil])
([nil nil ((1597 . 1608)) nil (25901 28431 672294 772000) 0 nil])
([nil nil ((2882 . 2888) (t 25901 28431 686573 266000)) nil (25901 28555 657373 824000) 0 nil])
([nil nil ((apply yas--snippet-revive 2882 2907 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (2882 . 2907) (#("database.CreateFeedParams" 0 25 (fontified nil)) . 2882) (2882 . 2907) (#("Create" 0 6 (fontified nil)) . 2882) (2882 . 2888) (#("database.CreateFeedParams" 0 25 (fontified nil)) . -2882) (2882 . 2907) (#("Create" 0 6 (fontified t face tree-sitter-hl-face:variable)) . -2882) (undo-tree-id1832 . -6) (undo-tree-id1833 . -6) 2888) nil (25901 28555 657372 651000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -2908) (2908 . 2909) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -2908) (2908 . 2909) (2907 . 2909)) nil (25901 28555 657370 838000) 0 nil])
([nil nil ((2909 . 2911)) nil (25901 28555 657370 47000) 0 nil])
([nil nil ((2911 . 2916)) nil (25901 28555 657369 365000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2917 . 2918) (#("
" 0 1 (fontified nil)) . -3049) (2916 . 3050) 2915) nil (25901 28555 657368 854000) 0 nil])
([nil nil ((#("	feed.
" 0 1 (fontified t) 1 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 7 (fontified t)) . 2910) (undo-tree-id1825 . -6) (undo-tree-id1826 . -6) (undo-tree-id1827 . -6) (undo-tree-id1828 . -6) (undo-tree-id1829 . -6) (undo-tree-id1830 . -6) (undo-tree-id1831 . -1) 2911) nil (25901 28555 657367 943000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2874) (undo-tree-id1821 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2875) (undo-tree-id1822 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2876) (undo-tree-id1823 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2877) (undo-tree-id1824 . -1) 2878) nil (25901 28555 657365 97000) 0 nil])
([nil nil ((2874 . 2879)) nil (25901 28555 657363 534000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3034) (undo-tree-id1817 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3035) (undo-tree-id1818 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3036) (undo-tree-id1819 . -1) (#("q" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3037) (undo-tree-id1820 . -1) 3038) nil (25901 28555 657362 993000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3031) (undo-tree-id1814 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3032) (undo-tree-id1815 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3033) (undo-tree-id1816 . -1) 3034) nil (25901 28555 657360 699000) 0 nil])
([nil nil ((3031 . 3033)) nil (25901 28555 657359 597000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3032) (undo-tree-id1813 . -1) 3033) nil (25901 28555 657359 256000) 0 nil])
([nil nil ((3032 . 3034)) nil (25901 28555 657358 735000) 0 nil])
([nil nil ((apply yas--snippet-revive 3031 3043 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (3031 . 3043) (#("feedReq.Name" 0 12 (fontified nil)) . 3031) (3031 . 3043) (#("fee" 0 3 (fontified nil)) . 3031) (3031 . 3034) (#("feedReq.Name" 0 12 (fontified nil)) . -3031) (3031 . 3043) (#("fee" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3031) (undo-tree-id1811 . -3) (undo-tree-id1812 . -3) 3034) nil (25901 28555 657358 34000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3039) (undo-tree-id1806 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3040) (undo-tree-id1807 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3041) (undo-tree-id1808 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3042) (undo-tree-id1809 . -1) (#("." 0 1 (fontified t)) . -3043) (undo-tree-id1810 . -1) 3044) nil (25901 28555 657356 301000) 0 nil])
([nil nil ((3043 . 3045)) nil (25901 28555 657354 668000) 0 nil])
([nil nil ((3045 . 3048)) nil (25901 28555 657354 427000) 0 nil])
([nil nil ((apply yas--snippet-revive 3045 3050 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (3045 . 3050) (#("dbObj" 0 5 (fontified nil)) . 3045) (3045 . 3050) (#("dbO" 0 3 (fontified nil)) . 3045) (3045 . 3048) (#("dbObj" 0 5 (fontified nil)) . -3045) (3045 . 3050) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3045) (undo-tree-id1804 . -3) (undo-tree-id1805 . -3) 3048) nil (25901 28555 657353 546000) 0 nil])
([nil nil ((3050 . 3051)) nil (25901 28555 657351 832000) 0 nil])
([nil nil ((apply yas--snippet-revive 3051 3057 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (3051 . 3057) (#("UserID" 0 6 (fontified nil)) . 3051) (3051 . 3057) (#("UserID" 0 6 (fontified nil)) . -3051) (3051 . 3057)) nil (25901 28555 657351 341000) 0 nil])
([nil nil ((3057 . 3059)) nil (25901 28555 657350 810000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3058) (undo-tree-id1803 . -1) 3059) nil (25901 28555 657350 430000) 0 nil])
([nil nil ((3058 . 3065)) nil (25901 28555 657349 728000) 0 nil])
([nil nil ((apply yas--snippet-revive 3065 3067 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (3065 . 3067) (#("ID" 0 2 (fontified nil)) . 3065) (3065 . 3067) (#("ID" 0 2 (fontified nil)) . -3065) (3065 . 3067)) nil (25901 28555 657349 167000) 0 nil])
([nil nil ((3093 . 3096)) nil (25901 28555 657348 606000) 0 nil])
([nil nil ((apply yas--snippet-revive 3093 3098 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (3093 . 3098) (#("dbObj" 0 5 (fontified nil)) . 3093) (3093 . 3098) (#("dbO" 0 3 (fontified nil)) . 3093) (3093 . 3096) (#("dbObj" 0 5 (fontified nil)) . -3093) (3093 . 3098) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3093) (undo-tree-id1801 . -3) (undo-tree-id1802 . -3) 3096) nil (25901 28555 657347 885000) 0 nil])
([nil nil ((3070 . 3078)) nil (25901 28555 657346 582000) 0 nil])
([nil nil ((3074 . 3079)) nil (25901 28555 657346 342000) 0 nil])
([nil nil ((3112 . 3114)) nil (25901 28555 657345 841000) 0 nil])
([nil nil ((3114 . 3117)) nil (25901 28555 657345 641000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3114) (undo-tree-id1798 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3115) (undo-tree-id1799 . -1) (#(" " 0 1 (fontified t)) . -3116) (undo-tree-id1800 . -1) 3117) nil (25901 28555 657345 190000) 0 nil])
([nil nil ((3114 . 3118)) nil (25901 28555 657343 787000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3117) (undo-tree-id1797 . -1) 3118) nil (25901 28555 657343 417000) 0 nil])
([nil nil ((3117 . 3122)) nil (25901 28555 657342 866000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3129) (3129 . 3130) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3129) (3129 . 3130) (3122 . 3130)) nil (25901 28555 657342 405000) 0 nil])
([nil nil ((3130 . 3132) (3131 . 3132) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3130) (3130 . 3132) (3129 . 3131)) nil (25901 28555 657341 914000) 0 nil])
([nil nil ((3132 . 3142)) nil (25901 28555 657341 463000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3138) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3139) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3140) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3141) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) 3142) nil (25901 28555 657340 711000) 0 nil])
([nil nil ((3129 . 3132)) nil (25901 28555 657331 374000) 0 nil])
([nil nil ((3132 . 3138)) nil (25901 28555 657331 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3155 3156 nil nil nil t #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil))) #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil)) #s(yas--field 3 3163 3186 nil nil nil t nil)) nil 42 nil #s(yas--field 3 3163 3186 nil nil nil t nil) nil nil)) (3138 . 3199) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3138) (3138 . 3214) (#("RespondWithError" 0 16 (fontified nil)) . -3138) (3138 . 3154)) nil (25901 28555 657330 272000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3156) (3155 . 3156)) nil (25901 28555 657329 651000) 0 nil])
([nil nil ((3159 . 3161) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3159) (3158 . 3159)) nil (25901 28555 657328 929000) 0 nil])
([nil nil ((3164 . 3169) (3163 . 3165) (#("\"" 0 1 (fontified nil)) . -3163) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3164) (3163 . 3164)) nil (25901 28555 657327 847000) 0 nil])
([nil nil ((3169 . 3185)) nil (25901 28555 657327 346000) 0 nil])
([nil nil ((apply yas--snippet-revive 3138 3187 #s(yas--snippet nil (#s(yas--field 1 3155 3156 nil nil nil t #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil))) #s(yas--field 2 3158 3161 nil nil nil t #s(yas--field 3 3163 3186 nil nil nil t nil)) #s(yas--field 3 3163 3186 nil nil nil t nil)) nil 42 nil #s(yas--field 3 3163 3186 nil nil nil t nil) nil nil))) nil (25901 28555 657326 936000) 0 nil])
([nil nil ((3231 . 3235)) nil (25901 28555 657324 271000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2589) (undo-tree-id1875 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2590) (undo-tree-id1876 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2591) (undo-tree-id1877 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2592) (undo-tree-id1878 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2593) (undo-tree-id1879 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2594) (undo-tree-id1880 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2595) (undo-tree-id1881 . -1) 2596 (t 25901 28555 667225 160000)) nil (25901 28588 257874 332000) 0 nil])
([nil nil ((2589 . 2593)) nil (25901 28588 257871 267000) 0 nil])
([nil nil ((#("	userRes := UserResponse{}
	userRes.ID = user.ID
	userRes.Name = user.Name
	userRes.CreatedAt = user.CreatedAt
	userRes.UpdatedAt = user.UpdatedAt
	userRes.Apikey = user.Apikey
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 24 (fontified t face tree-sitter-hl-face:type) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 28 (fontified t) 28 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t) 36 38 (fontified t face tree-sitter-hl-face:property) 38 39 (fontified t) 39 40 (fontified t face tree-sitter-hl-face:operator) 40 41 (fontified t) 41 45 (fontified t face tree-sitter-hl-face:variable) 45 46 (fontified t) 46 48 (fontified t face tree-sitter-hl-face:property) 48 49 (fontified t) 49 50 (fontified t) 50 57 (fontified t face tree-sitter-hl-face:variable) 57 58 (fontified t) 58 62 (fontified t face tree-sitter-hl-face:property) 62 63 (fontified t) 63 64 (fontified t face tree-sitter-hl-face:operator) 64 65 (fontified t) 65 69 (fontified t face tree-sitter-hl-face:variable) 69 70 (fontified t) 70 74 (fontified t face tree-sitter-hl-face:property) 74 75 (fontified t) 75 76 (fontified t) 76 83 (fontified t face tree-sitter-hl-face:variable) 83 84 (fontified t) 84 93 (fontified t face tree-sitter-hl-face:property) 93 94 (fontified t) 94 95 (fontified t face tree-sitter-hl-face:operator) 95 96 (fontified t) 96 100 (fontified t face tree-sitter-hl-face:variable) 100 101 (fontified t) 101 110 (fontified t face tree-sitter-hl-face:property) 110 111 (fontified t) 111 112 (fontified t) 112 119 (fontified t face tree-sitter-hl-face:variable) 119 120 (fontified t) 120 127 (fontified t face tree-sitter-hl-face:property) 127 129 (fontified t face tree-sitter-hl-face:property) 129 130 (fontified t) 130 131 (fontified t face tree-sitter-hl-face:operator) 131 132 (fontified t) 132 136 (fontified t face tree-sitter-hl-face:variable) 136 137 (fontified t) 137 146 (fontified t face tree-sitter-hl-face:property) 146 147 (fontified t) 147 148 (fontified t) 148 155 (fontified t face tree-sitter-hl-face:variable) 155 156 (fontified t) 156 158 (fontified t face tree-sitter-hl-face:property) 158 159 (fontified t face tree-sitter-hl-face:property) 159 162 (fontified t face tree-sitter-hl-face:property) 162 163 (fontified t) 163 164 (fontified t face tree-sitter-hl-face:operator) 164 165 (fontified t) 165 169 (fontified t face tree-sitter-hl-face:variable) 169 170 (fontified t) 170 176 (fontified t face tree-sitter-hl-face:property) 176 177 (fontified t)) . 2381) (undo-tree-id1834 . -167) (undo-tree-id1835 . 1) (undo-tree-id1836 . -176) (undo-tree-id1837 . -20) (undo-tree-id1838 . -167) (undo-tree-id1839 . -167) (undo-tree-id1840 . -48) (undo-tree-id1841 . -26) (undo-tree-id1842 . -26) (undo-tree-id1843 . -26) (undo-tree-id1844 . -26) (undo-tree-id1845 . -26) (undo-tree-id1846 . -48) (undo-tree-id1847 . -47) (undo-tree-id1848 . -47) (undo-tree-id1849 . -47) (undo-tree-id1850 . -47) (undo-tree-id1851 . -47) (undo-tree-id1852 . -47) (undo-tree-id1853 . -177) (undo-tree-id1854 . -20) (undo-tree-id1855 . -167) (undo-tree-id1856 . -20) (undo-tree-id1857 . -20) (undo-tree-id1858 . -147) (undo-tree-id1859 . -167) (undo-tree-id1860 . -167) (undo-tree-id1861 . -132) (undo-tree-id1862 . -136) (undo-tree-id1863 . -165) (undo-tree-id1864 . -169) (undo-tree-id1865 . -41) (undo-tree-id1866 . -45) (undo-tree-id1867 . -65) (undo-tree-id1868 . -69) (undo-tree-id1869 . -96) (undo-tree-id1870 . -100) (undo-tree-id1871 . -167) (undo-tree-id1872 . -167) (undo-tree-id1873 . -167) (undo-tree-id1874 . -177) 2548) nil (25901 28588 257868 331000) 0 nil])
([nil nil ((3815 . 3816) (#("	" 0 1 (fontified nil)) . 3814) (undo-tree-id1926 . -1) (3813 . 3816) (t 25901 28588 371134 531000)) nil (25901 28704 329639 601000) 0 nil])
([nil nil ((3816 . 3821)) nil (25901 28704 329638 909000) 0 nil])
([nil nil ((apply yas--snippet-revive 3816 3824 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (3816 . 3824) (#("v1Router" 0 8 (fontified nil)) . 3816) (3816 . 3824) (#("v1Rou" 0 5 (fontified nil)) . 3816) (3816 . 3821) (#("v1Router" 0 8 (fontified nil)) . -3816) (3816 . 3824) (#("v1Rou" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -3816) (undo-tree-id1924 . -5) (undo-tree-id1925 . -5) 3821) nil (25901 28704 329637 827000) 0 nil])
([nil nil ((3824 . 3828)) nil (25901 28704 329636 54000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3830 3838 nil nil nil t #s(yas--field 2 3840 3878 nil nil nil t nil)) #s(yas--field 2 3840 3878 nil nil nil t nil)) nil 44 nil #s(yas--field 2 3840 3878 nil nil nil t nil) nil nil)) (3825 . 3873) (#("Post(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 58 (fontified nil)) . 3825) (3825 . 3883) (#("Pos" 0 3 (fontified nil)) . 3825) (3825 . 3828) (#("Post" 0 4 (fontified nil)) . -3825) (3825 . 3829) (#("Pos" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3825) (undo-tree-id1922 . -3) (undo-tree-id1923 . -3) 3828) nil (25901 28704 329635 333000) 0 nil])
([nil nil ((3830 . 3832) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3830) (undo-tree-id1920 . -1) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 3831) (undo-tree-id1921 . -14) (3830 . 3831)) nil (25901 28704 329633 830000) 0 nil])
([nil nil ((3831 . 3837)) nil (25901 28704 329632 237000) 0 nil])
([nil nil ((3841 . 3843) (#("handlerFn http.HandlerFunc" 0 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 14 (fontified nil face tree-sitter-hl-face:variable) 14 15 (fontified nil) 15 26 (fontified nil face tree-sitter-hl-face:property)) . 3841) (undo-tree-id1919 . -26) (3840 . 3841)) nil (25901 28704 329631 646000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3840) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3841) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3842) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) 3843) nil (25901 28704 329630 564000) 0 nil])
([nil nil ((3840 . 3843)) nil (25901 28704 329627 318000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3860 3877 nil nil nil t nil)) nil 45 nil #s(yas--field 1 3860 3877 nil nil nil t nil) #s(yas--field 2 3840 3878 nil nil nil t nil) nil)) (3840 . 3882) (#("apiCfg.authenticate(${1:handler authedHandler})" 0 47 (fontified nil)) . 3840) (undo-tree-id1900 . -47) (3840 . 3887) (#("api" 0 3 (fontified nil)) . 3840) (undo-tree-id1901 . -3) (3840 . 3843) (#("apiCfg.authenticate" 0 19 (fontified nil)) . -3840) (undo-tree-id1902 . -19) (3840 . 3859) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3840) (undo-tree-id1903 . -3) (undo-tree-id1904 . -3) (undo-tree-id1905 . -3) (undo-tree-id1906 . -3) (undo-tree-id1907 . -3) (undo-tree-id1908 . -3) (undo-tree-id1909 . -3) 3843) nil (25901 28704 329626 516000) 0 nil])
([nil nil ((3861 . 3863) (#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 3861) (undo-tree-id1897 . -21) (undo-tree-id1898 . -8) (undo-tree-id1899 . -9) (3860 . 3861)) nil (25901 28704 329622 328000) 0 nil])
([nil nil ((apply yas--snippet-revive 3860 3877 #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 1 3860 3877 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 1 3860 3877 nil nil nil t nil) nil)) (3860 . 3877) (#("apiCfg.CreateFeed" 0 17 (fontified nil)) . 3860) (undo-tree-id1882 . -17) (3860 . 3877) (#("api" 0 3 (fontified nil)) . 3860) (undo-tree-id1883 . -3) (3860 . 3863) (#("apiCfg.CreateFeed" 0 17 (fontified nil)) . -3860) (undo-tree-id1884 . -17) (3860 . 3877) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3860) (undo-tree-id1885 . -3) (undo-tree-id1886 . -3) (undo-tree-id1887 . -3) (undo-tree-id1888 . -1) (undo-tree-id1889 . -2) (undo-tree-id1890 . -3) (undo-tree-id1891 . -3) (undo-tree-id1892 . -3) (undo-tree-id1893 . -3) (undo-tree-id1894 . -3) (undo-tree-id1895 . -3) (undo-tree-id1896 . -3) 3863) nil (25901 28704 329620 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 3840 3878 #s(yas--snippet nil (#s(yas--field 1 3860 3877 nil nil nil t nil)) nil 45 nil #s(yas--field 1 3860 3877 nil nil nil t nil) #s(yas--field 2 3840 3878 nil nil nil t nil) nil))) nil (25901 28704 329608 803000) 0 nil])
([nil nil ((apply yas--snippet-revive 3825 3879 #s(yas--snippet nil (#s(yas--field 1 3830 3838 nil nil nil t #s(yas--field 2 3840 3878 nil nil nil t nil)) #s(yas--field 2 3840 3878 nil nil nil t nil)) nil 44 nil #s(yas--field 2 3840 3878 nil nil nil t nil) nil nil))) nil (25901 28704 329605 517000) 0 nil])
([nil nil ((2887 . 2889) (t 25901 28704 344816 581000)) nil (25901 28786 437912 880000) 0 nil])
([nil nil ((2889 . 2892)) nil (25901 28786 437912 650000) 0 nil])
([nil nil ((apply yas--snippet-revive 2889 2894 #s(yas--snippet nil nil nil 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 47 nil nil nil nil)) (2889 . 2894) (#("dbObj" 0 5 (fontified nil)) . 2889) (2889 . 2894) (#("dbO" 0 3 (fontified nil)) . 2889) (2889 . 2892) (#("dbObj" 0 5 (fontified nil)) . -2889) (2889 . 2894) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -2889) (undo-tree-id1941 . -3) (undo-tree-id1942 . -3) 2892) nil (25901 28786 437911 708000) 0 nil])
([nil nil ((2894 . 2895)) nil (25901 28786 437910 345000) 0 nil])
([nil nil ((apply yas--snippet-revive 2895 2898 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (2895 . 2898) (#("Url" 0 3 (fontified nil)) . 2895) (2895 . 2898) (#("Url" 0 3 (fontified nil)) . -2895) (2895 . 2898)) nil (25901 28786 437909 754000) 0 nil])
([nil nil ((2898 . 2905)) nil (25901 28786 437908 682000) 0 nil])
([nil nil ((apply yas--snippet-revive 2901 2912 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (2901 . 2912) (#("feedReq.Url" 0 11 (fontified nil)) . 2901) (2901 . 2912) (#("feed" 0 4 (fontified nil)) . 2901) (2901 . 2905) (#("feedReq.Url" 0 11 (fontified nil)) . -2901) (2901 . 2912) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -2901) (undo-tree-id1927 . -4) (undo-tree-id1928 . -4) (undo-tree-id1929 . -1) (undo-tree-id1930 . -2) (undo-tree-id1931 . -3) (undo-tree-id1932 . -4) (undo-tree-id1933 . -4) (undo-tree-id1934 . -4) (undo-tree-id1935 . -4) (undo-tree-id1936 . -4) (undo-tree-id1937 . -4) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) 2905) nil (25901 28786 437905 486000) 0 nil])
([nil nil ((3904 . 3906) (t 25901 28786 454594 387000)) nil (25901 28910 43027 733000) 0 nil])
([nil nil ((3906 . 3907)) nil (25901 28910 43027 523000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3904) (undo-tree-id1967 . -1) (#("	" 0 1 (fontified t)) . -3905) (undo-tree-id1968 . -1) (#("v" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3906) (undo-tree-id1969 . -1) 3907) nil (25901 28910 43027 112000) 0 nil])
([nil nil ((3083 . 3085)) nil (25901 28910 43025 820000) 0 nil])
([nil nil ((3085 . 3091)) nil (25901 28910 43025 660000) 0 nil])
([nil nil ((3090 . 3092)) nil (25901 28910 43025 509000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -3091) (undo-tree-id1964 . -1) (undo-tree-id1965 . 1) (undo-tree-id1966 . -1) 3092) nil (25901 28910 43025 119000) 0 nil])
([nil nil ((3092 . 3097)) nil (25901 28910 43023 836000) 0 nil])
([nil nil ((apply yas--snippet-revive 3094 3103 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (3094 . 3103) (#("apiConfig" 0 9 (fontified nil)) . 3094) (3094 . 3103) (#("api" 0 3 (fontified nil)) . 3094) (3094 . 3097) (#("apiConfig" 0 9 (fontified nil)) . -3094) (3094 . 3103) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3094) (undo-tree-id1962 . -3) (undo-tree-id1963 . -3) 3097) nil (25901 28910 43023 55000) 0 nil])
([nil nil ((3103 . 3109) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -3103) (3103 . 3104)) nil (25901 28910 43021 943000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3108) (undo-tree-id1961 . -1) 3109) nil (25901 28910 43021 572000) 0 nil])
([nil nil ((3108 . 3113)) nil (25901 28910 43021 131000) 0 nil])
([nil nil ((3113 . 3116)) nil (25901 28910 43020 961000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3112) (undo-tree-id1957 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3113) (undo-tree-id1958 . -1) (#("e" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3114) (undo-tree-id1959 . -1) (#("d" 0 1 (fontified t face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property))) . -3115) (undo-tree-id1960 . -1) 3116) nil (25901 28910 43020 269000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -3117) (3117 . 3118) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -3117) (3117 . 3118) (3112 . 3118)) nil (25901 28910 43018 727000) 0 nil])
([nil nil ((3117 . 3120)) nil (25901 28910 43018 336000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face tree-sitter-hl-face:type)) . -3119) (undo-tree-id1956 . -1) 3120) nil (25901 28910 43017 675000) 0 nil])
([nil nil ((3119 . 3127)) nil (25901 28910 43017 114000) 0 nil])
([nil nil ((apply yas--snippet-revive 3124 3138 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (3124 . 3138) (#("ResponseWriter" 0 14 (fontified nil)) . 3124) (3124 . 3138) (#("Res" 0 3 (fontified nil)) . 3124) (3124 . 3127) (#("ResponseWriter" 0 14 (fontified nil)) . -3124) (3124 . 3138) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:type)) . -3124) (undo-tree-id1954 . -3) (undo-tree-id1955 . -3) 3127) nil (25901 28910 43016 372000) 0 nil])
([nil nil ((3138 . 3151)) nil (25901 28910 43014 939000) 0 nil])
([nil nil ((apply yas--snippet-revive 3148 3155 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (3148 . 3155) (#("Request" 0 7 (fontified nil)) . 3148) (3148 . 3155) (#("Req" 0 3 (fontified nil)) . 3148) (3148 . 3151) (#("Request" 0 7 (fontified nil)) . -3148) (3148 . 3155) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -3148) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) 3151) nil (25901 28910 43014 188000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3159) (3159 . 3160) (#("}" 0 1 (fontified nil)) . -3159) (3158 . 3160) (3156 . 3159)) nil (25901 28910 43012 535000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3158) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) 3159) nil (25901 28910 43011 753000) 0 nil])
([nil nil ((3159 . 3160) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 3159) (3159 . 3160) (3158 . 3160)) nil (25901 28910 42999 410000) 0 nil])
([nil nil ((3160 . 3167) (t 25901 28910 149263 178000)) nil (25901 29019 538291 736000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3160) (undo-tree-id1992 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3161) (undo-tree-id1993 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3162) (undo-tree-id1994 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3163) (undo-tree-id1995 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3164) (undo-tree-id1996 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -3165) (undo-tree-id1997 . -1) (#(" " 0 1 (fontified t)) . -3166) (undo-tree-id1998 . -1) 3167) nil (25901 29019 538289 993000) 0 nil])
([nil nil ((3160 . 3166)) nil (25901 29019 538286 466000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3160) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3161) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3162) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3163) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3164) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (#("." 0 1 (fontified t)) . -3165) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) 3166) nil (25901 29019 538285 504000) 0 nil])
([nil nil ((3160 . 3163)) nil (25901 29019 538137 728000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3162) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) 3163) nil (25901 29019 538137 357000) 0 nil])
([nil nil ((3162 . 3177)) nil (25901 29019 538136 566000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3174) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3175) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3176) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) 3177) nil (25901 29019 538136 4000) 0 nil])
([nil nil ((3174 . 3178)) nil (25901 29019 538132 999000) 0 nil])
([nil nil ((apply yas--snippet-revive 3174 3182 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (3174 . 3182) (#("database" 0 8 (fontified nil)) . 3174) (3174 . 3182) (#("data" 0 4 (fontified nil)) . 3174) (3174 . 3178) (#("database" 0 8 (fontified nil)) . -3174) (3174 . 3182) (#("data" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3174) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) 3178) nil (25901 29019 538131 797000) 0 nil])
([nil nil ((3182 . 3186)) nil (25901 29019 538121 838000) 0 nil])
([nil nil ((3196 . 3197) (#(")" 0 1 (fontified nil)) . -3195) (3195 . 3196) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3195) (3195 . 3196) (3186 . 3196)) nil (25901 29019 538119 103000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3174) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3175) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3176) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3177) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3178) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3179) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3180) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3181) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) 3182 (t 25901 29019 551872 976000)) nil (25901 29058 131438 198000) 0 nil])
([nil nil ((3174 . 3176)) nil (25901 29058 131297 775000) 0 nil])
([nil nil ((3176 . 3177)) nil (25901 29058 131297 635000) 0 nil])
([nil nil ((3177 . 3178)) nil (25901 29058 131297 395000) 0 nil])
([nil nil ((3191 . 3194)) nil (25901 29058 131297 184000) 0 nil])
([nil nil ((3194 . 3196)) nil (25901 29058 131297 34000) 0 nil])
([nil nil ((3198 . 3200)) nil (25901 29058 131296 864000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3215) (3215 . 3216) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3215) (3215 . 3216) (3200 . 3216)) nil (25901 29058 131296 473000) 0 nil])
([nil nil ((3216 . 3218) (3217 . 3218) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3216) (3216 . 3218) (3215 . 3217)) nil (25901 29058 131296 12000) 0 nil])
([nil nil ((3218 . 3224)) nil (25901 29058 131295 681000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3241 3242 nil nil nil t #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil))) #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil)) #s(yas--field 3 3249 3272 nil nil nil t nil)) nil 54 nil #s(yas--field 3 3249 3272 nil nil nil t nil) nil nil)) (3224 . 3285) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 3224) (3224 . 3300) (#("RespondWithError" 0 16 (fontified nil)) . -3224) (3224 . 3240)) nil (25901 29058 131294 970000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 3242) (undo-tree-id2002 . -21) (3241 . 3242)) nil (25901 29058 131294 489000) 0 nil])
([nil nil ((3245 . 3247) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 3245) (undo-tree-id2001 . -8) (3244 . 3245)) nil (25901 29058 131293 708000) 0 nil])
([nil nil ((3250 . 3270) (3249 . 3251) (#("\"" 0 1 (fontified nil)) . -3249) (undo-tree-id1999 . -1) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 3250) (undo-tree-id2000 . -10) (3249 . 3250)) nil (25901 29058 131292 375000) 0 nil])
([nil nil ((3270 . 3271)) nil (25901 29058 131284 591000) 0 nil])
([nil nil ((apply yas--snippet-revive 3224 3273 #s(yas--snippet nil (#s(yas--field 1 3241 3242 nil nil nil t #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil))) #s(yas--field 2 3244 3247 nil nil nil t #s(yas--field 3 3249 3272 nil nil nil t nil)) #s(yas--field 3 3249 3272 nil nil nil t nil)) nil 54 nil #s(yas--field 3 3249 3272 nil nil nil t nil) nil nil))) nil (25901 29058 131281 765000) 0 nil])
([nil nil ((3276 . 3278) (t 25901 29058 240627 682000)) nil (25901 29161 26141 287000) 0 nil])
([nil nil ((3278 . 3284)) nil (25901 29161 26141 87000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil)) #s(yas--field 3 3333 3352 nil nil nil nil nil)) nil 55 nil #s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) nil nil)) (3284 . 3353) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 3284) (3284 . 3369) (#("RespondWithJSON" 0 15 (fontified nil)) . -3284) (3284 . 3299)) nil (25901 29161 26140 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 3284 3353 #s(yas--snippet nil (#s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil)) #s(yas--field 3 3333 3352 nil nil nil nil nil)) nil 55 nil #s(yas--field 1 3300 3321 nil nil nil nil #s(yas--field 2 3323 3331 nil nil nil nil #s(yas--field 3 3333 3352 nil nil nil nil nil))) nil nil))) nil (25901 29161 26140 205000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -3283) (3283 . 3284) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3283) (3283 . 3284) (3276 . 3284)) nil (25901 29161 26139 774000) 0 nil])
([nil nil ((3284 . 3286) (3285 . 3286) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 3284) (3284 . 3286) (3283 . 3285)) nil (25901 29161 26139 263000) 0 nil])
([nil nil ((#("	utils.RespondWithJSON(w http.ResponseWriter, code int, payload interface{})
" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t) 7 22 (fontified t face tree-sitter-hl-face:type) 22 23 (fontified t face (rainbow-delimiters-depth-2-face)) 23 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 29 (fontified t face tree-sitter-hl-face:variable) 29 30 (fontified t) 30 44 (fontified t face tree-sitter-hl-face:property) 44 46 (fontified t) 46 50 (fontified t face tree-sitter-hl-face:variable) 50 51 (fontified t) 51 54 (fontified t face tree-sitter-hl-face:variable) 54 56 (fontified t) 56 63 (fontified t face tree-sitter-hl-face:variable) 63 64 (fontified t) 64 72 (fontified t face tree-sitter-hl-face:keyword) 72 73 (fontified t face tree-sitter-hl-face:keyword) 73 74 (fontified t face (rainbow-delimiters-depth-3-face)) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 77 (fontified t)) . 3290) (undo-tree-id2031 . -77) (undo-tree-id2032 . 74) (undo-tree-id2033 . -76) (undo-tree-id2034 . -77) (undo-tree-id2035 . -2) (undo-tree-id2036 . -23) (undo-tree-id2037 . -3) (undo-tree-id2038 . -2) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -77) 3292) nil (25901 29161 26138 572000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3284 . 3285) (#("
" 0 1 (fontified nil)) . -3360) (3283 . 3361) 3274) nil (25901 29161 26133 983000) 0 nil])
([nil nil ((#("		
" 0 3 (fontified t)) . 3361) (undo-tree-id2019 . -2) (undo-tree-id2020 . -1) (undo-tree-id2021 . 1) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -3) 3362) nil (25901 29161 26132 891000) 0 nil])
([nil nil ((3285 . 3287)) nil (25901 29161 26119 657000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3309) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (#(" " 0 1 (fontified t)) . -3310) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3311) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3312) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3313) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3314) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (#("." 0 1 (fontified t)) . -3315) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#("R" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3316) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3317) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3318) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3319) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3320) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3321) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3322) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3323) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (#("W" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3324) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3325) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3326) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3327) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3328) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3329) (undo-tree-id2124 . -1) 3330 (t 25901 29161 134019 257000)) nil (25901 29200 726896 628000) 0 nil])
([nil nil ((3309 . 3310)) nil (25901 29200 726876 701000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3312) (undo-tree-id2073 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3313) (undo-tree-id2074 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3314) (undo-tree-id2075 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3315) (undo-tree-id2076 . -1) (#(" " 0 1 (fontified t)) . -3316) (undo-tree-id2077 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3317) (undo-tree-id2078 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3318) (undo-tree-id2079 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3319) (undo-tree-id2080 . -1) 3320) nil (25901 29200 726875 559000) 0 nil])
([nil nil ((3312 . 3315)) nil (25901 29200 726871 0) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3318) (undo-tree-id2053 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3319) (undo-tree-id2054 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3320) (undo-tree-id2055 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3321) (undo-tree-id2056 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3322) (undo-tree-id2057 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3323) (undo-tree-id2058 . -1) (#(" " 0 1 (fontified t)) . -3324) (undo-tree-id2059 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3325) (undo-tree-id2060 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3326) (undo-tree-id2061 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3327) (undo-tree-id2062 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3328) (undo-tree-id2063 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3329) (undo-tree-id2064 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3330) (undo-tree-id2065 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3331) (undo-tree-id2066 . -1) (#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3332) (undo-tree-id2067 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -3333) (undo-tree-id2068 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -3334) (undo-tree-id2069 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -3335) (undo-tree-id2070 . -1) (undo-tree-id2071 . 1) (undo-tree-id2072 . -1) 3336) nil (25901 29200 726868 976000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -3317) (undo-tree-id2052 . -1) 3318) nil (25901 29200 726860 480000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -3073) (undo-tree-id2051 . -1) 3074) nil (25901 29200 726859 228000) 0 nil])
([nil nil ((3073 . 3074)) nil (25901 29200 726858 226000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face tree-sitter-hl-face:number)) . -1828) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) 1829) nil (25901 29200 726857 355000) 0 nil])
([nil nil ((1828 . 1829)) nil (25901 29200 726845 793000) 0 nil])
([nil nil ((3318 . 3320) (3317 . 3319) (#("\"" 0 1 (fontified nil)) . -3317) (3317 . 3318) (t 25901 29200 740800 208000)) nil (25901 29209 785957 906000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -3317) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (#("O" 0 1 (fontified t)) . -3318) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (#("K" 0 1 (fontified t)) . -3319) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3320) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) 3321 (t 25901 29209 798751 175000)) nil (25901 29215 110798 234000) 0 nil])
([nil nil ((3317 . 3322)) nil (25901 29215 110770 121000) 0 nil])
([nil nil ((#("\303\251" 0 1 (fontified t face tree-sitter-hl-face:string)) . -3257) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) 3258 (t 25901 29215 220722 6000)) nil (25901 29222 634156 717000) 0 nil])
([nil nil ((3257 . 3258)) nil (25901 29222 634143 893000) 0 nil])
([nil nil ((3044 . 3046) (t 25901 29222 648682 271000)) nil (25901 29305 338073 356000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2381 . 2382) (#("
" 0 1 (fontified nil)) . -2557) (2380 . 2558) 2379) nil (25901 29305 338072 745000) 0 nil])
([nil nil ((2593 . 2594)) nil (25901 29305 338072 274000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2593) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) 2594) nil (25901 29305 338071 222000) 0 nil])
([nil nil ((2593 . 2596)) nil (25901 29305 338058 578000) 0 nil])
([nil nil ((1068 . 1069) (#(" " 0 1 (fontified nil)) . 1067) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (1068 . 1069) (t 25901 29305 444255 578000)) nil (25901 29544 474179 552000) 0 nil])
([nil nil ((1069 . 1085)) nil (25901 29544 474178 500000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1084) (undo-tree-id2236 . -1) 1085) nil (25901 29544 474178 119000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1095) (1095 . 1096) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -1095) (1095 . 1096) (1084 . 1096)) nil (25901 29544 474177 428000) 0 nil])
([nil nil ((1096 . 1097) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 1096) (1096 . 1097) (1095 . 1097)) nil (25901 29544 474176 887000) 0 nil])
([nil nil ((1097 . 1100)) nil (25901 29544 474176 516000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1101 . 1102) (#("
" 0 1 (fontified nil)) . -1250) (1100 . 1251) 1099) nil (25901 29544 474176 215000) 0 nil])
([nil nil ((#("	ID 
" 0 1 (fontified t) 1 3 (fontified t face tree-sitter-hl-face:type) 3 4 (fontified t) 4 5 (fontified t)) . 1096) (undo-tree-id2234 . -4) (undo-tree-id2235 . -1) 1097) nil (25901 29544 474175 654000) 0 nil])
([nil nil ((1245 . 1247)) nil (25901 29544 474174 783000) 0 nil])
([nil nil ((1247 . 1249)) nil (25901 29544 474174 622000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:type)) . -1248) (undo-tree-id2233 . -1) 1249) nil (25901 29544 474174 342000) 0 nil])
([nil nil ((1248 . 1256)) nil (25901 29544 474173 751000) 0 nil])
([nil nil ((apply yas--snippet-revive 1251 1257 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (1251 . 1257) (#("string" 0 6 (fontified nil)) . 1251) (1251 . 1257) (#("strin" 0 5 (fontified nil)) . 1251) (1251 . 1256) (#("string" 0 6 (fontified nil)) . -1251) (1251 . 1257) (#("strin" 0 5 (fontified t face tree-sitter-hl-face:type)) . -1251) (undo-tree-id2231 . -5) (undo-tree-id2232 . -5) 1256) nil (25901 29544 474173 190000) 0 nil])
([nil nil ((1257 . 1258)) nil (25901 29544 474171 967000) 0 nil])
([nil nil ((#("`" 0 1 (fontified nil)) . -1259) (1259 . 1260) (#("`" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -1259) (1259 . 1260) (1258 . 1260) (#("`" 0 1 (fontified nil)) . -1258) (1258 . 1259)) nil (25901 29544 474171 627000) 0 nil])
([nil nil ((1265 . 1268) (1264 . 1266) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -1264) (1259 . 1265)) nil (25901 29544 474170 715000) 0 nil])
([nil nil ((1270 . 1272)) nil (25901 29544 474170 374000) 0 nil])
([nil nil ((#("type UserResponse struct {
	ID        uuid.UUID `json:\"id\"`
	CreatedAt time.Time `json:\"created_at\"`
	UpdatedAt time.Time `json:\"updated_at\"`
	Name      string    `json:\"name\"`
	Apikey    string    `json:\"api_key\"`
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 17 (fontified t face tree-sitter-hl-face:type) 17 18 (fontified t) 18 24 (fontified t face tree-sitter-hl-face:keyword) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 28 (fontified t) 28 30 (fontified t face tree-sitter-hl-face:property) 30 43 (fontified t) 43 47 (fontified t face tree-sitter-hl-face:type) 47 48 (fontified t) 48 59 (fontified t face tree-sitter-hl-face:string) 59 61 (fontified t) 61 70 (fontified t face tree-sitter-hl-face:property) 70 76 (fontified t) 76 80 (fontified t face tree-sitter-hl-face:type) 80 81 (fontified t) 81 100 (fontified t face tree-sitter-hl-face:string) 100 102 (fontified t) 102 111 (fontified t face tree-sitter-hl-face:property) 111 117 (fontified t) 117 121 (fontified t face tree-sitter-hl-face:type) 121 122 (fontified t) 122 141 (fontified t face tree-sitter-hl-face:string) 141 142 (fontified t) 142 143 (fontified t) 143 147 (fontified t face tree-sitter-hl-face:property) 147 153 (fontified t) 153 159 (fontified t face tree-sitter-hl-face:type) 159 160 (fontified t) 160 163 (fontified t) 163 176 (fontified t face tree-sitter-hl-face:string) 176 177 (fontified t) 177 178 (fontified t) 178 184 (fontified t face tree-sitter-hl-face:property) 184 188 (fontified t) 188 194 (fontified t face tree-sitter-hl-face:type) 194 195 (fontified t) 195 198 (fontified t) 198 204 (fontified t face tree-sitter-hl-face:string) 204 213 (fontified t face tree-sitter-hl-face:string) 213 214 (fontified t face tree-sitter-hl-face:string) 214 215 (fontified t) 215 216 (fontified t face (rainbow-delimiters-depth-1-face)) 216 217 (fontified t)) . 764) (undo-tree-id2224 . -215) (undo-tree-id2225 . -216) (undo-tree-id2226 . -176) (undo-tree-id2227 . -213) (undo-tree-id2228 . -215) (undo-tree-id2229 . -175) (undo-tree-id2230 . -215)) nil (25901 29544 474169 92000) 0 nil])
([nil nil ((#("type FeedResponse struct {
	ID        uuid.UUID `json:\"id\"`
	CreatedAt time.Time `json:\"created_at\"`
	UpdatedAt time.Time `json:\"updated_at\"`
	Name      string    `json:\"name\"`
	Url string `json:\"url\"`
	
}
" 0 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 17 (fontified t face tree-sitter-hl-face:type) 17 18 (fontified t) 18 24 (fontified t face tree-sitter-hl-face:keyword) 24 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t) 27 28 (rear-nonsticky t fontified t) 28 30 (fontified t face tree-sitter-hl-face:property) 30 43 (fontified t) 43 47 (fontified t face tree-sitter-hl-face:type) 47 48 (fontified t) 48 59 (fontified t face tree-sitter-hl-face:string) 59 60 (fontified t) 60 61 (fontified t) 61 70 (fontified t face tree-sitter-hl-face:property) 70 76 (fontified t) 76 80 (fontified t face tree-sitter-hl-face:type) 80 81 (fontified t) 81 100 (fontified t face tree-sitter-hl-face:string) 100 102 (fontified t) 102 111 (fontified t face tree-sitter-hl-face:property) 111 117 (fontified t) 117 121 (fontified t face tree-sitter-hl-face:type) 121 122 (fontified t) 122 141 (fontified t face tree-sitter-hl-face:string) 141 142 (fontified t) 142 143 (fontified t) 143 147 (fontified t face tree-sitter-hl-face:property) 147 153 (fontified t) 153 159 (fontified t face tree-sitter-hl-face:type) 159 160 (fontified t) 160 163 (fontified t) 163 176 (fontified t face tree-sitter-hl-face:string) 176 177 (fontified t) 177 178 (fontified t) 178 181 (fontified t face tree-sitter-hl-face:property) 181 182 (fontified t) 182 188 (fontified t face tree-sitter-hl-face:type) 188 189 (fontified t) 189 195 (fontified t face tree-sitter-hl-face:string) 195 200 (fontified t face tree-sitter-hl-face:string) 200 201 (fontified t face tree-sitter-hl-face:string) 201 203 (fontified t) 203 204 (fontified t) 204 205 (fontified t face (rainbow-delimiters-depth-1-face)) 205 206 (fontified t)) . 852) (undo-tree-id2214 . -204) (undo-tree-id2215 . -205) (undo-tree-id2216 . -204) (undo-tree-id2217 . 7) (undo-tree-id2218 . -204) (undo-tree-id2219 . -204) (undo-tree-id2220 . 2) (undo-tree-id2221 . -205) (undo-tree-id2222 . 181) (undo-tree-id2223 . -26) 1056) nil (25901 29544 474165 95000) 0 nil])
([nil nil ((#("	userRes := UserResponse{}
	userRes.ID = user.ID
	userRes.Name = user.Name
	userRes.CreatedAt = user.CreatedAt
	userRes.UpdatedAt = user.UpdatedAt
	userRes.Apikey = user.Apikey
" 0 1 (fontified t) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 24 (fontified t face tree-sitter-hl-face:type) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 28 (fontified t) 28 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t) 36 38 (fontified t face tree-sitter-hl-face:property) 38 39 (fontified t) 39 40 (fontified t face tree-sitter-hl-face:operator) 40 41 (fontified t) 41 45 (fontified t face tree-sitter-hl-face:variable) 45 46 (fontified t) 46 48 (fontified t face tree-sitter-hl-face:property) 48 50 (fontified t) 50 57 (fontified t face tree-sitter-hl-face:variable) 57 58 (fontified t) 58 62 (fontified t face tree-sitter-hl-face:property) 62 63 (fontified t) 63 64 (fontified t face tree-sitter-hl-face:operator) 64 65 (fontified t) 65 69 (fontified t face tree-sitter-hl-face:variable) 69 70 (fontified t) 70 74 (fontified t face tree-sitter-hl-face:property) 74 75 (fontified t) 75 76 (fontified t) 76 83 (fontified t face tree-sitter-hl-face:variable) 83 84 (fontified t) 84 93 (fontified t face tree-sitter-hl-face:property) 93 94 (fontified t) 94 95 (fontified t face tree-sitter-hl-face:operator) 95 96 (fontified t) 96 100 (fontified t face tree-sitter-hl-face:variable) 100 101 (fontified t) 101 110 (fontified t face tree-sitter-hl-face:property) 110 111 (fontified t) 111 112 (fontified t) 112 119 (fontified t face tree-sitter-hl-face:variable) 119 120 (fontified t) 120 129 (fontified t face tree-sitter-hl-face:property) 129 130 (fontified t) 130 131 (fontified t face tree-sitter-hl-face:operator) 131 132 (fontified t) 132 136 (fontified t face tree-sitter-hl-face:variable) 136 137 (fontified t) 137 146 (fontified t face tree-sitter-hl-face:property) 146 147 (fontified t) 147 148 (fontified t) 148 155 (fontified t face tree-sitter-hl-face:variable) 155 156 (fontified t) 156 162 (fontified t face tree-sitter-hl-face:property) 162 163 (fontified t) 163 164 (fontified t face tree-sitter-hl-face:operator) 164 165 (fontified t) 165 169 (fontified t face tree-sitter-hl-face:variable) 169 170 (fontified t) 170 176 (fontified t face tree-sitter-hl-face:property) 176 177 (fontified t)) . 1406) (undo-tree-id2206 . -175) (undo-tree-id2207 . -176) (undo-tree-id2208 . -175) (undo-tree-id2209 . -26) (undo-tree-id2210 . -176) (undo-tree-id2211 . -26) (undo-tree-id2212 . -26) (undo-tree-id2213 . -175) 1432) nil (25901 29544 474160 576000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1441) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1442) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -1443) (undo-tree-id2203 . 1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) 1444) nil (25901 29544 474155 166000) 0 nil])
([nil nil ((#("	userRes := UserResponse{}
	userRes.ID = user.ID
	userRes.Name = user.Name
	userRes.CreatedAt = user.CreatedAt
	userRes.UpdatedAt = user.UpdatedAt
	userRes.Apikey = user.Apikey
" 0 1 (rear-nonsticky t fontified t) 1 2 (fontified t face tree-sitter-hl-face:variable) 2 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 24 (fontified t face tree-sitter-hl-face:type) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 28 (fontified t) 28 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t) 36 38 (fontified t face tree-sitter-hl-face:property) 38 39 (fontified t) 39 40 (fontified t face tree-sitter-hl-face:operator) 40 41 (fontified t) 41 45 (fontified t face tree-sitter-hl-face:variable) 45 46 (fontified t) 46 48 (fontified t face tree-sitter-hl-face:property) 48 50 (fontified t) 50 57 (fontified t face tree-sitter-hl-face:variable) 57 58 (fontified t) 58 62 (fontified t face tree-sitter-hl-face:property) 62 63 (fontified t) 63 64 (fontified t face tree-sitter-hl-face:operator) 64 65 (fontified t) 65 69 (fontified t face tree-sitter-hl-face:variable) 69 70 (fontified t) 70 74 (fontified t face tree-sitter-hl-face:property) 74 75 (fontified t) 75 76 (fontified t) 76 83 (fontified t face tree-sitter-hl-face:variable) 83 84 (fontified t) 84 93 (fontified t face tree-sitter-hl-face:property) 93 94 (fontified t) 94 95 (fontified t face tree-sitter-hl-face:operator) 95 96 (fontified t) 96 100 (fontified t face tree-sitter-hl-face:variable) 100 101 (fontified t) 101 110 (fontified t face tree-sitter-hl-face:property) 110 111 (fontified t) 111 112 (fontified t) 112 119 (fontified t face tree-sitter-hl-face:variable) 119 120 (fontified t) 120 129 (fontified t face tree-sitter-hl-face:property) 129 130 (fontified t) 130 131 (fontified t face tree-sitter-hl-face:operator) 131 132 (fontified t) 132 136 (fontified t face tree-sitter-hl-face:variable) 136 137 (fontified t) 137 146 (fontified t face tree-sitter-hl-face:property) 146 147 (fontified t) 147 148 (fontified t) 148 155 (fontified t face tree-sitter-hl-face:variable) 155 156 (fontified t) 156 162 (fontified t face tree-sitter-hl-face:property) 162 163 (fontified t) 163 164 (fontified t face tree-sitter-hl-face:operator) 164 165 (fontified t) 165 167 (fontified t face tree-sitter-hl-face:variable) 167 169 (fontified t face tree-sitter-hl-face:variable) 169 170 (fontified t) 170 176 (fontified t face tree-sitter-hl-face:property) 176 177 (fontified t)) . 1984) (undo-tree-id2271 . -175) (undo-tree-id2272 . -176) (undo-tree-id2273 . -175) (undo-tree-id2274 . -26) (undo-tree-id2275 . -177) (undo-tree-id2276 . -177) (undo-tree-id2277 . -177) (undo-tree-id2278 . -177) (undo-tree-id2279 . -177) (undo-tree-id2280 . -177) (undo-tree-id2281 . -177) (undo-tree-id2282 . -177) (undo-tree-id2283 . -177) (undo-tree-id2284 . -26) (undo-tree-id2285 . -12) (undo-tree-id2286 . -24) (undo-tree-id2287 . -26) (undo-tree-id2288 . -175) 2010 (t 25901 29544 582158 965000)) nil (25901 29552 924729 914000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2019) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2020) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -2021) (undo-tree-id2266 . 1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) 2022) nil (25901 29552 924722 811000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 2648) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (t 25901 29552 940123 580000)) nil (25901 29562 160284 90000) 0 nil])
([nil nil ((2560 . 2562) (t 25901 29562 267084 294000)) nil (25901 29770 242091 177000) 0 nil])
([nil nil ((2562 . 2570)) nil (25901 29770 242090 927000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2574 2585 nil nil nil t nil)) nil 57 nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil nil)) (2566 . 2583) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 2566) (2566 . 2588) (#("Prin" 0 4 (fontified nil)) . 2566) (2566 . 2570) (#("Println" 0 7 (fontified nil)) . -2566) (2566 . 2573) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -2566) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) 2570) nil (25901 29770 242090 115000) 0 nil])
([nil nil ((2575 . 2578) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 2575) (undo-tree-id2293 . -8) (undo-tree-id2294 . -5) (undo-tree-id2295 . -6) (2574 . 2575)) nil (25901 29770 242088 562000) 0 nil])
([nil nil ((apply yas--snippet-revive 2578 2585 #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 58 nil nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil)) (2578 . 2585) (#("Error()" 0 7 (fontified nil)) . 2578) (undo-tree-id2291 . -7) (2578 . 2585) (#("Error" 0 5 (fontified nil)) . -2578) (undo-tree-id2292 . -5) (2578 . 2583)) nil (25901 29770 242086 47000) 0 nil])
([nil nil ((apply yas--snippet-revive 2566 2586 #s(yas--snippet nil (#s(yas--field 1 2574 2585 nil nil nil t nil)) nil 57 nil #s(yas--field 1 2574 2585 nil nil nil t nil) nil nil))) nil (25901 29770 242074 386000) 0 nil])
([nil nil ((3778 . 3780) (t 25901 29770 257254 786000)) nil (25901 29860 562254 805000) 0 nil])
([nil nil ((3780 . 3783)) nil (25901 29860 562254 475000) 0 nil])
([nil nil ((apply yas--snippet-revive 3780 3788 #s(yas--snippet nil nil nil 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 59 nil nil nil nil)) (3780 . 3788) (#("v1Router" 0 8 (fontified nil)) . 3780) (3780 . 3788) (#("v1R" 0 3 (fontified nil)) . 3780) (3780 . 3783) (#("v1Router" 0 8 (fontified nil)) . -3780) (3780 . 3788) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -3780) (undo-tree-id2314 . -3) (undo-tree-id2315 . -3) 3783) nil (25901 29860 562253 824000) 0 nil])
([nil nil ((3788 . 3792)) nil (25901 29860 562252 571000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3793 3801 nil nil nil t #s(yas--field 2 3803 3821 nil nil nil t nil)) #s(yas--field 2 3803 3821 nil nil nil t nil)) nil 60 nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil nil)) (3789 . 3836) (#("Get(${1:pattern string}, ${2:handlerFn http.HandlerFunc})" 0 57 (fontified nil)) . 3789) (3789 . 3846) (#("Get" 0 3 (fontified nil)) . 3789) (3789 . 3792) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -3789) (undo-tree-id2312 . -3) (undo-tree-id2313 . -3) 3792) nil (25901 29860 562252 40000) 0 nil])
([nil nil ((3794 . 3800) (3793 . 3795) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -3793) (undo-tree-id2310 . -1) (#("pattern string" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 14 (fontified nil face tree-sitter-hl-face:variable)) . 3794) (undo-tree-id2311 . -14) (3793 . 3794)) nil (25901 29860 562250 487000) 0 nil])
([nil nil ((3804 . 3808) (#("handlerFn http.HandlerFunc" 0 9 (fontified nil face tree-sitter-hl-face:variable) 9 10 (fontified nil) 10 14 (fontified nil face tree-sitter-hl-face:variable) 14 15 (fontified nil) 15 26 (fontified nil face tree-sitter-hl-face:property)) . 3804) (undo-tree-id2309 . -26) (3803 . 3804)) nil (25901 29860 562249 125000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3806) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (#("C" 0 1 (fontified t face tree-sitter-hl-face:property)) . -3807) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) 3808) nil (25901 29860 562247 582000) 0 nil])
([nil nil ((3806 . 3807)) nil (25901 29860 562244 727000) 0 nil])
([nil nil ((apply yas--snippet-revive 3803 3821 #s(yas--snippet nil nil nil 61 nil nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 61 nil nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil)) (3803 . 3821) (#("apiCfg.GetAllFeeds" 0 18 (fontified nil)) . 3803) (undo-tree-id2298 . -18) (3803 . 3821) (#("apiC" 0 4 (fontified nil)) . 3803) (undo-tree-id2299 . -4) (3803 . 3807) (#("apiCfg.GetAllFeeds" 0 18 (fontified nil)) . -3803) (undo-tree-id2300 . -18) (3803 . 3821) (#("apiC" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -3803) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -4) 3807) nil (25901 29860 562243 695000) 0 nil])
([nil nil ((apply yas--snippet-revive 3789 3822 #s(yas--snippet nil (#s(yas--field 1 3793 3801 nil nil nil t #s(yas--field 2 3803 3821 nil nil nil t nil)) #s(yas--field 2 3803 3821 nil nil nil t nil)) nil 60 nil #s(yas--field 2 3803 3821 nil nil nil t nil) nil nil))) nil (25901 29860 562195 434000) 0 nil])
([nil nil ((#("	fmt.Println(err.Error())
" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 12 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 16 (fontified t face tree-sitter-hl-face:variable) 16 17 (fontified t) 17 22 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 22 23 (fontified t face (rainbow-delimiters-depth-3-face)) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t)) . 2561) (undo-tree-id2316 . -18) (undo-tree-id2317 . -25) (undo-tree-id2318 . -18) (undo-tree-id2319 . -17) (undo-tree-id2320 . -22) 2579 (t 25901 29860 669917 74000)) nil (25901 29901 561639 313000) 0 nil])
([nil nil ((852 . 6447) (#("
func (a *apiConfig) createUser(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	userReq := CreateUserRequest{}
	err := decoder.Decode(&userReq)
	if err != nil {
		utils.RespondWithError(w, 500, \"Something went wrong\")
		return
	}
	dbObj := database.CreateUserParams{}
	dbObj.ID = uuid.New()
	timeStamp := time.Now()
	dbObj.CreatedAt = timeStamp
	dbObj.UpdatedAt = timeStamp
	dbObj.Name = userReq.Name

	user, err := a.DB.CreateUser(a.ctx, dbObj)
	if err != nil {
		utils.RespondWithError(w, 400, \"Bad Request\")
		return
	}
	utils.RespondWithJSON(w, 201, user)
}

type authedHandler func(http.ResponseWriter, *http.Request, database.User)

func (a *apiConfig) authenticate(handler authedHandler) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		bearerToken := r.Header.Get(\"Authorization\")
		apikey := strings.Split(bearerToken, \" \")[1]
		user, err := a.DB.GetUserByApiKey(a.ctx, apikey)
		if err != nil {
			utils.RespondWithError(w, 401, \"Unauthorized\")
		} else {
			handler(w, r, user)
		}
	}
}

func GetUser(w http.ResponseWriter, r *http.Request, user database.User) {
	utils.RespondWithJSON(w, 200, user)
}

func (a *apiConfig) CreateFeed(w http.ResponseWriter, r *http.Request, user database.User) {

	decoder := json.NewDecoder(r.Body)
	feedReq := CreateFeedRequest{}
	err := decoder.Decode(&feedReq)
	if err != nil {
		utils.RespondWithError(w, 400, \"Bad Request\")
		return
	}
	dbObj := database.CreateFeedParams{}
	dbObj.ID = uuid.New()
	timeStamp := time.Now()
	dbObj.CreatedAt = timeStamp
	dbObj.UpdatedAt = timeStamp
	dbObj.Name = feedReq.Name
	dbObj.UserID = user.ID
	dbObj.Url = feedReq.Url
  feed, err := a.DB.CreateFeed(a.ctx, dbObj)
	if err != nil {
		utils.RespondWithError(w, 500, \"Internal Server Error\")
		return
	}
	utils.RespondWithJSON(w, 201, feed)
}

func (a *apiConfig) GetAllFeeds(w http.ResponseWriter, r *http.Request) {
	feeds, err := a.DB.GetAllFeeds(a.ctx);
	if err != nil {
		utils.RespondWithError(w, 500, \"Internal Server Error\")
	} else {
	  utils.RespondWithJSON(w, 200, feeds)
	}
}

func main() {
	godotenv.Load()
	port := os.Getenv(\"PORT\")

	dbURL := os.Getenv(\"CONN\")
	db, derr := sql.Open(\"postgres\", dbURL)
	if derr != nil {
		fmt.Println(derr.Error())
		return
	}

	dbQueries := database.New(db)
	apiCfg := apiConfig{}
	apiCfg.DB = dbQueries
	apiCfg.ctx = context.Background()

	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins: []string{\"*\"},
		AllowedMethods: []string{\"GET, POST, OPTIONS, PUT, DELETE\"},
		AllowedHeaders: []string{\"*\"},
	}))

	v1Router := chi.NewRouter()
	r.Mount(\"/v1\", v1Router)

	v1Router.Get(\"/readiness\", readinessHandler)
	v1Router.Get(\"/err\", errorHandler)

	v1Router.Post(\"/users\", apiCfg.createUser)
	v1Router.Get(\"/users\", apiCfg.authenticate(GetUser))

	v1Router.Post(\"/feeds\", apiCfg.authenticate(apiCfg.CreateFeed))
	v1Router.Get(\"/feeds\", apiCfg.GetAllFeeds)" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 8 9 (fontified t) 9 10 (face tree-sitter-hl-face:operator fontified t) 10 19 (face tree-sitter-hl-face:type fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (fontified t) 21 31 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 33 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 33 39 (fontified t) 39 53 (face tree-sitter-hl-face:type fontified t) 53 55 (fontified t) 55 56 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 56 57 (fontified t) 57 58 (face tree-sitter-hl-face:operator fontified t) 58 63 (fontified t) 63 70 (face tree-sitter-hl-face:type fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-1-face) fontified t) 73 75 (fontified t) 75 82 (face tree-sitter-hl-face:variable fontified t) 82 83 (fontified t) 83 85 (face tree-sitter-hl-face:operator fontified t) 85 86 (fontified t) 86 90 (face tree-sitter-hl-face:variable fontified t) 90 91 (fontified t) 91 101 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 101 102 (face (rainbow-delimiters-depth-2-face) fontified t) 102 103 (face tree-sitter-hl-face:variable fontified t) 103 104 (fontified t) 104 108 (face tree-sitter-hl-face:property fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 111 (fontified t) 111 118 (face tree-sitter-hl-face:variable fontified t) 118 119 (fontified t) 119 121 (face tree-sitter-hl-face:operator fontified t) 121 122 (fontified t) 122 139 (face tree-sitter-hl-face:type fontified t) 139 140 (face (rainbow-delimiters-depth-2-face) fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 143 (fontified t) 143 146 (face tree-sitter-hl-face:variable fontified t) 146 147 (fontified t) 147 149 (face tree-sitter-hl-face:operator fontified t) 149 150 (fontified t) 150 157 (face tree-sitter-hl-face:variable fontified t) 157 158 (fontified t) 158 164 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 164 165 (face (rainbow-delimiters-depth-2-face) fontified t) 165 166 (face tree-sitter-hl-face:operator fontified t) 166 173 (face tree-sitter-hl-face:variable fontified t) 173 174 (face (rainbow-delimiters-depth-2-face) fontified t) 174 176 (fontified t) 176 178 (face tree-sitter-hl-face:keyword fontified t) 178 179 (fontified t) 179 182 (face tree-sitter-hl-face:variable fontified t) 182 183 (fontified t) 183 185 (face tree-sitter-hl-face:operator fontified t) 185 186 (fontified t) 186 189 (face tree-sitter-hl-face:constant\.builtin fontified t) 189 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-2-face) fontified t) 191 194 (fontified t) 194 199 (face tree-sitter-hl-face:variable fontified t) 199 200 (fontified t) 200 216 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 216 217 (face (rainbow-delimiters-depth-3-face) fontified t) 217 218 (face tree-sitter-hl-face:variable fontified t) 218 220 (fontified t) 220 223 (face tree-sitter-hl-face:number fontified t) 223 225 (fontified t) 225 247 (face tree-sitter-hl-face:string fontified t) 247 248 (face (rainbow-delimiters-depth-3-face) fontified t) 248 251 (fontified t) 251 257 (face tree-sitter-hl-face:keyword fontified t) 257 259 (fontified t) 259 260 (face (rainbow-delimiters-depth-2-face) fontified t) 260 262 (fontified t) 262 267 (face tree-sitter-hl-face:variable fontified t) 267 268 (fontified t) 268 270 (face tree-sitter-hl-face:operator fontified t) 270 280 (fontified t) 280 296 (face tree-sitter-hl-face:type fontified t) 296 297 (face (rainbow-delimiters-depth-2-face) fontified t) 297 298 (face (rainbow-delimiters-depth-2-face) fontified t) 298 300 (fontified t) 300 305 (face tree-sitter-hl-face:variable fontified t) 305 306 (fontified t) 306 308 (face tree-sitter-hl-face:property fontified t) 308 309 (fontified t) 309 310 (face tree-sitter-hl-face:operator fontified t) 310 311 (fontified t) 311 315 (face tree-sitter-hl-face:variable fontified t) 315 316 (fontified t) 316 319 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 319 320 (face (rainbow-delimiters-depth-2-face) fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 323 (fontified t) 323 332 (face tree-sitter-hl-face:variable fontified t) 332 333 (fontified t) 333 335 (face tree-sitter-hl-face:operator fontified t) 335 336 (fontified t) 336 340 (face tree-sitter-hl-face:variable fontified t) 340 341 (fontified t) 341 344 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 344 345 (face (rainbow-delimiters-depth-2-face) fontified t) 345 346 (face (rainbow-delimiters-depth-2-face) fontified t) 346 348 (fontified t) 348 353 (face tree-sitter-hl-face:variable fontified t) 353 354 (fontified t) 354 363 (face tree-sitter-hl-face:property fontified t) 363 364 (fontified t) 364 365 (face tree-sitter-hl-face:operator fontified t) 365 366 (fontified t) 366 375 (face tree-sitter-hl-face:variable fontified t) 375 377 (fontified t) 377 382 (face tree-sitter-hl-face:variable fontified t) 382 383 (fontified t) 383 392 (face tree-sitter-hl-face:property fontified t) 392 393 (fontified t) 393 394 (face tree-sitter-hl-face:operator fontified t) 394 395 (fontified t) 395 404 (face tree-sitter-hl-face:variable fontified t) 404 406 (fontified t) 406 411 (face tree-sitter-hl-face:variable fontified t) 411 412 (fontified t) 412 416 (face tree-sitter-hl-face:property fontified t) 416 417 (fontified t) 417 418 (face tree-sitter-hl-face:operator fontified t) 418 419 (fontified t) 419 426 (face tree-sitter-hl-face:variable fontified t) 426 427 (fontified t) 427 431 (face tree-sitter-hl-face:property fontified t) 431 434 (fontified t) 434 438 (face tree-sitter-hl-face:variable fontified t) 438 440 (fontified t) 440 443 (face tree-sitter-hl-face:variable fontified t) 443 444 (fontified t) 444 446 (face tree-sitter-hl-face:operator fontified t) 446 447 (fontified t) 447 448 (face tree-sitter-hl-face:variable fontified t) 448 449 (fontified t) 449 451 (face tree-sitter-hl-face:property fontified t) 451 452 (fontified t) 452 462 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 462 463 (face (rainbow-delimiters-depth-2-face) fontified t) 463 464 (face tree-sitter-hl-face:variable fontified t) 464 465 (fontified t) 465 468 (face tree-sitter-hl-face:property fontified t) 468 470 (fontified t) 470 475 (face tree-sitter-hl-face:variable fontified t) 475 476 (face (rainbow-delimiters-depth-2-face) fontified t) 476 478 (fontified t) 478 480 (face tree-sitter-hl-face:keyword fontified t) 480 481 (fontified t) 481 484 (face tree-sitter-hl-face:variable fontified t) 484 485 (fontified t) 485 487 (face tree-sitter-hl-face:operator fontified t) 487 488 (fontified t) 488 491 (face tree-sitter-hl-face:constant\.builtin fontified t) 491 492 (fontified t) 492 493 (face (rainbow-delimiters-depth-2-face) fontified t) 493 496 (fontified t) 496 501 (face tree-sitter-hl-face:variable fontified t) 501 502 (fontified t) 502 518 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 518 519 (face (rainbow-delimiters-depth-3-face) fontified t) 519 520 (face tree-sitter-hl-face:variable fontified t) 520 522 (fontified t) 522 525 (face tree-sitter-hl-face:number fontified t) 525 527 (fontified t) 527 540 (face tree-sitter-hl-face:string fontified t) 540 541 (face (rainbow-delimiters-depth-3-face) fontified t) 541 544 (fontified t) 544 550 (face tree-sitter-hl-face:keyword fontified t) 550 552 (fontified t) 552 553 (face (rainbow-delimiters-depth-2-face) fontified t) 553 555 (fontified t) 555 560 (face tree-sitter-hl-face:variable fontified t) 560 561 (fontified t) 561 576 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 576 577 (face (rainbow-delimiters-depth-2-face) fontified t) 577 578 (face tree-sitter-hl-face:variable fontified t) 578 580 (fontified t) 580 583 (face tree-sitter-hl-face:number fontified t) 583 585 (fontified t) 585 589 (face tree-sitter-hl-face:variable fontified t) 589 590 (face (rainbow-delimiters-depth-2-face) fontified t) 590 591 (fontified t) 591 592 (face (rainbow-delimiters-depth-1-face) fontified t) 592 594 (fontified t) 594 598 (face tree-sitter-hl-face:keyword fontified t) 598 599 (fontified t) 599 612 (face tree-sitter-hl-face:type fontified t) 612 613 (fontified t) 613 617 (face tree-sitter-hl-face:keyword fontified t) 617 618 (face (rainbow-delimiters-depth-1-face) fontified t) 618 623 (fontified t) 623 637 (face tree-sitter-hl-face:type fontified t) 637 639 (fontified t) 639 640 (face tree-sitter-hl-face:operator fontified t) 640 645 (fontified t) 645 649 (face tree-sitter-hl-face:type fontified t) 649 652 (face tree-sitter-hl-face:type fontified nil) 652 1057 (fontified nil) 1057 1061 (face tree-sitter-hl-face:keyword fontified t) 1061 1062 (fontified t) 1062 1069 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 1069 1070 (face (rainbow-delimiters-depth-1-face) fontified t) 1070 1071 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1071 1077 (fontified t) 1077 1091 (face tree-sitter-hl-face:type fontified t) 1091 1093 (fontified t) 1093 1094 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1094 1095 (fontified t) 1095 1096 (face tree-sitter-hl-face:operator fontified t) 1096 1101 (fontified t) 1101 1108 (face tree-sitter-hl-face:type fontified t) 1108 1110 (fontified t) 1110 1114 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1114 1124 (fontified t) 1124 1128 (face tree-sitter-hl-face:type fontified t) 1128 1129 (face (rainbow-delimiters-depth-1-face) fontified t) 1129 1130 (fontified t) 1130 1131 (face (rainbow-delimiters-depth-1-face) fontified t) 1131 1133 (fontified t) 1133 1138 (face tree-sitter-hl-face:variable fontified t) 1138 1139 (fontified t) 1139 1154 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1154 1155 (face (rainbow-delimiters-depth-2-face) fontified t) 1155 1156 (face tree-sitter-hl-face:variable fontified t) 1156 1158 (fontified t) 1158 1161 (face tree-sitter-hl-face:number fontified t) 1161 1163 (fontified t) 1163 1167 (face tree-sitter-hl-face:variable fontified t) 1167 1168 (face (rainbow-delimiters-depth-2-face) fontified t) 1168 1169 (fontified t) 1169 1170 (face (rainbow-delimiters-depth-1-face) fontified t) 1170 1172 (fontified t) 1172 1176 (face tree-sitter-hl-face:keyword fontified t) 1176 1177 (fontified t) 1177 1178 (face (rainbow-delimiters-depth-1-face) fontified t) 1178 1179 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1179 1180 (fontified t) 1180 1181 (face tree-sitter-hl-face:operator fontified t) 1181 1190 (face tree-sitter-hl-face:type fontified t) 1190 1191 (face (rainbow-delimiters-depth-1-face) fontified t) 1191 1192 (fontified t) 1192 1202 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 1202 1203 (face (rainbow-delimiters-depth-1-face) fontified t) 1203 1204 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1204 1210 (fontified t) 1210 1224 (face tree-sitter-hl-face:type fontified t) 1224 1226 (fontified t) 1226 1227 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1227 1228 (fontified t) 1228 1229 (face tree-sitter-hl-face:operator fontified t) 1229 1234 (fontified t) 1234 1241 (face tree-sitter-hl-face:type fontified t) 1241 1243 (fontified t) 1243 1247 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1247 1257 (fontified t) 1257 1261 (face tree-sitter-hl-face:type fontified t) 1261 1262 (face (rainbow-delimiters-depth-1-face) fontified t) 1262 1263 (fontified t) 1263 1264 (face (rainbow-delimiters-depth-1-face) fontified t) 1264 1267 (fontified t) 1267 1274 (face tree-sitter-hl-face:variable fontified t) 1274 1275 (fontified t) 1275 1277 (face tree-sitter-hl-face:operator fontified t) 1277 1278 (fontified t) 1278 1282 (face tree-sitter-hl-face:variable fontified t) 1282 1283 (fontified t) 1283 1293 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1293 1294 (face (rainbow-delimiters-depth-2-face) fontified t) 1294 1295 (face tree-sitter-hl-face:variable fontified t) 1295 1296 (fontified t) 1296 1300 (face tree-sitter-hl-face:property fontified t) 1300 1301 (face (rainbow-delimiters-depth-2-face) fontified t) 1301 1303 (fontified t) 1303 1310 (face tree-sitter-hl-face:variable fontified t) 1310 1311 (fontified t) 1311 1313 (face tree-sitter-hl-face:operator fontified t) 1313 1314 (fontified t) 1314 1331 (face tree-sitter-hl-face:type fontified t) 1331 1332 (face (rainbow-delimiters-depth-2-face) fontified t) 1332 1333 (face (rainbow-delimiters-depth-2-face) fontified t) 1333 1335 (fontified t) 1335 1338 (face tree-sitter-hl-face:variable fontified t) 1338 1339 (fontified t) 1339 1341 (face tree-sitter-hl-face:operator fontified t) 1341 1342 (fontified t) 1342 1349 (face tree-sitter-hl-face:variable fontified t) 1349 1350 (fontified t) 1350 1356 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1356 1357 (face (rainbow-delimiters-depth-2-face) fontified t) 1357 1358 (face tree-sitter-hl-face:operator fontified t) 1358 1365 (face tree-sitter-hl-face:variable fontified t) 1365 1366 (face (rainbow-delimiters-depth-2-face) fontified t) 1366 1368 (fontified t) 1368 1370 (face tree-sitter-hl-face:keyword fontified t) 1370 1371 (fontified t) 1371 1374 (face tree-sitter-hl-face:variable fontified t) 1374 1375 (fontified t) 1375 1377 (face tree-sitter-hl-face:operator fontified t) 1377 1378 (fontified t) 1378 1381 (face tree-sitter-hl-face:constant\.builtin fontified t) 1381 1382 (fontified t) 1382 1383 (face (rainbow-delimiters-depth-2-face) fontified t) 1383 1386 (fontified t) 1386 1391 (face tree-sitter-hl-face:variable fontified t) 1391 1392 (fontified t) 1392 1408 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1408 1409 (face (rainbow-delimiters-depth-3-face) fontified t) 1409 1410 (face tree-sitter-hl-face:variable fontified t) 1410 1412 (fontified t) 1412 1415 (face tree-sitter-hl-face:number fontified t) 1415 1417 (fontified t) 1417 1430 (face tree-sitter-hl-face:string fontified t) 1430 1431 (face (rainbow-delimiters-depth-3-face) fontified t) 1431 1434 (fontified t) 1434 1440 (face tree-sitter-hl-face:keyword fontified t) 1440 1441 (fontified t) 1441 1442 (fontified t) 1442 1443 (face (rainbow-delimiters-depth-2-face) fontified t) 1443 1444 (fontified t) 1444 1445 (fontified t) 1445 1450 (face tree-sitter-hl-face:variable fontified t) 1450 1451 (fontified t) 1451 1453 (face tree-sitter-hl-face:operator fontified t) 1453 1463 (fontified t) 1463 1479 (face tree-sitter-hl-face:type fontified t) 1479 1480 (face (rainbow-delimiters-depth-2-face) fontified t) 1480 1481 (face (rainbow-delimiters-depth-2-face) fontified t) 1481 1483 (fontified t) 1483 1488 (face tree-sitter-hl-face:variable fontified t) 1488 1489 (fontified t) 1489 1491 (face tree-sitter-hl-face:property fontified t) 1491 1492 (fontified t) 1492 1493 (face tree-sitter-hl-face:operator fontified t) 1493 1494 (fontified t) 1494 1498 (face tree-sitter-hl-face:variable fontified t) 1498 1499 (fontified t) 1499 1502 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1502 1503 (face (rainbow-delimiters-depth-2-face) fontified t) 1503 1504 (face (rainbow-delimiters-depth-2-face) fontified t) 1504 1506 (fontified t) 1506 1515 (face tree-sitter-hl-face:variable fontified t) 1515 1516 (fontified t) 1516 1518 (face tree-sitter-hl-face:operator fontified t) 1518 1519 (fontified t) 1519 1523 (face tree-sitter-hl-face:variable fontified t) 1523 1524 (fontified t) 1524 1527 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1527 1528 (face (rainbow-delimiters-depth-2-face) fontified t) 1528 1529 (face (rainbow-delimiters-depth-2-face) fontified t) 1529 1531 (fontified t) 1531 1536 (face tree-sitter-hl-face:variable fontified t) 1536 1537 (fontified t) 1537 1546 (face tree-sitter-hl-face:property fontified t) 1546 1547 (fontified t) 1547 1548 (face tree-sitter-hl-face:operator fontified t) 1548 1549 (fontified t) 1549 1558 (face tree-sitter-hl-face:variable fontified t) 1558 1560 (fontified t) 1560 1565 (face tree-sitter-hl-face:variable fontified t) 1565 1566 (fontified t) 1566 1575 (face tree-sitter-hl-face:property fontified t) 1575 1576 (fontified t) 1576 1577 (face tree-sitter-hl-face:operator fontified t) 1577 1578 (fontified t) 1578 1587 (face tree-sitter-hl-face:variable fontified t) 1587 1589 (fontified t) 1589 1594 (face tree-sitter-hl-face:variable fontified t) 1594 1595 (fontified t) 1595 1599 (face tree-sitter-hl-face:property fontified t) 1599 1600 (fontified t) 1600 1601 (face tree-sitter-hl-face:operator fontified t) 1601 1602 (fontified t) 1602 1609 (face tree-sitter-hl-face:variable fontified t) 1609 1610 (fontified t) 1610 1614 (face tree-sitter-hl-face:property fontified t) 1614 1616 (fontified t) 1616 1621 (face tree-sitter-hl-face:variable fontified t) 1621 1622 (fontified t) 1622 1628 (face tree-sitter-hl-face:property fontified t) 1628 1629 (fontified t) 1629 1630 (face tree-sitter-hl-face:operator fontified t) 1630 1631 (fontified t) 1631 1635 (face tree-sitter-hl-face:variable fontified t) 1635 1636 (fontified t) 1636 1638 (face tree-sitter-hl-face:property fontified t) 1638 1640 (fontified t) 1640 1645 (face tree-sitter-hl-face:variable fontified t) 1645 1646 (fontified t) 1646 1649 (face tree-sitter-hl-face:property fontified t) 1649 1650 (fontified t) 1650 1651 (face tree-sitter-hl-face:operator fontified t) 1651 1652 (fontified t) 1652 1659 (face tree-sitter-hl-face:variable fontified t) 1659 1660 (fontified t) 1660 1663 (face tree-sitter-hl-face:property fontified t) 1663 1666 (fontified t) 1666 1670 (face tree-sitter-hl-face:variable fontified t) 1670 1672 (fontified t) 1672 1675 (face tree-sitter-hl-face:variable fontified t) 1675 1676 (fontified t) 1676 1678 (face tree-sitter-hl-face:operator fontified t) 1678 1679 (fontified t) 1679 1680 (face tree-sitter-hl-face:variable fontified t) 1680 1681 (fontified t) 1681 1683 (face tree-sitter-hl-face:property fontified t) 1683 1684 (fontified t) 1684 1694 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1694 1695 (face (rainbow-delimiters-depth-2-face) fontified t) 1695 1696 (face tree-sitter-hl-face:variable fontified t) 1696 1697 (fontified t) 1697 1700 (face tree-sitter-hl-face:property fontified t) 1700 1702 (fontified t) 1702 1707 (face tree-sitter-hl-face:variable fontified t) 1707 1708 (face (rainbow-delimiters-depth-2-face) fontified t) 1708 1710 (fontified t) 1710 1712 (face tree-sitter-hl-face:keyword fontified t) 1712 1713 (fontified t) 1713 1716 (face tree-sitter-hl-face:variable fontified t) 1716 1717 (fontified t) 1717 1719 (face tree-sitter-hl-face:operator fontified t) 1719 1720 (fontified t) 1720 1723 (face tree-sitter-hl-face:constant\.builtin fontified t) 1723 1724 (fontified t) 1724 1725 (face (rainbow-delimiters-depth-2-face) fontified t) 1725 1728 (fontified t) 1728 1733 (face tree-sitter-hl-face:variable fontified t) 1733 1734 (fontified t) 1734 1750 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1750 1751 (face (rainbow-delimiters-depth-3-face) fontified t) 1751 1752 (face tree-sitter-hl-face:variable fontified t) 1752 1754 (fontified t) 1754 1757 (face tree-sitter-hl-face:number fontified t) 1757 1759 (fontified t) 1759 1782 (face tree-sitter-hl-face:string fontified t) 1782 1783 (face (rainbow-delimiters-depth-3-face) fontified t) 1783 1786 (fontified t) 1786 1792 (face tree-sitter-hl-face:keyword fontified t) 1792 1794 (fontified t) 1794 1795 (face (rainbow-delimiters-depth-2-face) fontified t) 1795 1797 (fontified t) 1797 1802 (face tree-sitter-hl-face:variable fontified t) 1802 1803 (fontified t) 1803 1818 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1818 1819 (face (rainbow-delimiters-depth-2-face) fontified t) 1819 1820 (face tree-sitter-hl-face:variable fontified t) 1820 1822 (fontified t) 1822 1825 (face tree-sitter-hl-face:number fontified t) 1825 1827 (fontified t) 1827 1831 (face tree-sitter-hl-face:variable fontified t) 1831 1832 (face (rainbow-delimiters-depth-2-face) fontified t) 1832 1833 (fontified t) 1833 1834 (face (rainbow-delimiters-depth-1-face) fontified t) 1834 1836 (fontified t) 1836 1840 (face tree-sitter-hl-face:keyword fontified t) 1840 1841 (fontified t) 1841 1842 (face (rainbow-delimiters-depth-1-face) fontified t) 1842 1843 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1843 1844 (fontified t) 1844 1845 (face tree-sitter-hl-face:operator fontified t) 1845 1854 (face tree-sitter-hl-face:type fontified t) 1854 1855 (face (rainbow-delimiters-depth-1-face) fontified t) 1855 1856 (fontified t) 1856 1867 (face (tree-sitter-hl-face:function\.method tree-sitter-hl-face:property) fontified t) 1867 1868 (face (rainbow-delimiters-depth-1-face) fontified t) 1868 1869 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1869 1875 (fontified t) 1875 1889 (face tree-sitter-hl-face:type fontified t) 1889 1891 (fontified t) 1891 1892 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 1892 1893 (fontified t) 1893 1894 (face tree-sitter-hl-face:operator fontified t) 1894 1899 (fontified t) 1899 1906 (face tree-sitter-hl-face:type fontified t) 1906 1907 (face (rainbow-delimiters-depth-1-face) fontified t) 1907 1908 (fontified t) 1908 1909 (face (rainbow-delimiters-depth-1-face) fontified t) 1909 1911 (fontified t) 1911 1916 (face tree-sitter-hl-face:variable fontified t) 1916 1918 (fontified t) 1918 1921 (face tree-sitter-hl-face:variable fontified t) 1921 1922 (fontified t) 1922 1924 (face tree-sitter-hl-face:operator fontified t) 1924 1925 (fontified t) 1925 1926 (face tree-sitter-hl-face:variable fontified t) 1926 1927 (fontified t) 1927 1929 (face tree-sitter-hl-face:property fontified t) 1929 1930 (fontified t) 1930 1941 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1941 1942 (face (rainbow-delimiters-depth-2-face) fontified t) 1942 1943 (face tree-sitter-hl-face:variable fontified t) 1943 1944 (fontified t) 1944 1947 (face tree-sitter-hl-face:property fontified t) 1947 1948 (face (rainbow-delimiters-depth-2-face) fontified t) 1948 1951 (fontified t) 1951 1953 (face tree-sitter-hl-face:keyword fontified t) 1953 1954 (fontified t) 1954 1957 (face tree-sitter-hl-face:variable fontified t) 1957 1958 (fontified t) 1958 1960 (face tree-sitter-hl-face:operator fontified t) 1960 1961 (fontified t) 1961 1964 (face tree-sitter-hl-face:constant\.builtin fontified t) 1964 1965 (fontified t) 1965 1966 (face (rainbow-delimiters-depth-2-face) fontified t) 1966 1969 (fontified t) 1969 1974 (face tree-sitter-hl-face:variable fontified t) 1974 1975 (fontified t) 1975 1991 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 1991 1992 (face (rainbow-delimiters-depth-3-face) fontified t) 1992 1993 (face tree-sitter-hl-face:variable fontified t) 1993 1995 (fontified t) 1995 1998 (face tree-sitter-hl-face:number fontified t) 1998 2000 (fontified t) 2000 2023 (face tree-sitter-hl-face:string fontified t) 2023 2024 (face (rainbow-delimiters-depth-3-face) fontified t) 2024 2026 (fontified t) 2026 2027 (face (rainbow-delimiters-depth-2-face) fontified t) 2027 2028 (fontified t) 2028 2032 (face tree-sitter-hl-face:keyword fontified t) 2032 2033 (fontified t) 2033 2034 (face (rainbow-delimiters-depth-2-face) fontified t) 2034 2038 (fontified t) 2038 2043 (face tree-sitter-hl-face:variable fontified t) 2043 2044 (fontified t) 2044 2059 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2059 2060 (face (rainbow-delimiters-depth-3-face) fontified t) 2060 2061 (face tree-sitter-hl-face:variable fontified t) 2061 2063 (fontified t) 2063 2066 (face tree-sitter-hl-face:number fontified t) 2066 2068 (fontified t) 2068 2073 (face tree-sitter-hl-face:variable fontified t) 2073 2074 (face (rainbow-delimiters-depth-3-face) fontified t) 2074 2076 (fontified t) 2076 2077 (face (rainbow-delimiters-depth-2-face) fontified t) 2077 2078 (fontified t) 2078 2079 (face (rainbow-delimiters-depth-1-face) fontified t) 2079 2081 (fontified t) 2081 2085 (face tree-sitter-hl-face:keyword fontified t) 2085 2086 (fontified t) 2086 2090 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 2090 2091 (face (rainbow-delimiters-depth-1-face) fontified t) 2091 2092 (face (rainbow-delimiters-depth-1-face) fontified t) 2092 2093 (fontified t) 2093 2094 (face (rainbow-delimiters-depth-1-face) fontified t) 2094 2096 (fontified t) 2096 2104 (face tree-sitter-hl-face:variable fontified t) 2104 2105 (fontified t) 2105 2109 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2109 2110 (face (rainbow-delimiters-depth-2-face) fontified t) 2110 2111 (face (rainbow-delimiters-depth-2-face) fontified t) 2111 2113 (fontified t) 2113 2117 (face tree-sitter-hl-face:variable fontified t) 2117 2118 (fontified t) 2118 2120 (face tree-sitter-hl-face:operator fontified t) 2120 2121 (fontified t) 2121 2123 (face tree-sitter-hl-face:variable fontified t) 2123 2124 (fontified t) 2124 2130 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2130 2131 (face (rainbow-delimiters-depth-2-face) fontified t) 2131 2137 (face tree-sitter-hl-face:string fontified t) 2137 2138 (face (rainbow-delimiters-depth-2-face) fontified t) 2138 2141 (fontified t) 2141 2146 (face tree-sitter-hl-face:variable fontified t) 2146 2147 (fontified t) 2147 2149 (face tree-sitter-hl-face:operator fontified t) 2149 2150 (fontified t) 2150 2152 (face tree-sitter-hl-face:variable fontified t) 2152 2153 (fontified t) 2153 2159 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2159 2160 (face (rainbow-delimiters-depth-2-face) fontified t) 2160 2166 (face tree-sitter-hl-face:string fontified t) 2166 2167 (face (rainbow-delimiters-depth-2-face) fontified t) 2167 2169 (fontified t) 2169 2171 (face tree-sitter-hl-face:variable fontified t) 2171 2173 (fontified t) 2173 2177 (face tree-sitter-hl-face:variable fontified t) 2177 2178 (fontified t) 2178 2180 (face tree-sitter-hl-face:operator fontified t) 2180 2181 (fontified t) 2181 2184 (face tree-sitter-hl-face:variable fontified t) 2184 2185 (fontified t) 2185 2189 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2189 2190 (face (rainbow-delimiters-depth-2-face) fontified t) 2190 2200 (face tree-sitter-hl-face:string fontified t) 2200 2202 (fontified t) 2202 2207 (face tree-sitter-hl-face:variable fontified t) 2207 2208 (face (rainbow-delimiters-depth-2-face) fontified t) 2208 2210 (fontified t) 2210 2212 (face tree-sitter-hl-face:keyword fontified t) 2212 2213 (fontified t) 2213 2217 (face tree-sitter-hl-face:variable fontified t) 2217 2218 (fontified t) 2218 2220 (face tree-sitter-hl-face:operator fontified t) 2220 2221 (fontified t) 2221 2224 (face tree-sitter-hl-face:constant\.builtin fontified t) 2224 2225 (fontified t) 2225 2226 (face (rainbow-delimiters-depth-2-face) fontified t) 2226 2229 (fontified t) 2229 2232 (face tree-sitter-hl-face:variable fontified t) 2232 2233 (fontified t) 2233 2240 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2240 2241 (face (rainbow-delimiters-depth-3-face) fontified t) 2241 2245 (face tree-sitter-hl-face:variable fontified t) 2245 2246 (fontified t) 2246 2251 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2251 2252 (face (rainbow-delimiters-depth-4-face) fontified t) 2252 2253 (face (rainbow-delimiters-depth-4-face) fontified t) 2253 2254 (face (rainbow-delimiters-depth-3-face) fontified t) 2254 2257 (fontified t) 2257 2263 (face tree-sitter-hl-face:keyword fontified t) 2263 2265 (fontified t) 2265 2266 (face (rainbow-delimiters-depth-2-face) fontified t) 2266 2269 (fontified t) 2269 2278 (face tree-sitter-hl-face:variable fontified t) 2278 2279 (fontified t) 2279 2281 (face tree-sitter-hl-face:operator fontified t) 2281 2282 (fontified t) 2282 2290 (face tree-sitter-hl-face:variable fontified t) 2290 2291 (fontified t) 2291 2294 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2294 2295 (face (rainbow-delimiters-depth-2-face) fontified t) 2295 2297 (face tree-sitter-hl-face:variable fontified t) 2297 2298 (face (rainbow-delimiters-depth-2-face) fontified t) 2298 2300 (fontified t) 2300 2306 (face tree-sitter-hl-face:variable fontified t) 2306 2307 (fontified t) 2307 2309 (face tree-sitter-hl-face:operator fontified t) 2309 2310 (fontified t) 2310 2319 (face tree-sitter-hl-face:type fontified t) 2319 2320 (face (rainbow-delimiters-depth-2-face) fontified t) 2320 2321 (face (rainbow-delimiters-depth-2-face) fontified t) 2321 2323 (fontified t) 2323 2329 (face tree-sitter-hl-face:variable fontified t) 2329 2330 (fontified t) 2330 2332 (face tree-sitter-hl-face:property fontified t) 2332 2333 (fontified t) 2333 2334 (face tree-sitter-hl-face:operator fontified t) 2334 2335 (fontified t) 2335 2344 (face tree-sitter-hl-face:variable fontified t) 2344 2346 (fontified t) 2346 2352 (face tree-sitter-hl-face:variable fontified t) 2352 2353 (fontified t) 2353 2356 (face tree-sitter-hl-face:property fontified t) 2356 2357 (fontified t) 2357 2358 (face tree-sitter-hl-face:operator fontified t) 2358 2359 (fontified t) 2359 2366 (face tree-sitter-hl-face:variable fontified t) 2366 2367 (fontified t) 2367 2377 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2377 2378 (face (rainbow-delimiters-depth-2-face) fontified t) 2378 2379 (face (rainbow-delimiters-depth-2-face) fontified t) 2379 2382 (fontified t) 2382 2383 (face tree-sitter-hl-face:variable fontified t) 2383 2384 (fontified t) 2384 2386 (face tree-sitter-hl-face:operator fontified t) 2386 2387 (fontified t) 2387 2390 (face tree-sitter-hl-face:variable fontified t) 2390 2391 (fontified t) 2391 2400 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2400 2401 (face (rainbow-delimiters-depth-2-face) fontified t) 2401 2402 (face (rainbow-delimiters-depth-2-face) fontified t) 2402 2404 (fontified t) 2404 2405 (face tree-sitter-hl-face:variable fontified t) 2405 2406 (fontified t) 2406 2409 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2409 2410 (face (rainbow-delimiters-depth-2-face) fontified t) 2410 2420 (face tree-sitter-hl-face:variable fontified t) 2420 2421 (fontified t) 2421 2427 (face tree-sitter-hl-face:property fontified t) 2427 2428 (face (rainbow-delimiters-depth-2-face) fontified t) 2428 2430 (fontified t) 2430 2431 (face tree-sitter-hl-face:variable fontified t) 2431 2432 (fontified t) 2432 2435 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2435 2436 (face (rainbow-delimiters-depth-2-face) fontified t) 2436 2440 (face tree-sitter-hl-face:variable fontified t) 2440 2441 (fontified t) 2441 2448 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2448 2449 (face (rainbow-delimiters-depth-3-face) fontified t) 2449 2454 (fontified t) 2454 2461 (face tree-sitter-hl-face:type fontified t) 2461 2462 (face (rainbow-delimiters-depth-4-face) fontified t) 2462 2465 (fontified t) 2465 2479 (face tree-sitter-hl-face:variable fontified t) 2479 2481 (fontified t) 2481 2482 (face (rainbow-delimiters-depth-5-face) fontified t) 2482 2483 (face (rainbow-delimiters-depth-5-face) fontified t) 2483 2489 (face tree-sitter-hl-face:type fontified t) 2489 2490 (face (rainbow-delimiters-depth-5-face) fontified t) 2490 2493 (face tree-sitter-hl-face:string fontified t) 2493 2494 (face (rainbow-delimiters-depth-5-face) fontified t) 2494 2498 (fontified t) 2498 2512 (face tree-sitter-hl-face:variable fontified t) 2512 2514 (fontified t) 2514 2515 (face (rainbow-delimiters-depth-5-face) fontified t) 2515 2516 (face (rainbow-delimiters-depth-5-face) fontified t) 2516 2522 (face tree-sitter-hl-face:type fontified t) 2522 2523 (face (rainbow-delimiters-depth-5-face) fontified t) 2523 2556 (face tree-sitter-hl-face:string fontified t) 2556 2557 (face (rainbow-delimiters-depth-5-face) fontified t) 2557 2561 (fontified t) 2561 2575 (face tree-sitter-hl-face:variable fontified t) 2575 2577 (fontified t) 2577 2578 (face (rainbow-delimiters-depth-5-face) fontified t) 2578 2579 (face (rainbow-delimiters-depth-5-face) fontified t) 2579 2585 (face tree-sitter-hl-face:type fontified t) 2585 2586 (face (rainbow-delimiters-depth-5-face) fontified t) 2586 2589 (face tree-sitter-hl-face:string fontified t) 2589 2590 (face (rainbow-delimiters-depth-5-face) fontified t) 2590 2593 (fontified t) 2593 2594 (face (rainbow-delimiters-depth-4-face) fontified t) 2594 2595 (face (rainbow-delimiters-depth-3-face) fontified t) 2595 2596 (face (rainbow-delimiters-depth-2-face) fontified t) 2596 2599 (fontified t) 2599 2607 (face tree-sitter-hl-face:variable fontified t) 2607 2608 (fontified t) 2608 2610 (face tree-sitter-hl-face:operator fontified t) 2610 2611 (fontified t) 2611 2614 (face tree-sitter-hl-face:variable fontified t) 2614 2615 (fontified t) 2615 2624 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2624 2625 (face (rainbow-delimiters-depth-2-face) fontified t) 2625 2626 (face (rainbow-delimiters-depth-2-face) fontified t) 2626 2628 (fontified t) 2628 2629 (face tree-sitter-hl-face:variable fontified t) 2629 2630 (fontified t) 2630 2635 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2635 2636 (face (rainbow-delimiters-depth-2-face) fontified t) 2636 2641 (face tree-sitter-hl-face:string fontified t) 2641 2643 (fontified t) 2643 2651 (face tree-sitter-hl-face:variable fontified t) 2651 2652 (face (rainbow-delimiters-depth-2-face) fontified t) 2652 2655 (fontified t) 2655 2663 (face tree-sitter-hl-face:variable fontified t) 2663 2664 (fontified t) 2664 2667 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2667 2668 (face (rainbow-delimiters-depth-2-face) fontified t) 2668 2680 (face tree-sitter-hl-face:string fontified t) 2680 2682 (fontified t) 2682 2698 (face tree-sitter-hl-face:variable fontified t) 2698 2699 (face (rainbow-delimiters-depth-2-face) fontified t) 2699 2701 (fontified t) 2701 2709 (face tree-sitter-hl-face:variable fontified t) 2709 2710 (fontified t) 2710 2713 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2713 2714 (face (rainbow-delimiters-depth-2-face) fontified t) 2714 2720 (face tree-sitter-hl-face:string fontified t) 2720 2722 (fontified t) 2722 2734 (face tree-sitter-hl-face:variable fontified t) 2734 2735 (face (rainbow-delimiters-depth-2-face) fontified t) 2735 2738 (fontified t) 2738 2746 (face tree-sitter-hl-face:variable fontified t) 2746 2747 (fontified t) 2747 2751 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2751 2752 (face (rainbow-delimiters-depth-2-face) fontified t) 2752 2760 (face tree-sitter-hl-face:string fontified t) 2760 2762 (fontified t) 2762 2768 (face tree-sitter-hl-face:variable fontified t) 2768 2769 (fontified t) 2769 2779 (face tree-sitter-hl-face:property fontified t) 2779 2780 (face (rainbow-delimiters-depth-2-face) fontified t) 2780 2782 (fontified t) 2782 2790 (face tree-sitter-hl-face:variable fontified t) 2790 2791 (fontified t) 2791 2794 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2794 2795 (face (rainbow-delimiters-depth-2-face) fontified t) 2795 2803 (face tree-sitter-hl-face:string fontified t) 2803 2805 (fontified t) 2805 2811 (face tree-sitter-hl-face:variable fontified t) 2811 2812 (fontified t) 2812 2824 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2824 2825 (face (rainbow-delimiters-depth-3-face) fontified t) 2825 2832 (face tree-sitter-hl-face:variable fontified t) 2832 2833 (face (rainbow-delimiters-depth-3-face) fontified t) 2833 2834 (face (rainbow-delimiters-depth-2-face) fontified t) 2834 2837 (fontified t) 2837 2845 (face tree-sitter-hl-face:variable fontified t) 2845 2846 (fontified t) 2846 2850 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2850 2851 (face (rainbow-delimiters-depth-2-face) fontified t) 2851 2859 (face tree-sitter-hl-face:string fontified t) 2859 2861 (fontified t) 2861 2867 (face tree-sitter-hl-face:variable fontified t) 2867 2868 (fontified t) 2868 2880 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2880 2881 (face (rainbow-delimiters-depth-3-face) fontified t) 2881 2887 (face tree-sitter-hl-face:variable fontified t) 2887 2888 (fontified t) 2888 2898 (face tree-sitter-hl-face:property fontified t) 2898 2899 (face (rainbow-delimiters-depth-3-face) fontified t) 2899 2900 (face (rainbow-delimiters-depth-2-face) fontified t) 2900 2902 (fontified t) 2902 2910 (face tree-sitter-hl-face:variable fontified t) 2910 2911 (fontified t) 2911 2914 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 2914 2915 (face (rainbow-delimiters-depth-2-face) fontified t) 2915 2923 (face tree-sitter-hl-face:string fontified t) 2923 2925 (fontified t) 2925 2931 (face tree-sitter-hl-face:variable fontified t) 2931 2932 (fontified t) 2932 2943 (face tree-sitter-hl-face:property fontified t) 2943 2944 (face (rainbow-delimiters-depth-2-face) fontified t)) . 852) (undo-tree-id1078 . -2112) (undo-tree-id1079 . -2112) (undo-tree-id1080 . -1132) (undo-tree-id1081 . -2597) (undo-tree-id1082 . -1833) (undo-tree-id1083 . -2166) (t 25901 29901 670767 576000)) nil (25913 14710 640713 663000) 0 nil])
([nil nil ((5267 . 5269) (t 25913 11074 685699 628000)) nil (25913 14710 640710 968000) 0 nil])
([nil nil ((5269 . 5285)) nil (25913 14710 640710 367000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5282) (undo-tree-id1075 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5283) (undo-tree-id1076 . -1) (#(" " 0 1 (fontified t)) . -5284) (undo-tree-id1077 . -1) 5285) nil (25913 14710 640709 715000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5288) (5288 . 5289) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5288) (5288 . 5289) (5282 . 5289)) nil (25913 14710 640707 722000) 0 nil])
([nil nil ((5269 . 5274)) nil (25913 14710 640706 980000) 0 nil])
([nil nil ((5293 . 5296)) nil (25913 14710 640706 509000) 0 nil])
([nil nil ((5296 . 5297)) nil (25913 14710 640706 199000) 0 nil])
([nil nil ((5297 . 5305)) nil (25913 14710 640705 838000) 0 nil])
([nil nil ((1046 . 1048)) nil (25913 14710 640705 207000) 0 nil])
([nil nil ((1048 . 1057)) nil (25913 14710 640704 305000) 0 nil])
([nil nil ((#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1054) (undo-tree-id1072 . -1) (#("E" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1055) (undo-tree-id1073 . -1) (#("D" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1056) (undo-tree-id1074 . -1) 1057) nil (25913 14710 640703 383000) 0 nil])
([nil nil ((1054 . 1066)) nil (25913 14710 640701 971000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -1073) (1073 . 1074) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1073) (1073 . 1074) (1066 . 1074)) nil (25913 14710 640701 79000) 0 nil])
([nil nil ((1074 . 1075) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1074) (1074 . 1075) (1073 . 1075)) nil (25913 14710 640699 646000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1056) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#("C" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1057) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1058) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1059) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1060) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1061) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1062) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1063) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#(" " 0 1 (fontified t)) . -1064) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1065) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1066) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1067) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (#("u" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1068) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("c" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1069) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("t" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1070) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (#(" " 0 1 (fontified t)) . -1071) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1072) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . 1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (#("
" 0 1 (fontified t)) . -1073) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("	" 0 1 (fontified t)) . -1074) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("
" 0 1 (fontified t)) . -1075) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1076) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . 1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) 1077) nil (25913 14710 640691 80000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1046) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("
" 0 1 (fontified t)) . -1047) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1048) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1049) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -1050) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("e" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -1051) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#(" " 0 1 (fontified t)) . -1052) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1053) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1054) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -1055) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) 1056) nil (25913 14710 640500 551000) 0 nil])
([nil nil ((6487 . 6488) (#("	" 0 1 (fontified nil)) . 6486) (undo-tree-id1293 . -1) (6485 . 6488) (t 25913 14710 657978 342000)) nil (25913 15286 654088 434000) 0 nil])
([nil nil ((6488 . 6497)) nil (25913 15286 654087 473000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6500 6508 nil nil nil nil nil)) nil 4 nil #s(yas--field 1 6500 6508 nil nil nil nil nil) nil nil)) (6492 . 6509) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 6492) (6492 . 6514) (#("Print" 0 5 (fontified nil)) . 6492) (6492 . 6497) (#("Println" 0 7 (fontified nil)) . -6492) (6492 . 6499) (#("Print" 0 5 (face tree-sitter-hl-face:property fontified t)) . -6492) (undo-tree-id1291 . -5) (undo-tree-id1292 . -5) 6497) nil (25913 15286 654086 731000) 0 nil])
([nil nil ((apply yas--snippet-revive 6492 6509 #s(yas--snippet nil (#s(yas--field 1 6500 6508 nil nil nil nil nil)) nil 4 nil #s(yas--field 1 6500 6508 nil nil nil nil nil) nil nil))) nil (25913 15286 654085 68000) 0 nil])
([nil nil ((#("	fmt.Println(a ...any)
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 12 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 18 (face tree-sitter-hl-face:operator fontified t) 18 21 (face tree-sitter-hl-face:variable fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t)) . 6487) (undo-tree-id1283 . 10) (undo-tree-id1284 . -22) (undo-tree-id1285 . -12) (undo-tree-id1286 . -12) (undo-tree-id1287 . 11) (undo-tree-id1288 . -13) (undo-tree-id1289 . 2) (undo-tree-id1290 . -22) 6499) nil (25913 15286 654084 337000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6707 . 6708) (nil fontified nil 6487 . 6708) (6487 . 6708)) nil (25913 15286 654081 20000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -764) (829 . 830) (891 . 897) (905 . 911) (2711 . 2712) (#("  " 0 2 (fontified t)) . 2711) (#(";" 0 1 (fontified t)) . 2911) (#(";" 0 1 (fontified t)) . 2942) (#(";" 0 1 (fontified t)) . 2973) (#(";" 0 1 (fontified t)) . 2999) (#(";" 0 1 (fontified t)) . 3025) (#(";" 0 1 (fontified t)) . 3083) (#(";" 0 1 (fontified t)) . 3159) (#(";" 0 1 (fontified t)) . 3343) (#(";" 0 1 (fontified t)) . 3460) (3548 . 3549) (#("  " 0 2 (fontified t)) . 3548) (#(";" 0 1 (fontified t)) . 3936) (#(";" 0 1 (fontified t)) . 4068) (#(";" 0 1 (fontified t)) . 4223) (#(";" 0 1 (fontified t)) . 4278) (#(";" 0 1 (fontified t)) . 4308) (#(";" 0 1 (fontified t)) . 4333) (#(";" 0 1 (fontified t)) . 4358) (#(";" 0 1 (fontified t)) . 4415) (#(";" 0 1 (fontified t)) . 4491) (#(";" 0 1 (fontified t)) . 4547) (#(";" 0 1 (fontified t)) . 4708) (#(";" 0 1 (fontified t)) . 4775) (#(";" 0 1 (fontified t)) . 4785) (#(";" 0 1 (fontified t)) . 4837) (#(";" 0 1 (fontified t)) . 4904) (#(";" 0 1 (fontified t)) . 5131) (#(";" 0 1 (fontified t)) . 5216) (#(";" 0 1 (fontified t)) . 5264) (#(", " 0 2 (fontified t)) . 5303) (#(";" 0 1 (fontified t)) . 6314) (#(";" 0 1 (fontified t)) . 6400) (6487 . 6488) (#("    " 0 4 (fontified t)) . 6487) (6544 . 6545) (#("    " 0 4 (fontified t)) . 6544) (6600 . 6601) (#("    " 0 4 (fontified t)) . -6600) 6604 (6645 . 6647) (#("        " 0 8 (fontified t)) . 6645) (undo-tree-id1281 . -4) 6649 (6703 . 6704) (#("    " 0 4 (fontified t)) . 6703) (undo-tree-id1282 . -4)) nil (25913 15286 654078 586000) 0 nil])
([nil nil ((6467 . 6468) (#("	" 0 1 (fontified nil)) . 6466) (undo-tree-id1280 . -1) (6466 . 6468) (#("	" 0 1 (fontified nil)) . 6465) (6465 . 6466) (6465 . 6466)) nil (25913 15286 654070 531000) 0 nil])
([nil nil ((6466 . 6467)) nil (25913 15286 654068 767000) 0 nil])
([nil nil ((6467 . 6468)) nil (25913 15286 654068 206000) 0 nil])
([nil nil ((6468 . 6476)) nil (25913 15286 654067 966000) 0 nil])
([nil nil ((#("R" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6475) (undo-tree-id1279 . -1) 6476) nil (25913 15286 654067 625000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6478) (6478 . 6479) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -6478) (6478 . 6479) (6475 . 6479)) nil (25913 15286 654066 523000) 0 nil])
([nil nil ((6474 . 6480)) nil (25913 15286 654065 361000) 0 nil])
([nil nil ((6485 . 6487)) nil (25913 15286 654064 950000) 0 nil])
([nil nil ((6487 . 6490)) nil (25913 15286 654064 329000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6508 6509 nil nil nil t #s(yas--field 2 6511 6528 nil nil nil nil nil)) #s(yas--field 2 6511 6528 nil nil nil nil nil)) nil 5 nil #s(yas--field 1 6508 6509 nil nil nil t #s(yas--field 2 6511 6528 nil nil nil nil nil)) nil nil)) (6487 . 6538) (#("utils.RSSUrlToStruct(${1:url string}, ${2:payload utils.RSS})" 0 61 (fontified nil)) . 6487) (6487 . 6548) (#("RSS" 0 3 (fontified nil)) . 6487) (6487 . 6490) (#("utils.RSSUrlToStruct" 0 20 (fontified nil)) . -6487) (6487 . 6507) (#("RSS" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -6487) (undo-tree-id1277 . -3) (undo-tree-id1278 . -3) 6490) nil (25913 15286 654063 147000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6508) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6509) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6510) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (#(" " 0 1 (fontified t)) . -6511) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6512) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6513) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6514) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6515) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6516) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6517) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) 6518) nil (25913 15286 654059 941000) 0 nil])
([nil nil ((6508 . 6509)) nil (25913 15286 654050 493000) 0 nil])
([nil nil ((apply yas--snippet-revive 6487 6529 #s(yas--snippet nil (#s(yas--field 1 6508 6509 nil nil nil t #s(yas--field 2 6511 6528 nil nil nil nil nil)) #s(yas--field 2 6511 6528 nil nil nil nil nil)) nil 5 nil #s(yas--field 1 6508 6509 nil nil nil t #s(yas--field 2 6511 6528 nil nil nil nil nil)) nil nil))) nil (25913 15286 654050 253000) 0 nil])
([nil nil ((#("( " 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (fontified t)) . 6507) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . 2) (undo-tree-id1247 . -1)) nil (25913 15286 654049 852000) 0 nil])
([nil nil ((6507 . 6508)) nil (25913 15286 654047 157000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6510 . 6511) (nil fontified nil 6509 . 6511) (6509 . 6511) 6508) nil (25913 15286 654046 646000) 0 nil])
([nil nil ((#("	utils.RSSUrlToStruct(,(  payload utils.RSS)
" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t) 7 21 (face tree-sitter-hl-face:type fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (rear-nonsticky t fontified t) 25 26 (fontified t) 26 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (fontified t) 34 39 (fontified t) 39 40 (fontified t) 40 43 (face tree-sitter-hl-face:type fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (fontified t)) . 6486) (undo-tree-id1230 . -23) (undo-tree-id1231 . 23) (undo-tree-id1232 . -44) (undo-tree-id1233 . -24) (undo-tree-id1234 . -24) (undo-tree-id1235 . -21) (undo-tree-id1236 . -21) (undo-tree-id1237 . 23) (undo-tree-id1238 . -21) (undo-tree-id1239 . -21) (undo-tree-id1240 . -21) 6510) nil (25913 15286 654046 5000) 0 nil])
([nil nil ((6486 . 6531)) nil (25913 15286 654029 834000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6508) (undo-tree-id1221 . -1) (undo-tree-id1222 . 1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . 1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -6509) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (#(" " 0 1 (rear-nonsticky t fontified t)) . -6510) (undo-tree-id1228 . -1) (#(" " 0 1 (fontified t)) . -6511) (undo-tree-id1229 . -1) 6512) nil (25913 15286 654029 93000) 0 nil])
([nil nil ((#("c" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6505) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6506) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -6507) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6508) (undo-tree-id1181 . 1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . 1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6509) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -6510) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -6511) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6512) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6513) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6514) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (#(" " 0 1 (fontified t)) . -6515) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6516) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6517) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6518) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6519) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6520) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#("." 0 1 (fontified t)) . -6521) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("R" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6522) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (#("S" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6523) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (#("S" 0 1 (face tree-sitter-hl-face:type fontified t)) . -6524) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -6525) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . 1) (undo-tree-id1220 . -1) 6526) nil (25913 15286 654024 184000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6503) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6504) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 6505) nil (25913 15286 653999 798000) 0 nil])
([nil nil ((6503 . 6504)) nil (25913 15286 653978 618000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6508 6518 nil nil nil nil #s(yas--field 2 6520 6537 nil nil nil nil nil)) #s(yas--field 2 6520 6537 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 6508 6518 nil nil nil nil #s(yas--field 2 6520 6537 nil nil nil nil nil)) nil nil)) (6493 . 6538) (#("RSSUrlToStruct(${1:url string}, ${2:payload utils.RSS})" 0 55 (fontified nil)) . 6493) (6493 . 6548) (#("RSSUrlToStr" 0 11 (fontified nil)) . 6493) (6493 . 6504) (#("RSSUrlToStruct" 0 14 (fontified nil)) . -6493) (6493 . 6507) (#("RSSUrlToStr" 0 11 (face tree-sitter-hl-face:property fontified t)) . -6493) (undo-tree-id1132 . -10) (undo-tree-id1133 . -10) (undo-tree-id1134 . -11) (undo-tree-id1135 . -11) (undo-tree-id1136 . -10) (undo-tree-id1137 . -10) (undo-tree-id1138 . -10) (undo-tree-id1139 . -10) (undo-tree-id1140 . -10) 6504) nil (25913 15286 653977 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 6493 6538 #s(yas--snippet nil (#s(yas--field 1 6508 6518 nil nil nil nil #s(yas--field 2 6520 6537 nil nil nil nil nil)) #s(yas--field 2 6520 6537 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 6508 6518 nil nil nil nil #s(yas--field 2 6520 6537 nil nil nil nil nil)) nil nil))) nil (25913 15286 653972 26000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6539 . 6540) (#("
" 0 1 (fontified nil)) . -6583) (6538 . 6584) 6507) nil (25913 15286 653971 735000) 0 nil])
([nil nil ((#("	utils.RSSUrlToStruct(,(  payload utils.RSS)
" 0 1 (rear-nonsticky t fontified t) 1 6 (fontified t) 6 7 (fontified t) 7 21 (face tree-sitter-hl-face:type fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (fontified t rear-nonsticky t) 25 26 (fontified t) 26 33 (face tree-sitter-hl-face:variable fontified t) 33 34 (fontified t) 34 39 (fontified t) 39 40 (fontified t) 40 43 (face tree-sitter-hl-face:type fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (fontified t)) . 6539) (undo-tree-id1128 . -44) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . 1) 6540) nil (25913 15286 653971 184000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6508) (undo-tree-id1103 . -1) (undo-tree-id1104 . 1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6509) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6510) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (#(" " 0 1 (fontified t)) . -6511) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6512) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6513) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6514) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6515) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6516) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6517) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) 6518) nil (25913 15286 653968 589000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6538 . 6539) (nil fontified nil 6508 . 6539) (6508 . 6539) 6507) nil (25913 15286 653959 803000) 0 nil])
([nil nil ((6508 . 6510) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -6508) (6508 . 6509)) nil (25913 15286 653959 392000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -6509) (undo-tree-id1102 . -1) 6510) nil (25913 15286 653958 931000) 0 nil])
([nil nil ((6540 . 6541) (#("\"" 0 1 (fontified nil)) . -6540) (6540 . 6541)) nil (25913 15286 653957 949000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6542) (undo-tree-id1084 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6543) (undo-tree-id1085 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6544) (undo-tree-id1086 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6545) (undo-tree-id1087 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6546) (undo-tree-id1088 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6547) (undo-tree-id1089 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6548) (undo-tree-id1090 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6549) (undo-tree-id1091 . -1) (#(" " 0 1 (fontified t)) . -6550) (undo-tree-id1092 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -6551) (undo-tree-id1093 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6552) (undo-tree-id1094 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6553) (undo-tree-id1095 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6554) (undo-tree-id1096 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6555) (undo-tree-id1097 . -1) (#("." 0 1 (fontified t)) . -6556) (undo-tree-id1098 . -1) (#("R" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6557) (undo-tree-id1099 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6558) (undo-tree-id1100 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6559) (undo-tree-id1101 . -1) 6560) nil (25913 15286 653955 244000) 0 nil])
([nil nil ((6542 . 6546)) nil (25913 15286 653940 36000) 0 nil])
([nil nil ((6547 . 6548)) nil (25913 15286 653937 70000) 0 nil])
([nil nil ((#("func fetchDataFromAFeed(url string)
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 23 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 27 28 (fontified t) 28 34 (face tree-sitter-hl-face:type fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (fontified t)) . 5252) (undo-tree-id1295 . -35) (undo-tree-id1296 . -36) (undo-tree-id1297 . -35) (undo-tree-id1298 . -5) (undo-tree-id1299 . -34) (undo-tree-id1300 . -35) (undo-tree-id1301 . -35) (undo-tree-id1302 . -34) (undo-tree-id1303 . -34) (undo-tree-id1304 . 2) (undo-tree-id1305 . -35) (undo-tree-id1306 . 13) (undo-tree-id1307 . -24) (undo-tree-id1308 . -34) (undo-tree-id1309 . -34) (undo-tree-id1310 . -28) (undo-tree-id1311 . -34) (undo-tree-id1312 . -34) (undo-tree-id1313 . -34) (undo-tree-id1314 . -34) (undo-tree-id1315 . -34) (undo-tree-id1316 . -34) (undo-tree-id1317 . -36) 5286 (t 25913 15286 764324 128000)) nil (25913 15310 77772 31000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5252) (undo-tree-id1294 . -1)) nil (25913 15310 77759 106000) 0 nil])
([nil nil ((6450 . 6457) (t 25913 15310 137278 407000)) nil (25913 15434 124660 226000) 0 nil])
([nil nil ((6450 . 6451)) nil (25913 15434 124659 845000) 0 nil])
([nil nil ((6519 . 6521)) nil (25913 15434 124658 864000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6537) (6537 . 6538) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -6537) (6537 . 6538) (6521 . 6538)) nil (25913 15434 124657 912000) 0 nil])
([nil nil ((6538 . 6540) (6539 . 6540) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 6538) (6538 . 6540) (6537 . 6539)) nil (25913 15434 124657 160000) 0 nil])
([nil nil ((6540 . 6544)) nil (25913 15434 124656 519000) 0 nil])
([nil nil ((6544 . 6548)) nil (25913 15434 124656 108000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6551 6562 nil nil nil t #s(yas--field 2 6564 6576 nil nil nil t nil)) #s(yas--field 2 6564 6576 nil nil nil t nil)) nil 8 nil #s(yas--field 2 6564 6576 nil nil nil t nil) nil nil)) (6544 . 6575) (#("Printf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 6544) (6544 . 6585) (#("Prin" 0 4 (fontified nil)) . 6544) (6544 . 6548) (#("Printf" 0 6 (fontified nil)) . -6544) (6544 . 6550) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -6544) (undo-tree-id1323 . -4) (undo-tree-id1324 . -4) 6548) nil (25913 15434 124654 856000) 0 nil])
([nil nil ((6551 . 6553) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -6551) (undo-tree-id1321 . -1) (#("format string" 0 6 (face tree-sitter-hl-face:variable fontified nil) 6 7 (fontified nil) 7 13 (face tree-sitter-hl-face:variable fontified nil)) . 6552) (undo-tree-id1322 . -13) (6551 . 6552)) nil (25913 15434 124652 241000) 0 nil])
([nil nil ((6552 . 6561)) nil (25913 15434 124650 278000) 0 nil])
([nil nil ((6565 . 6569) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 6565) (undo-tree-id1320 . -8) (6564 . 6565)) nil (25913 15434 124649 546000) 0 nil])
([nil nil ((apply yas--snippet-revive 6569 6576 #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 2 6564 6576 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil #s(yas--field 2 6564 6576 nil nil nil t nil) nil)) (6569 . 6576) (#("Error()" 0 7 (fontified nil)) . 6569) (undo-tree-id1318 . -7) (6569 . 6576) (#("Error" 0 5 (fontified nil)) . -6569) (undo-tree-id1319 . -5) (6569 . 6574)) nil (25913 15434 124647 763000) 0 nil])
([nil nil ((apply yas--snippet-revive 6544 6577 #s(yas--snippet nil (#s(yas--field 1 6551 6562 nil nil nil t #s(yas--field 2 6564 6576 nil nil nil t nil)) #s(yas--field 2 6564 6576 nil nil nil t nil)) nil 8 nil #s(yas--field 2 6564 6576 nil nil nil t nil) nil nil))) nil (25913 15434 124637 854000) 0 nil])
([nil nil ((6577 . 6580)) nil (25913 15434 124637 163000) 0 nil])
([nil nil ((6580 . 6585)) nil (25913 15434 124636 572000) 0 nil])
([nil nil ((6585 . 6586)) nil (25913 15434 124632 895000) 0 nil])
([nil nil ((6797 . 6798) (#("	" 0 1 (fontified nil)) . 6796) (undo-tree-id1345 . -1) (6795 . 6798) (t 25913 15434 235988 728000)) nil (25913 16824 749398 305000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6843 . 6844) (nil fontified nil 6798 . 6844) (6798 . 6844) 6797) nil (25913 16824 749397 504000) 0 nil])
([nil nil ((#("	body, readErr := ioutil.ReadAll(response.Body)
" 0 1 (fontified t) 1 5 (face tree-sitter-hl-face:variable fontified t) 5 7 (fontified t) 7 14 (face tree-sitter-hl-face:variable fontified t) 14 15 (fontified t) 15 17 (face tree-sitter-hl-face:operator fontified t) 17 18 (fontified t) 18 24 (face tree-sitter-hl-face:variable fontified t) 24 25 (fontified t) 25 32 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 41 (face tree-sitter-hl-face:variable fontified t) 41 42 (fontified t) 42 46 (face tree-sitter-hl-face:property fontified t) 46 47 (face (rainbow-delimiters-depth-2-face) rear-nonsticky t fontified t) 47 48 (fontified t)) . 6797) (undo-tree-id1341 . -1) (undo-tree-id1342 . 7) (undo-tree-id1343 . -47) (undo-tree-id1344 . -40) 6837) nil (25913 16824 749396 442000) 0 nil])
([nil nil ((6514 . 6515)) nil (25913 16824 749394 278000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -6514) (undo-tree-id1340 . -1) 6515) nil (25913 16824 749393 426000) 0 nil])
([nil nil ((6514 . 6515)) nil (25913 16824 749392 134000) 0 nil])
([nil nil ((#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -6514) (undo-tree-id1339 . -1) 6515) nil (25913 16824 749391 422000) 0 nil])
([nil nil ((6514 . 6515)) nil (25913 16824 749390 180000) 0 nil])
([nil nil ((#("&" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -6514) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) 6515) nil (25913 16824 749389 238000) 0 nil])
([nil nil ((6514 . 6515)) nil (25913 16824 749387 385000) 0 nil])
([nil nil ((#("*" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -6514) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) 6515) nil (25913 16824 749384 910000) 0 nil])
([nil nil ((6514 . 6515) (t 25913 16824 861015 547000)) nil (25913 16832 529617 727000) 0 nil])
([nil nil ((5251 . 5253) (t 25913 16832 640002 226000)) nil (25913 17195 287157 948000) 0 nil])
([nil nil ((5252 . 5257)) nil (25913 17195 287157 447000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5252) (undo-tree-id1354 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5253) (undo-tree-id1355 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5254) (undo-tree-id1356 . -1) (#("c" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -5255) (undo-tree-id1357 . -1) (#(" " 0 1 (fontified t)) . -5256) (undo-tree-id1358 . -1) 5257) nil (25913 17195 287156 465000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5250) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("
" 0 1 (fontified t)) . -5251) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) 5252) nil (25913 17195 287151 195000) 0 nil])
([nil nil ((#("	rss := utils.RSS{}
	cerr := utils.RSSUrlToStruct(\"https://blog.boot.dev/index.xml\", &rss);
	if cerr != nil {
		fmt.Printf(\"ERROR: %s\", cerr.Error())
		return
	}
	
	fmt.Printf(\"Channel title: %v\\n\", rss.Channel.Title)
	fmt.Printf(\"Channel link: %v\\n\", rss.Channel.Link)

	for i, item := range rss.Channel.Items {
		fmt.Printf(\"%v. item title: %v\\n\", i, item.Title)
	}
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:variable fontified t) 4 5 (fontified t) 5 7 (face tree-sitter-hl-face:operator fontified t) 7 8 (fontified t) 8 14 (fontified t) 14 17 (face tree-sitter-hl-face:type fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (face tree-sitter-hl-face:variable fontified t) 22 25 (face tree-sitter-hl-face:variable fontified t) 25 26 (fontified t) 26 28 (face tree-sitter-hl-face:operator fontified t) 28 29 (fontified t) 29 34 (face tree-sitter-hl-face:variable fontified t) 34 35 (fontified t) 35 49 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 51 (face tree-sitter-hl-face:string fontified t) 51 56 (face tree-sitter-hl-face:string fontified t) 56 57 (face tree-sitter-hl-face:string fontified t) 57 81 (face tree-sitter-hl-face:string fontified t) 81 82 (face tree-sitter-hl-face:string fontified t rear-nonsticky t) 82 83 (face tree-sitter-hl-face:string fontified t) 83 85 (fontified t) 85 86 (face tree-sitter-hl-face:operator fontified t) 86 89 (face tree-sitter-hl-face:variable fontified t) 89 90 (face (rainbow-delimiters-depth-2-face) fontified t) 90 92 (fontified t) 92 93 (fontified t) 93 95 (face tree-sitter-hl-face:keyword fontified t) 95 96 (fontified t) 96 100 (face tree-sitter-hl-face:variable fontified t) 100 101 (fontified t) 101 103 (face tree-sitter-hl-face:operator fontified t) 103 104 (fontified t) 104 107 (face tree-sitter-hl-face:constant\.builtin fontified t) 107 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 110 (fontified t) 110 112 (fontified t) 112 115 (face tree-sitter-hl-face:variable fontified t) 115 116 (fontified t) 116 122 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 134 (face tree-sitter-hl-face:string fontified t) 134 136 (fontified t) 136 140 (face tree-sitter-hl-face:variable fontified t) 140 141 (fontified t) 141 146 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 146 147 (face (rainbow-delimiters-depth-4-face) fontified t) 147 148 (face (rainbow-delimiters-depth-4-face) fontified t) 148 149 (face (rainbow-delimiters-depth-3-face) fontified t) 149 150 (fontified t) 150 152 (fontified t) 152 158 (face tree-sitter-hl-face:keyword fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 162 (fontified t) 162 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t) 165 168 (face tree-sitter-hl-face:variable fontified t) 168 169 (fontified t) 169 175 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 175 176 (face (rainbow-delimiters-depth-2-face) fontified t) 176 194 (face tree-sitter-hl-face:string fontified t) 194 195 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 195 196 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 196 197 (face tree-sitter-hl-face:string fontified t) 197 199 (fontified t) 199 202 (face tree-sitter-hl-face:variable fontified t) 202 203 (fontified t) 203 210 (face tree-sitter-hl-face:property fontified t) 210 211 (fontified t) 211 216 (face tree-sitter-hl-face:property fontified t) 216 217 (face (rainbow-delimiters-depth-2-face) fontified t) 217 218 (fontified t) 218 219 (fontified t) 219 222 (face tree-sitter-hl-face:variable fontified t) 222 223 (fontified t) 223 229 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 229 230 (face (rainbow-delimiters-depth-2-face) fontified t) 230 247 (face tree-sitter-hl-face:string fontified t) 247 248 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 248 249 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 249 250 (face tree-sitter-hl-face:string fontified t) 250 252 (fontified t) 252 255 (face tree-sitter-hl-face:variable fontified t) 255 256 (fontified t) 256 263 (face tree-sitter-hl-face:property fontified t) 263 264 (fontified t) 264 268 (face tree-sitter-hl-face:property fontified t) 268 269 (face (rainbow-delimiters-depth-2-face) fontified t) 269 271 (fontified t) 271 272 (fontified t) 272 275 (face tree-sitter-hl-face:keyword fontified t) 275 276 (fontified t) 276 277 (face tree-sitter-hl-face:variable fontified t) 277 278 (fontified t) 278 279 (fontified t) 279 283 (face tree-sitter-hl-face:variable fontified t) 283 284 (fontified t) 284 286 (face tree-sitter-hl-face:operator fontified t) 286 287 (fontified t) 287 292 (face tree-sitter-hl-face:keyword fontified t) 292 293 (fontified t) 293 296 (face tree-sitter-hl-face:variable fontified t) 296 297 (fontified t) 297 304 (face tree-sitter-hl-face:property fontified t) 304 305 (fontified t) 305 310 (face tree-sitter-hl-face:property fontified t) 310 311 (fontified t) 311 312 (face (rainbow-delimiters-depth-2-face) fontified t) 312 313 (fontified t) 313 315 (fontified t) 315 318 (face tree-sitter-hl-face:variable fontified t) 318 319 (fontified t) 319 322 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 322 323 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 323 325 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 325 326 (face (rainbow-delimiters-depth-3-face) fontified t) 326 345 (face tree-sitter-hl-face:string fontified t) 345 346 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t syntax-table (9)) 346 347 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 347 348 (face tree-sitter-hl-face:string fontified t) 348 350 (fontified t) 350 351 (face tree-sitter-hl-face:variable fontified t) 351 353 (fontified t) 353 357 (face tree-sitter-hl-face:variable fontified t) 357 358 (fontified t) 358 363 (face tree-sitter-hl-face:property fontified t) 363 364 (face (rainbow-delimiters-depth-3-face) fontified t) 364 365 (fontified t) 365 366 (fontified t) 366 367 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 367 368 (fontified t)) . 6429) (undo-tree-id1376 . -366) (undo-tree-id1377 . -367) (undo-tree-id1378 . -164) (undo-tree-id1379 . -366) (undo-tree-id1380 . -1) (undo-tree-id1381 . -35) (undo-tree-id1382 . -50) (undo-tree-id1383 . -161) (undo-tree-id1384 . -161) (undo-tree-id1385 . -367) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -366) 6430 (t 25913 17195 319105 977000)) nil (25913 17390 821047 844000) 0 nil])
([nil nil ((4942 . 4944)) nil (25913 17390 821042 775000) 0 nil])
([nil nil ((4944 . 4952)) nil (25913 17390 821042 254000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4944) (undo-tree-id1368 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4945) (undo-tree-id1369 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4946) (undo-tree-id1370 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4947) (undo-tree-id1371 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4948) (undo-tree-id1372 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4949) (undo-tree-id1373 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -4950) (undo-tree-id1374 . -1) (#(" " 0 1 (fontified t)) . -4951) (undo-tree-id1375 . -1) 4952) nil (25913 17390 821040 971000) 0 nil])
([nil nil ((4944 . 4946)) nil (25913 17390 820925 735000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -4966) (4966 . 4967) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4966) (4966 . 4967) (4964 . 4967) (#(")" 0 1 (fontified nil)) . -4963) (4963 . 4964) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4963) (4963 . 4964) (4946 . 4964)) nil (25913 17390 820924 793000) 0 nil])
([nil nil ((4967 . 4968) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4967) (4967 . 4968) (4966 . 4968)) nil (25913 17390 820923 661000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4969 . 4970) (#("
" 0 1 (fontified nil)) . -5336) (4968 . 5337) 4967) nil (25913 17390 820922 279000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 4967) (undo-tree-id1367 . -1)) nil (25913 17390 820921 197000) 0 nil])
([nil nil ((4963 . 4973)) nil (25913 17390 820920 235000) 0 nil])
([nil nil ((6833 . 6834)) nil (25913 17390 820919 614000) 0 nil])
([nil nil ((6834 . 6841)) nil (25913 17390 820918 962000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6848 6858 nil nil nil nil nil)) nil 20 nil #s(yas--field 1 6848 6858 nil nil nil nil nil) nil nil)) (6834 . 6859) (#("ProcessRSSURL(${1:url string})" 0 30 (fontified nil)) . 6834) (6834 . 6864) (#("process" 0 7 (fontified nil)) . 6834) (6834 . 6841) (#("ProcessRSSURL" 0 13 (fontified nil)) . -6834) (6834 . 6847) (#("process" 0 7 (face tree-sitter-hl-face:variable fontified t)) . -6834) (undo-tree-id1365 . -7) (undo-tree-id1366 . -7) 6841) nil (25913 17390 820917 540000) 0 nil])
([nil nil ((apply yas--snippet-revive 6834 6859 #s(yas--snippet nil (#s(yas--field 1 6848 6858 nil nil nil nil nil)) nil 20 nil #s(yas--field 1 6848 6858 nil nil nil nil nil) nil nil))) nil (25913 17390 820914 714000) 0 nil])
([nil nil ((#("func ProcessRSSURL(url string) {
	rss := utils.RSS{}
	cerr := utils.RSSUrlToStruct(\"https://blog.boot.dev/index.xml\", &rss);
	if cerr != nil {
		fmt.Printf(\"ERROR: %s\", cerr.Error())
		return
	}
	
	fmt.Printf(\"Channel title: %v\\n\", rss.Channel.Title)
	fmt.Printf(\"Channel link: %v\\n\", rss.Channel.Link)

	for i, item := range rss.Channel.Items {
		fmt.Printf(\"%v. item title: %v\\n\", i, item.Title)
	}
}
" 0 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 18 (face (tree-sitter-hl-face:function tree-sitter-hl-face:variable) fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 22 (face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable) fontified t) 22 23 (fontified t) 23 29 (face tree-sitter-hl-face:type fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 33 (fontified t) 33 34 (rear-nonsticky t fontified t) 34 37 (face tree-sitter-hl-face:variable fontified t) 37 38 (fontified t) 38 40 (face tree-sitter-hl-face:operator fontified t) 40 41 (fontified t) 41 47 (fontified t) 47 50 (face tree-sitter-hl-face:type fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (face tree-sitter-hl-face:variable fontified t) 55 58 (face tree-sitter-hl-face:variable fontified t) 58 59 (fontified t) 59 61 (face tree-sitter-hl-face:operator fontified t) 61 62 (fontified t) 62 67 (face tree-sitter-hl-face:variable fontified t) 67 68 (fontified t) 68 82 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 82 83 (face (rainbow-delimiters-depth-2-face) fontified t) 83 84 (face tree-sitter-hl-face:string fontified t) 84 89 (face tree-sitter-hl-face:string fontified t) 89 90 (face tree-sitter-hl-face:string fontified t) 90 114 (face tree-sitter-hl-face:string fontified t) 114 115 (face tree-sitter-hl-face:string fontified t rear-nonsticky t) 115 116 (face tree-sitter-hl-face:string fontified t) 116 118 (fontified t) 118 119 (face tree-sitter-hl-face:operator fontified t) 119 122 (face tree-sitter-hl-face:variable fontified t) 122 123 (face (rainbow-delimiters-depth-2-face) fontified t) 123 125 (fontified t) 125 126 (fontified t) 126 128 (face tree-sitter-hl-face:keyword fontified t) 128 129 (fontified t) 129 133 (face tree-sitter-hl-face:variable fontified t) 133 134 (fontified t) 134 136 (face tree-sitter-hl-face:operator fontified t) 136 137 (fontified t) 137 140 (face tree-sitter-hl-face:constant\.builtin fontified t) 140 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 143 (fontified t) 143 145 (fontified t) 145 148 (face tree-sitter-hl-face:variable fontified t) 148 149 (fontified t) 149 155 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 155 156 (face (rainbow-delimiters-depth-3-face) fontified t) 156 167 (face tree-sitter-hl-face:string fontified t) 167 169 (fontified t) 169 173 (face tree-sitter-hl-face:variable fontified t) 173 174 (fontified t) 174 179 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 179 180 (face (rainbow-delimiters-depth-4-face) fontified t) 180 181 (face (rainbow-delimiters-depth-4-face) fontified t) 181 182 (face (rainbow-delimiters-depth-3-face) fontified t) 182 183 (fontified t) 183 185 (fontified t) 185 191 (face tree-sitter-hl-face:keyword fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 194 (face (rainbow-delimiters-depth-2-face) fontified t) 194 195 (fontified t) 195 196 (fontified t) 196 197 (fontified t) 197 198 (fontified t) 198 201 (face tree-sitter-hl-face:variable fontified t) 201 202 (fontified t) 202 208 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 208 209 (face (rainbow-delimiters-depth-2-face) fontified t) 209 227 (face tree-sitter-hl-face:string fontified t) 227 228 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 228 229 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 229 230 (face tree-sitter-hl-face:string fontified t) 230 232 (fontified t) 232 235 (face tree-sitter-hl-face:variable fontified t) 235 236 (fontified t) 236 243 (face tree-sitter-hl-face:property fontified t) 243 244 (fontified t) 244 249 (face tree-sitter-hl-face:property fontified t) 249 250 (face (rainbow-delimiters-depth-2-face) fontified t) 250 251 (fontified t) 251 252 (fontified t) 252 255 (face tree-sitter-hl-face:variable fontified t) 255 256 (fontified t) 256 262 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 262 263 (face (rainbow-delimiters-depth-2-face) fontified t) 263 280 (face tree-sitter-hl-face:string fontified t) 280 281 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 281 282 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 282 283 (face tree-sitter-hl-face:string fontified t) 283 285 (fontified t) 285 288 (face tree-sitter-hl-face:variable fontified t) 288 289 (fontified t) 289 296 (face tree-sitter-hl-face:property fontified t) 296 297 (fontified t) 297 301 (face tree-sitter-hl-face:property fontified t) 301 302 (face (rainbow-delimiters-depth-2-face) fontified t) 302 304 (fontified t) 304 305 (fontified t) 305 308 (face tree-sitter-hl-face:keyword fontified t) 308 309 (fontified t) 309 310 (face tree-sitter-hl-face:variable fontified t) 310 311 (fontified t) 311 312 (fontified t) 312 316 (face tree-sitter-hl-face:variable fontified t) 316 317 (fontified t) 317 319 (face tree-sitter-hl-face:operator fontified t) 319 320 (fontified t) 320 325 (face tree-sitter-hl-face:keyword fontified t) 325 326 (fontified t) 326 329 (face tree-sitter-hl-face:variable fontified t) 329 330 (fontified t) 330 337 (face tree-sitter-hl-face:property fontified t) 337 338 (fontified t) 338 343 (face tree-sitter-hl-face:property fontified t) 343 344 (fontified t) 344 345 (face (rainbow-delimiters-depth-2-face) fontified t) 345 346 (fontified t) 346 348 (fontified t) 348 351 (face tree-sitter-hl-face:variable fontified t) 351 352 (fontified t) 352 355 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 355 356 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 356 358 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 358 359 (face (rainbow-delimiters-depth-3-face) fontified t) 359 378 (face tree-sitter-hl-face:string fontified t) 378 379 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 379 380 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 380 381 (face tree-sitter-hl-face:string fontified t) 381 383 (fontified t) 383 384 (face tree-sitter-hl-face:variable fontified t) 384 386 (fontified t) 386 390 (face tree-sitter-hl-face:variable fontified t) 390 391 (fontified t) 391 396 (face tree-sitter-hl-face:property fontified t) 396 397 (face (rainbow-delimiters-depth-3-face) fontified t) 397 398 (fontified t) 398 399 (fontified t) 399 400 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 400 401 (fontified t) 401 402 (face (rainbow-delimiters-depth-1-face) fontified t) 402 403 (fontified t)) . 4944) (undo-tree-id1359 . -401) (undo-tree-id1360 . 1) (undo-tree-id1361 . -402) (undo-tree-id1362 . -401) (undo-tree-id1363 . -402) (undo-tree-id1364 . -401)) nil (25913 17390 820913 773000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5252 . 5253) (#("
" 0 1 (fontified nil)) . -5655) (5252 . 5656)) nil (25913 17390 820903 313000) 0 nil])
([nil nil ((5655 . 5656)) nil (25913 17390 820899 396000) 0 nil])
([nil nil ((#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6849) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6850) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6851) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (#(" " 0 1 (fontified t)) . -6852) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6853) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6854) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6855) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6856) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6857) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -6858) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) 6859 (t 25913 17390 839466 304000)) nil (25913 17413 130974 657000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6881 . 6882) (nil fontified nil 6849 . 6882) (6849 . 6882) 6848) nil (25913 17413 130919 354000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -5348) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (#("." 0 1 (fontified t)) . -5349) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (#("b" 0 1 (fontified t)) . -5350) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#("o" 0 1 (fontified t)) . -5351) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (#("o" 0 1 (fontified t)) . -5352) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (#("t" 0 1 (fontified t)) . -5353) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (#("." 0 1 (fontified t)) . -5354) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (#("d" 0 1 (fontified t)) . -5355) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#("e" 0 1 (fontified t)) . -5356) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (#("v" 0 1 (fontified t)) . -5357) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (#("/" 0 1 (fontified t)) . -5358) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (#("i" 0 1 (fontified t)) . -5359) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (#("n" 0 1 (fontified t)) . -5360) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (#("d" 0 1 (fontified t)) . -5361) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (#("e" 0 1 (fontified t)) . -5362) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (#("x" 0 1 (fontified t)) . -5363) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (#("." 0 1 (fontified t)) . -5364) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (#("x" 0 1 (fontified t)) . -5365) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (#("m" 0 1 (fontified t)) . -5366) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (#("l" 0 1 (fontified t rear-nonsticky t)) . -5367) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5368) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) 5369 (t 25913 17413 241388 327000)) nil (25913 17422 431601 247000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -5340) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (#("s" 0 1 (fontified t)) . -5341) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (#(":" 0 1 (fontified t)) . -5342) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (#("/" 0 1 (fontified t)) . -5343) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("/" 0 1 (fontified t)) . -5344) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("b" 0 1 (fontified t)) . -5345) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (#("l" 0 1 (fontified t)) . -5346) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("o" 0 1 (fontified t)) . -5347) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) 5348) nil (25913 17422 431497 162000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -5336) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (#("h" 0 1 (fontified t)) . -5337) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . 1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("t" 0 1 (fontified t)) . -5338) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("t" 0 1 (fontified t)) . -5339) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) 5340) nil (25913 17422 431419 937000) 0 nil])
([nil nil ((5336 . 5339)) nil (25913 17422 431151 704000) 0 nil])
([nil nil ((5251 . 5253) (t 25913 17422 449356 40000)) nil (25913 18008 332789 495000) 0 nil])
([nil nil ((5253 . 5257)) nil (25913 18008 332788 904000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5256) (undo-tree-id2282 . -1) 5257) nil (25913 18008 332788 463000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5265) (5265 . 5266) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5265) (5265 . 5266) (5256 . 5266)) nil (25913 18008 332787 692000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5268) (5268 . 5269) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5268) (5268 . 5269) (5266 . 5269)) nil (25913 18008 332786 730000) 0 nil])
([nil nil ((5269 . 5270) (#("	" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5269) (5269 . 5270) (5268 . 5270)) nil (25913 18008 332786 89000) 0 nil])
([nil nil ((5265 . 5266)) nil (25913 18008 332785 728000) 0 nil])
([nil nil ((5266 . 5267)) nil (25913 18008 332785 488000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5266) (undo-tree-id2281 . -1) 5267) nil (25913 18008 332784 857000) 0 nil])
([nil nil ((5266 . 5271)) nil (25913 18008 332784 285000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -5266) (undo-tree-id2280 . -1) 5267) nil (25913 18008 332783 925000) 0 nil])
([nil nil ((5275 . 5296)) nil (25913 18008 332783 193000) 0 nil])
([nil nil ((5296 . 5302)) nil (25913 18008 332782 793000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5303) (5303 . 5304) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -5303) (5303 . 5304) (5302 . 5304)) nil (25913 18008 332782 242000) 0 nil])
([nil nil ((5303 . 5312)) nil (25913 18008 332781 891000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5315) (5315 . 5316) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -5315) (5315 . 5316) (5313 . 5316)) nil (25913 18008 332781 430000) 0 nil])
([nil nil ((5316 . 5318) (5317 . 5318) (#("		" 0 2 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 5316) (5316 . 5318) (5315 . 5317)) nil (25913 18008 332780 769000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5279) (undo-tree-id2276 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5280) (undo-tree-id2277 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5281) (undo-tree-id2278 . -1) (#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5282) (undo-tree-id2279 . -1) 5283) nil (25913 18008 332780 38000) 0 nil])
([nil nil ((5279 . 5280)) nil (25913 18008 332778 24000) 0 nil])
([nil nil ((5315 . 5318)) nil (25913 18008 332777 553000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5316) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5317) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) 5318) nil (25913 18008 332776 651000) 0 nil])
([nil nil ((#("G" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5315) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) 5316) nil (25913 18008 332774 177000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5259) (5259 . 5260) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5259) (5259 . 5260) (5257 . 5260)) nil (25913 18008 332772 794000) 0 nil])
([nil nil ((5259 . 5268)) nil (25913 18008 332771 752000) 0 nil])
([nil nil ((#("m" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5267) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) 5268) nil (25913 18008 332770 720000) 0 nil])
([nil nil ((5267 . 5268)) nil (25913 18008 332769 277000) 0 nil])
([nil nil ((apply yas--snippet-revive 5262 5271 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (5262 . 5271) (#("apiConfig" 0 9 (fontified nil)) . 5262) (5262 . 5271) (#("apiCon" 0 6 (fontified nil)) . 5262) (5262 . 5268) (#("apiConfig" 0 9 (fontified nil)) . -5262) (5262 . 5271) (#("apiCon" 0 6 (face tree-sitter-hl-face:type fontified t)) . -5262) (undo-tree-id2266 . -6) (undo-tree-id2267 . -6) 5268) nil (25913 18008 332768 366000) 0 nil])
([nil nil ((5330 . 5332)) nil (25913 18008 332765 741000) 0 nil])
([nil nil ((5332 . 5337)) nil (25913 18008 332765 180000) 0 nil])
([nil nil ((5337 . 5339)) nil (25913 18008 332764 639000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5355 5360 nil nil nil t #s(yas--field 2 5362 5366 nil nil nil t nil)) #s(yas--field 2 5362 5366 nil nil nil t nil)) nil 22 nil #s(yas--field 2 5362 5366 nil nil nil t nil) nil nil)) (5332 . 5415) (#("DB.GetNextFeedsToFetch(${1:ctx context.Context}, ${2:arg database.GetNextFeedsToFetchParams})" 0 93 (fontified nil)) . 5332) (5332 . 5425) (#("GetNext" 0 7 (fontified nil)) . 5332) (5332 . 5339) (#("DB.GetNextFeedsToFetch" 0 22 (fontified nil)) . -5332) (5332 . 5354) (#("GetNext" 0 7 (face tree-sitter-hl-face:property fontified t)) . -5332) (undo-tree-id2263 . -7) (undo-tree-id2264 . -7) (undo-tree-id2265 . -5) 5339) nil (25913 18008 332763 687000) 0 nil])
([nil nil ((5356 . 5357) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 5356) (5355 . 5356)) nil (25913 18008 332760 781000) 0 nil])
([nil nil ((apply yas--snippet-revive 5357 5360 #s(yas--snippet nil nil nil 23 nil nil #s(yas--field 1 5355 5360 nil nil nil t #s(yas--field 2 5362 5366 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil #s(yas--field 1 5355 5360 nil nil nil t #s(yas--field 2 5362 5366 nil nil nil t nil)) nil)) (5357 . 5360) (#("ctx" 0 3 (fontified nil)) . 5357) (5357 . 5360) (#("ctx" 0 3 (fontified nil)) . -5357) (5357 . 5360)) nil (25913 18008 332760 100000) 0 nil])
([nil nil ((5363 . 5366) (#("arg database.GetNextFeedsToFetchParams" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 12 (face tree-sitter-hl-face:variable fontified nil) 12 13 (fontified nil) 13 38 (face tree-sitter-hl-face:property fontified nil)) . 5363) (5362 . 5363)) nil (25913 18008 332759 108000) 0 nil])
([nil nil ((apply yas--snippet-revive 5332 5367 #s(yas--snippet nil (#s(yas--field 1 5355 5360 nil nil nil t #s(yas--field 2 5362 5366 nil nil nil t nil)) #s(yas--field 2 5362 5366 nil nil nil t nil)) nil 22 nil #s(yas--field 2 5362 5366 nil nil nil t nil) nil nil))) nil (25913 18008 332758 577000) 0 nil])
([nil nil ((5367 . 5368)) nil (25913 18008 332758 327000) 0 nil])
([nil nil ((5330 . 5336)) nil (25913 18008 332758 86000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5335) (undo-tree-id2262 . -1) 5336) nil (25913 18008 332757 615000) 0 nil])
([nil nil ((5335 . 5337)) nil (25913 18008 332756 734000) 0 nil])
([nil nil ((5318 . 5323)) nil (25913 18008 332756 173000) 0 nil])
([nil nil ((5318 . 5319)) nil (25913 18008 332755 642000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5319) (undo-tree-id2261 . -1) 5320) nil (25913 18008 332754 720000) 0 nil])
([nil nil ((5319 . 5320)) nil (25913 18008 332753 488000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5318) (undo-tree-id2260 . -1) 5319) nil (25913 18008 332752 957000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5323) (undo-tree-id2259 . -1) 5324) nil (25913 18008 332752 125000) 0 nil])
([nil nil ((5323 . 5324)) nil (25913 18008 332751 454000) 0 nil])
([nil nil ((5317 . 5318)) nil (25913 18008 332751 163000) 0 nil])
([nil nil ((5319 . 5320)) nil (25913 18008 332750 933000) 0 nil])
([nil nil ((#("_" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5294) (undo-tree-id2258 . -1) 5295) nil (25913 18008 332750 572000) 0 nil])
([nil nil ((5294 . 5298)) nil (25913 18008 332749 951000) 0 nil])
([nil nil ((5337 . 5340)) nil (25913 18008 332749 721000) 0 nil])
([nil nil ((5340 . 5341)) nil (25913 18008 332749 420000) 0 nil])
([nil nil ((#("\305\261" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5340) (undo-tree-id2257 . -1) 5341) nil (25913 18008 332748 899000) 0 nil])
([nil nil ((5340 . 5344)) nil (25913 18008 332747 336000) 0 nil])
([nil nil ((5344 . 5345)) nil (25913 18008 332747 96000) 0 nil])
([nil nil ((5345 . 5348)) nil (25913 18008 332746 855000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5352 5356 nil nil nil t nil)) nil 24 nil #s(yas--field 1 5352 5356 nil nil nil t nil) nil nil)) (5344 . 5361) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 5344) (5344 . 5366) (#("Prin" 0 4 (fontified nil)) . 5344) (5344 . 5348) (#("Println" 0 7 (fontified nil)) . -5344) (5344 . 5351) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -5344) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4) 5348) nil (25913 18008 332746 54000) 0 nil])
([nil nil ((5353 . 5356) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 5353) (undo-tree-id2252 . -8) (undo-tree-id2253 . -5) (undo-tree-id2254 . -6) (5352 . 5353)) nil (25913 18008 332743 729000) 0 nil])
([nil nil ((apply yas--snippet-revive 5344 5357 #s(yas--snippet nil (#s(yas--field 1 5352 5356 nil nil nil t nil)) nil 24 nil #s(yas--field 1 5352 5356 nil nil nil t nil) nil nil))) nil (25913 18008 332735 594000) 0 nil])
([nil nil ((5357 . 5358)) nil (25913 18008 332732 959000) 0 nil])
([nil nil ((5356 . 5361) (t 25913 18008 353101 882000)) nil (25913 18036 906683 89000) 0 nil])
([nil nil ((5361 . 5364)) nil (25913 18036 906682 107000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -5356) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (#(" " 0 1 (fontified t)) . -5357) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (#("U" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5358) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (#("T" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5359) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (#("C" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5360) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5361) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5362) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5363) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) 5364) nil (25913 18036 906678 791000) 0 nil])
([nil nil ((5364 . 5369) (t 25913 18036 923985 247000)) nil (25913 18108 766893 387000) 0 nil])
([nil nil ((5358 . 5361)) nil (25913 18108 766892 596000) 0 nil])
([nil nil ((5361 . 5375)) nil (25913 18108 766892 5000) 0 nil])
([nil nil ((5375 . 5376)) nil (25913 18108 766891 624000) 0 nil])
([nil nil ((apply yas--snippet-revive 5370 5404 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (5370 . 5404) (#("database.GetNextFeedsToFetchParams" 0 34 (fontified nil)) . 5370) (5370 . 5404) (#("GetNex" 0 6 (fontified nil)) . 5370) (5370 . 5376) (#("database.GetNextFeedsToFetchParams" 0 34 (fontified nil)) . -5370) (5370 . 5404) (#("GetNex" 0 6 (face tree-sitter-hl-face:variable fontified t)) . -5370) (undo-tree-id2343 . -6) (undo-tree-id2344 . -6) 5376) nil (25913 18108 766890 812000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5405) (5405 . 5406) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5405) (5405 . 5406) (5404 . 5406)) nil (25913 18108 766888 889000) 0 nil])
([nil nil ((5406 . 5409)) nil (25913 18108 766887 947000) 0 nil])
([nil nil ((5409 . 5412)) nil (25913 18108 766887 526000) 0 nil])
([nil nil ((apply yas--snippet-revive 5409 5420 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (5409 . 5420) (#("dbObj.Limit" 0 11 (fontified nil)) . 5409) (5409 . 5420) (#("dbO" 0 3 (fontified nil)) . 5409) (5409 . 5412) (#("dbObj.Limit" 0 11 (fontified nil)) . -5409) (5409 . 5420) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5409) (undo-tree-id2341 . -3) (undo-tree-id2342 . -3) 5412) nil (25913 18108 766886 524000) 0 nil])
([nil nil ((5420 . 5425)) nil (25913 18108 766884 801000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -5424) (undo-tree-id2340 . -1) 5425) nil (25913 18108 766884 601000) 0 nil])
([nil nil ((5424 . 5426)) nil (25913 18108 766883 970000) 0 nil])
([nil nil ((5426 . 5429)) nil (25913 18108 766883 699000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -5425) (undo-tree-id2336 . -1) (#("
" 0 1 (fontified t)) . -5426) (undo-tree-id2337 . -1) (#("	" 0 1 (fontified t)) . -5427) (undo-tree-id2338 . -1) (#("	" 0 1 (fontified t)) . -5428) (undo-tree-id2339 . -1) 5429) nil (25913 18108 766883 158000) 0 nil])
([nil nil ((5425 . 5428)) nil (25913 18108 766881 475000) 0 nil])
([nil nil ((5428 . 5431)) nil (25913 18108 766881 4000) 0 nil])
([nil nil ((apply yas--snippet-revive 5428 5440 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (5428 . 5440) (#("dbObj.Offset" 0 12 (fontified nil)) . 5428) (5428 . 5440) (#("dbO" 0 3 (fontified nil)) . 5428) (5428 . 5431) (#("dbObj.Offset" 0 12 (fontified nil)) . -5428) (5428 . 5440) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5428) (undo-tree-id2334 . -3) (undo-tree-id2335 . -3) 5431) nil (25913 18108 766880 283000) 0 nil])
([nil nil ((5440 . 5443)) nil (25913 18108 766878 760000) 0 nil])
([nil nil ((5442 . 5443)) nil (25913 18108 766878 309000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5421) (undo-tree-id2333 . -1) 5422) nil (25913 18108 766878 18000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5490) (undo-tree-id2329 . -1) (#("," 0 1 (fontified t)) . -5491) (undo-tree-id2330 . -1) (#(" " 0 1 (fontified t)) . -5492) (undo-tree-id2331 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -5493) (undo-tree-id2332 . -1) 5494) nil (25913 18108 766876 926000) 0 nil])
([nil nil ((5490 . 5493)) nil (25913 18108 766874 822000) 0 nil])
([nil nil ((apply yas--snippet-revive 5490 5495 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (5490 . 5495) (#("dbObj" 0 5 (fontified nil)) . 5490) (5490 . 5495) (#("dbO" 0 3 (fontified nil)) . 5490) (5490 . 5493) (#("dbObj" 0 5 (fontified nil)) . -5490) (5490 . 5495) (#("dbO" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -5490) (undo-tree-id2325 . -3) (undo-tree-id2326 . -3) (undo-tree-id2327 . -2) (undo-tree-id2328 . -3) 5493) nil (25913 18108 766871 937000) 0 nil])
([nil nil ((5285 . 5287) (t 25913 18108 785690 185000)) nil (25913 18120 281769 71000) 0 nil])
([nil nil ((5499 . 5502) (t 25913 18120 299642 706000)) nil (25913 18384 840212 124000) 0 nil])
([nil nil ((5502 . 5516)) nil (25913 18384 840211 563000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5517) (5517 . 5518) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5517) (5517 . 5518) (5516 . 5518)) nil (25913 18384 840211 12000) 0 nil])
([nil nil ((5518 . 5521) (5519 . 5521) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 5518) (5518 . 5521) (5517 . 5519)) nil (25913 18384 840210 220000) 0 nil])
([nil nil ((5521 . 5532)) nil (25913 18384 840209 579000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -5531) (undo-tree-id2403 . -1) 5532) nil (25913 18384 840208 968000) 0 nil])
([nil nil ((5535 . 5538)) nil (25913 18384 840208 237000) 0 nil])
([nil nil ((5538 . 5542)) nil (25913 18384 840207 806000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5541) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) 5542) nil (25913 18384 840207 265000) 0 nil])
([nil nil ((5541 . 5542)) nil (25913 18384 840205 852000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5538) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5539) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5540) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (#("." 0 1 (fontified t)) . -5541) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) 5542) nil (25913 18384 840205 101000) 0 nil])
([nil nil ((5538 . 5547)) nil (25913 18384 840200 893000) 0 nil])
([nil nil ((5547 . 5549)) nil (25913 18384 840200 252000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5448) (undo-tree-id2390 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5449) (undo-tree-id2391 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5450) (undo-tree-id2392 . -1) 5451) nil (25913 18384 840199 480000) 0 nil])
([nil nil ((5448 . 5453)) nil (25913 18384 840197 757000) 0 nil])
([nil nil ((5551 . 5554)) nil (25913 18384 840197 346000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5551) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5552) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5553) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) 5554) nil (25913 18384 840196 324000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5557) (5557 . 5558) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5557) (5557 . 5558) (5551 . 5558)) nil (25913 18384 840193 409000) 0 nil])
([nil nil ((5557 . 5562)) nil (25913 18384 840193 48000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5565) (5565 . 5566) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5565) (5565 . 5566) (5563 . 5566)) nil (25913 18384 840192 547000) 0 nil])
([nil nil ((5566 . 5569) (5567 . 5569) (#("			" 0 3 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 5566) (5566 . 5569) (5565 . 5567)) nil (25913 18384 840191 686000) 0 nil])
([nil nil ((5569 . 5573)) nil (25913 18384 840190 754000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5572) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) 5573) nil (25913 18384 840190 193000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5565) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (#("	" 0 1 (fontified t)) . -5566) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (#("	" 0 1 (fontified t)) . -5567) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (#("	" 0 1 (fontified t)) . -5568) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5569) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5570) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5571) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) 5572) nil (25913 18384 840188 459000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5544) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5545) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5546) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) 5547) nil (25913 18384 840183 550000) 0 nil])
([nil nil ((5544 . 5552)) nil (25913 18384 840180 975000) 0 nil])
([nil nil ((5570 . 5574)) nil (25913 18384 840180 735000) 0 nil])
([nil nil ((5574 . 5578)) nil (25913 18384 840180 485000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5574) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5575) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5576) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (#("." 0 1 (fontified t)) . -5577) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) 5578) nil (25913 18384 840179 563000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5544) (undo-tree-id2351 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5545) (undo-tree-id2352 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5546) (undo-tree-id2353 . -1) 5547) nil (25913 18384 840175 906000) 0 nil])
([nil nil ((5544 . 5545)) nil (25913 18384 840174 383000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5547) (undo-tree-id2348 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5548) (undo-tree-id2349 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5549) (undo-tree-id2350 . -1) 5550) nil (25913 18384 840173 852000) 0 nil])
([nil nil ((5547 . 5550)) nil (25913 18384 840172 269000) 0 nil])
([nil nil ((#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5547) (undo-tree-id2345 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5548) (undo-tree-id2346 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5549) (undo-tree-id2347 . -1) 5550) nil (25913 18384 840171 828000) 0 nil])
([nil nil ((5547 . 5551)) nil (25913 18384 840162 641000) 0 nil])
([nil nil ((5290 . 5292)) nil (25913 18384 840162 280000) 0 nil])
([nil nil ((5292 . 5313)) nil (25913 18384 840161 870000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5314) (5314 . 5315) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -5314) (5314 . 5315) (5313 . 5315)) nil (25913 18384 840158 593000) 0 nil])
([nil nil ((#("	var wg sync.WaitGroup{}
" 0 1 (fontified t) 1 4 (face tree-sitter-hl-face:keyword fontified t) 4 5 (fontified t) 5 7 (face tree-sitter-hl-face:variable fontified t) 7 8 (fontified t) 8 13 (fontified t) 13 22 (face tree-sitter-hl-face:type fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (fontified t)) . 5291) (undo-tree-id2419 . 1) (undo-tree-id2420 . -24) (undo-tree-id2421 . -23) (undo-tree-id2422 . -23) (undo-tree-id2423 . 2) (undo-tree-id2424 . -24) (undo-tree-id2425 . 3) (undo-tree-id2426 . -23) 5314 (t 25913 18384 951538 415000)) nil (25913 18518 228831 98000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5340 . 5341) (#("
" 0 1 (fontified nil)) . -5364) (5339 . 5365) 5314) nil (25913 18518 228827 432000) 0 nil])
([nil nil ((#("v" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . 5341)) nil (25913 18518 228826 89000) 0 nil])
([nil nil ((5341 . 5344)) nil (25913 18518 228825 528000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5364) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . 1) (undo-tree-id2415 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -5365) (undo-tree-id2416 . -1) (undo-tree-id2417 . 1) (undo-tree-id2418 . -1) 5366) nil (25913 18518 228824 466000) 0 nil])
([nil nil ((5598 . 5601)) nil (25913 18518 228821 140000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5605) (5605 . 5606) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -5605) (5605 . 5606) (5601 . 5606)) nil (25913 18518 228820 428000) 0 nil])
([nil nil ((5605 . 5606)) nil (25913 18518 228820 28000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -5352) (undo-tree-id2410 . -1) (#("c" 0 1 (fontified t)) . -5353) (undo-tree-id2411 . -1) 5354) nil (25913 18518 228819 597000) 0 nil])
([nil nil ((5352 . 5353)) nil (25913 18518 228818 284000) 0 nil])
([nil nil ((apply yas--snippet-revive 5358 5362 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (169 . 174) (170 . 173) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (5350 . 5354) (#("sync" 0 4 (fontified nil)) . 5350) (5350 . 5354) (#("syn" 0 3 (fontified nil)) . 5350) (5350 . 5353) (#("sync" 0 4 (fontified nil)) . -5350) (5350 . 5354) (#("syn" 0 3 (fontified t)) . -5350) (undo-tree-id2408 . -3) (undo-tree-id2409 . -3) 5353) nil (25913 18518 228817 573000) 0 nil])
([nil nil ((5296 . 5300)) nil (25913 18518 228816 70000) 0 nil])
([nil nil ((5300 . 5302)) nil (25913 18518 228815 820000) 0 nil])
([nil nil ((5621 . 5625)) nil (25913 18518 228815 479000) 0 nil])
([nil nil ((5625 . 5633)) nil (25913 18518 228815 219000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5632) (undo-tree-id2407 . -1) 5633) nil (25913 18518 228814 818000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5633) (5633 . 5634) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -5633) (5633 . 5634) (5632 . 5634)) nil (25913 18518 228813 856000) 0 nil])
([nil nil ((5633 . 5643)) nil (25913 18518 228813 315000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5646) (5646 . 5647) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -5646) (5646 . 5647) (5644 . 5647)) nil (25913 18518 228812 574000) 0 nil])
([nil nil ((5647 . 5651) (5648 . 5651) (#("				" 0 4 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 5647) (5647 . 5651) (5646 . 5648)) nil (25913 18518 228812 53000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5665) (5665 . 5666) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5665) (5665 . 5666) (5651 . 5666)) nil (25913 18518 228811 201000) 0 nil])
([nil nil ((5666 . 5671)) nil (25913 18518 228810 810000) 0 nil])
([nil nil ((5671 . 5679)) nil (25913 18518 228810 420000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5680) (5680 . 5681) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5680) (5680 . 5681) (5679 . 5681)) nil (25913 18518 228809 879000) 0 nil])
([nil nil ((5680 . 5683)) nil (25913 18518 228809 458000) 0 nil])
([nil nil ((5689 . 5690)) nil (25913 18518 228809 197000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5689) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) 5690) nil (25913 18518 228808 596000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5690) (5690 . 5691) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -5690) (5690 . 5691) (5689 . 5691)) nil (25913 18518 228800 691000) 0 nil])
([nil nil ((5690 . 5695)) nil (25913 18518 228799 489000) 0 nil])
([nil nil ((apply yas--snippet-revive 5695 5698 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (5695 . 5698) (#("Url" 0 3 (fontified nil)) . 5695) (5695 . 5698) (#("Url" 0 3 (fontified nil)) . -5695) (5695 . 5698)) nil (25913 18518 228795 802000) 0 nil])
([nil nil ((5703 . 5706) (t 25913 18518 341974 656000)) nil (25913 18534 934071 149000) 0 nil])
([nil nil ((5706 . 5709)) nil (25913 18534 934070 368000) 0 nil])
([nil nil ((apply yas--snippet-revive 5709 5715 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (5709 . 5715) (#("Wait()" 0 6 (fontified nil)) . 5709) (5709 . 5715) (#("Wait" 0 4 (fontified nil)) . -5709) (5709 . 5713)) nil (25913 18534 934067 212000) 0 nil])
([nil nil ((5684 . 5689) (t 25913 18535 45903 800000)) nil (25913 18591 313023 723000) 0 nil])
([nil nil ((5671 . 5672)) nil (25913 18591 313023 222000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5671) (undo-tree-id2469 . -1) 5672) nil (25913 18591 313022 781000) 0 nil])
([nil nil ((5671 . 5675)) nil (25913 18591 313022 160000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5674) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) 5675) nil (25913 18591 313021 759000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5673) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) 5674) nil (25913 18591 313020 737000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5671) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5672) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) 5673) nil (25913 18591 313019 655000) 0 nil])
([nil nil ((#("h" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5671) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5672) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5673) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (#("p" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5674) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (#("." 0 1 (fontified t)) . -5675) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (#("G" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5676) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5677) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5678) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5679) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5680) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5681) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5682) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5683) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . 1) (undo-tree-id2460 . -1) 5684) nil (25913 18591 313016 900000) 0 nil])
([nil nil ((5671 . 5676)) nil (25913 18591 313006 9000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5685 5688 nil nil nil t nil)) nil 32 nil #s(yas--field 1 5685 5688 nil nil nil t nil) nil nil)) (5671 . 5696) (#("ProcessRSSURL(${1:url string})" 0 30 (fontified nil)) . 5671) (5671 . 5701) (#("Proce" 0 5 (fontified nil)) . 5671) (5671 . 5676) (#("ProcessRSSURL" 0 13 (fontified nil)) . -5671) (5671 . 5684) (#("Proce" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -5671) (undo-tree-id2430 . -5) (undo-tree-id2431 . -5) (undo-tree-id2432 . -5) 5676) nil (25913 18591 313004 537000) 0 nil])
([nil nil ((5686 . 5688) (#("url string" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 10 (face tree-sitter-hl-face:variable fontified nil)) . 5686) (undo-tree-id2427 . -10) (undo-tree-id2428 . -4) (undo-tree-id2429 . -5) (5685 . 5686)) nil (25913 18591 313002 22000) 0 nil])
([nil nil ((apply yas--snippet-revive 5671 5689 #s(yas--snippet nil (#s(yas--field 1 5685 5688 nil nil nil t nil)) nil 32 nil #s(yas--field 1 5685 5688 nil nil nil t nil) nil nil))) nil (25913 18591 312990 651000) 0 nil])
([nil nil ((#("				
" 0 4 (fontified t) 4 5 (fontified t)) . 5690) (undo-tree-id2470 . -4) (undo-tree-id2471 . -3) (undo-tree-id2472 . -3) (undo-tree-id2473 . -3) (undo-tree-id2474 . -3) (undo-tree-id2475 . -3) (undo-tree-id2476 . -3) (undo-tree-id2477 . -3) (undo-tree-id2478 . -3) (undo-tree-id2479 . -3) (undo-tree-id2480 . -5) 5693 (t 25913 18591 425664 273000)) nil (25913 18593 551568 205000) 0 nil])
([nil nil ((5723 . 5725) (t 25913 18593 565655 171000)) nil (25913 18602 821740 471000) 0 nil])
([nil nil ((5725 . 5735)) nil (25913 18602 821740 10000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5732) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5733) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5734) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) 5735) nil (25913 18602 821738 628000) 0 nil])
([nil nil ((5732 . 5735)) nil (25913 18602 821714 432000) 0 nil])
([nil nil ((#("	ProcessRSSURL(\"https://blog.boot.dev/index.xml\")
" 0 1 (fontified t) 1 14 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 47 (face tree-sitter-hl-face:string fontified t) 47 48 (face tree-sitter-hl-face:string fontified t rear-nonsticky t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (fontified t)) . 7290) (undo-tree-id2538 . -50) (undo-tree-id2539 . -49) (undo-tree-id2540 . -15) (t 25913 18602 934615 308000)) nil (25913 18627 119299 343000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7290)) nil (25913 18627 119294 754000) 0 nil])
([nil nil ((7290 . 7291) (#("	" 0 1 (fontified nil)) . 7289) (undo-tree-id2537 . -1) (7288 . 7291)) nil (25913 18627 119294 353000) 0 nil])
([nil nil ((7291 . 7294)) nil (25913 18627 119293 672000) 0 nil])
([nil nil ((7294 . 7298)) nil (25913 18627 119293 181000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 7308 7310 nil nil nil t nil)) nil 33 nil #s(yas--field 1 7308 7310 nil nil nil t nil) nil nil)) (7294 . 7316) (#("apiCfg.Worker(${1:n int32})" 0 27 (fontified nil)) . 7294) (7294 . 7321) (#("Work" 0 4 (fontified nil)) . 7294) (7294 . 7298) (#("apiCfg.Worker" 0 13 (fontified nil)) . -7294) (7294 . 7307) (#("Work" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -7294) (undo-tree-id2525 . -4) (undo-tree-id2526 . -4) (undo-tree-id2527 . -1) (undo-tree-id2528 . -2) (undo-tree-id2529 . -3) (undo-tree-id2530 . -4) (undo-tree-id2531 . -4) (undo-tree-id2532 . -4) (undo-tree-id2533 . -4) (undo-tree-id2534 . -4) (undo-tree-id2535 . -4) (undo-tree-id2536 . -4) 7298) nil (25913 18627 119292 279000) 0 nil])
([nil nil ((7309 . 7310) (#("n int32" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 7 (face tree-sitter-hl-face:variable fontified nil)) . 7309) (undo-tree-id2522 . -7) (undo-tree-id2523 . -2) (undo-tree-id2524 . -3) (7308 . 7309)) nil (25913 18627 119286 799000) 0 nil])
([nil nil ((apply yas--snippet-revive 7294 7311 #s(yas--snippet nil (#s(yas--field 1 7308 7310 nil nil nil t nil)) nil 33 nil #s(yas--field 1 7308 7310 nil nil nil t nil) nil nil))) nil (25913 18627 119278 824000) 0 nil])
([nil nil ((7311 . 7312)) nil (25913 18627 119275 808000) 0 nil])
([nil nil ((5689 . 5694) (t 25913 18627 137512 270000)) nil (25913 18902 691342 254000) 0 nil])
([nil nil ((5694 . 5698)) nil (25913 18902 691341 693000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5715 5720 nil nil nil t #s(yas--field 2 5722 5722 nil nil nil t nil)) #s(yas--field 2 5722 5722 nil nil nil t nil)) nil 34 nil #s(yas--field 2 5722 5722 nil nil nil t nil) nil nil)) (5694 . 5771) (#("a.DB.MarkFeedFetched(${1:ctx context.Context}, ${2:arg database.MarkFeedFetchedParams})" 0 87 (fontified nil)) . 5694) (5694 . 5781) (#("Mark" 0 4 (fontified nil)) . 5694) (5694 . 5698) (#("a.DB.MarkFeedFetched" 0 20 (fontified nil)) . -5694) (5694 . 5714) (#("Mark" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -5694) (undo-tree-id2565 . -4) (undo-tree-id2566 . -4) 5698) nil (25913 18902 691340 772000) 0 nil])
([nil nil ((5716 . 5720) (#("ctx context.Context" 0 3 (face tree-sitter-hl-face:variable fontified nil) 3 4 (fontified nil) 4 11 (face tree-sitter-hl-face:variable fontified nil) 11 12 (fontified nil) 12 19 (face tree-sitter-hl-face:property fontified nil)) . 5716) (5715 . 5716)) nil (25913 18902 691339 149000) 0 nil])
([nil nil ((#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5719) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) 5720) nil (25913 18902 691338 688000) 0 nil])
([nil nil ((5719 . 5720)) nil (25913 18902 691337 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 5717 5720 #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 5715 5720 nil nil nil t #s(yas--field 2 5722 5722 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 35 nil nil #s(yas--field 1 5715 5720 nil nil nil t #s(yas--field 2 5722 5722 nil nil nil t nil)) nil)) (5717 . 5720) (#("ctx" 0 3 (fontified nil)) . 5717) (5717 . 5720) (#("ctx" 0 3 (fontified nil)) . 5717) (5717 . 5720) (#("ctx" 0 3 (face tree-sitter-hl-face:property fontified t)) . -5717) (undo-tree-id2561 . -3) (undo-tree-id2562 . -3) 5720) nil (25913 18902 691337 335000) 0 nil])
([nil nil ((#("arg database.MarkFeedFetchedParams" 0 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (fontified t) 4 12 (face tree-sitter-hl-face:variable fontified t) 12 13 (fontified t) 13 34 (face tree-sitter-hl-face:property fontified t)) . 5722)) nil (25913 18902 691335 933000) 0 nil])
([nil nil ((apply yas--snippet-revive 5694 5723 #s(yas--snippet nil (#s(yas--field 1 5715 5720 nil nil nil t #s(yas--field 2 5722 5722 nil nil nil t nil)) #s(yas--field 2 5722 5722 nil nil nil t nil)) nil 34 nil #s(yas--field 2 5722 5722 nil nil nil t nil) nil nil))) nil (25913 18902 691335 702000) 0 nil])
([nil nil ((5689 . 5694)) nil (25913 18902 691335 462000) 0 nil])
([nil nil ((5694 . 5697)) nil (25913 18902 691335 221000) 0 nil])
([nil nil ((5697 . 5700)) nil (25913 18902 691334 861000) 0 nil])
([nil nil ((5700 . 5707)) nil (25913 18902 691334 590000) 0 nil])
([nil nil ((apply yas--snippet-revive 5703 5733 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (5703 . 5733) (#("database.MarkFeedFetchedParams" 0 30 (fontified nil)) . 5703) (5703 . 5733) (#("Mark" 0 4 (fontified nil)) . 5703) (5703 . 5707) (#("database.MarkFeedFetchedParams" 0 30 (fontified nil)) . -5703) (5703 . 5733) (#("Mark" 0 4 (face tree-sitter-hl-face:variable fontified t)) . -5703) (undo-tree-id2559 . -4) (undo-tree-id2560 . -4) 5707) nil (25913 18902 691333 788000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5734) (5734 . 5735) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5734) (5734 . 5735) (5733 . 5735)) nil (25913 18902 691332 135000) 0 nil])
([nil nil ((5735 . 5740)) nil (25913 18902 691331 434000) 0 nil])
([nil nil ((5740 . 5746)) nil (25913 18902 691331 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 5746 5748 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (5746 . 5748) (#("ID" 0 2 (fontified nil)) . 5746) (5746 . 5748) (#("ID" 0 2 (fontified nil)) . -5746) (5746 . 5748)) nil (25913 18902 691330 673000) 0 nil])
([nil nil ((5748 . 5757)) nil (25913 18902 691329 871000) 0 nil])
([nil nil ((apply yas--snippet-revive 5757 5759 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (5757 . 5759) (#("ID" 0 2 (fontified nil)) . 5757) (5757 . 5759) (#("ID" 0 2 (fontified nil)) . -5757) (5757 . 5759)) nil (25913 18902 691329 380000) 0 nil])
([nil nil ((5759 . 5764)) nil (25913 18902 691328 839000) 0 nil])
([nil nil ((5764 . 5770)) nil (25913 18902 691328 609000) 0 nil])
([nil nil ((apply yas--snippet-revive 5770 5783 #s(yas--snippet nil nil nil 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 39 nil nil nil nil)) (5770 . 5783) (#("LastFetchedAt" 0 13 (fontified nil)) . 5770) (5770 . 5783) (#("LastFetchedAt" 0 13 (fontified nil)) . -5770) (5770 . 5783)) nil (25913 18902 691328 128000) 0 nil])
([nil nil ((5783 . 5795)) nil (25913 18902 691327 106000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5794) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) 5795) nil (25913 18902 691326 395000) 0 nil])
([nil nil ((5794 . 5797)) nil (25913 18902 691325 92000) 0 nil])
([nil nil ((#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5792) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5793) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5794) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5795) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (#("." 0 1 (fontified t)) . -5796) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) 5797) nil (25913 18902 691322 617000) 0 nil])
([nil nil ((5792 . 5795)) nil (25913 18902 691316 546000) 0 nil])
([nil nil ((apply yas--snippet-revive 5792 5797 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (5792 . 5797) (#("Now()" 0 5 (fontified nil)) . 5792) (5792 . 5797) (#("Now" 0 3 (fontified nil)) . 5792) (5792 . 5795) (#("Now" 0 3 (face tree-sitter-hl-face:property fontified t)) . -5792) (undo-tree-id2545 . -3) (undo-tree-id2546 . -3) 5795) nil (25913 18902 691315 334000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5784) (undo-tree-id2544 . -1) 5785) nil (25913 18902 691312 338000) 0 nil])
([nil nil ((#(":" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5749) (undo-tree-id2543 . -1) 5750) nil (25913 18902 691311 246000) 0 nil])
([nil nil ((5794 . 5797)) nil (25913 18902 691309 944000) 0 nil])
([nil nil ((5797 . 5799)) nil (25913 18902 691309 242000) 0 nil])
([nil nil ((apply yas--snippet-revive 5794 5799 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (5794 . 5799) (#("dbObj" 0 5 (fontified nil)) . 5794) (5794 . 5799) (#("dbObj" 0 5 (fontified nil)) . 5794) (5794 . 5799) (#("dbObj" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -5794) (undo-tree-id2541 . -5) (undo-tree-id2542 . -5) 5799) nil (25913 18902 691306 407000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5794) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5795) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (#("O" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5796) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (#("b" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5797) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (#("j" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5798) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) 5799 (t 25913 18902 705853 796000)) nil (25913 19225 477048 637000) 0 nil])
([nil nil ((5828 . 5833)) nil (25913 19225 477044 439000) 0 nil])
([nil nil ((5785 . 5789)) nil (25913 19225 477043 968000) 0 nil])
([nil nil ((apply yas--snippet-revive 5789 5799 #s(yas--snippet nil nil #s(yas--exit 5798 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5798 nil) 42 nil nil nil nil)) (5789 . 5799) (#("NullTime{$0\\}" 0 13 (fontified nil)) . 5789) (5789 . 5802) (#("NullTime{}" 0 10 (fontified nil)) . -5789) (5789 . 5799)) nil (25913 19225 477043 397000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5797) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . 1) (undo-tree-id2619 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5798) (undo-tree-id2620 . -1) (undo-tree-id2621 . 1) (undo-tree-id2622 . -1) 5799) nil (25913 19225 477041 213000) 0 nil])
([nil nil ((5797 . 5798)) nil (25913 19225 477036 414000) 0 nil])
([nil nil ((apply yas--snippet-revive 5798 5802 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (5798 . 5802) (#("Time" 0 4 (fontified nil)) . 5798) (5798 . 5802) (#("Time" 0 4 (fontified nil)) . -5798) (5798 . 5802)) nil (25913 19225 477035 652000) 0 nil])
([nil nil ((5802 . 5805)) nil (25913 19225 477034 120000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5785) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (#("q" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -5786) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -5787) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (#("." 0 1 (fontified t)) . -5788) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5789) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5790) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5791) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5792) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5793) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5794) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5795) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5796) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (#("." 0 1 (fontified t)) . -5797) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (#("T" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5798) (undo-tree-id2609 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5799) (undo-tree-id2610 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5800) (undo-tree-id2611 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5801) (undo-tree-id2612 . -1) (#(" " 0 1 (fontified t)) . -5802) (undo-tree-id2613 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5803) (undo-tree-id2614 . -1) (#(" " 0 1 (fontified t)) . -5804) (undo-tree-id2615 . -1) 5805) nil (25913 19225 477031 575000) 0 nil])
([nil nil ((5758 . 5763)) nil (25913 19225 477016 637000) 0 nil])
([nil nil ((5763 . 5779)) nil (25913 19225 477015 915000) 0 nil])
([nil nil ((5779 . 5780)) nil (25913 19225 477015 264000) 0 nil])
([nil nil ((apply yas--snippet-revive 5775 5783 #s(yas--snippet nil nil nil 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 44 nil nil nil nil)) (5775 . 5783) (#("NullTime" 0 8 (fontified nil)) . 5775) (5775 . 5783) (#("NullT" 0 5 (fontified nil)) . 5775) (5775 . 5780) (#("NullTime" 0 8 (fontified nil)) . -5775) (5775 . 5783) (#("NullT" 0 5 (face tree-sitter-hl-face:property fontified t)) . -5775) (undo-tree-id2581 . -5) (undo-tree-id2582 . -5) 5780) nil (25913 19225 477014 322000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5784) (5784 . 5785) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5784) (5784 . 5785) (5783 . 5785)) nil (25913 19225 477011 216000) 0 nil])
([nil nil ((5785 . 5790)) nil (25913 19225 477009 904000) 0 nil])
([nil nil ((5790 . 5795)) nil (25913 19225 477009 243000) 0 nil])
([nil nil ((apply yas--snippet-revive 5795 5799 #s(yas--snippet nil nil nil 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil nil nil)) (5795 . 5799) (#("Time" 0 4 (fontified nil)) . 5795) (5795 . 5799) (#("Time" 0 4 (fontified nil)) . -5795) (5795 . 5799)) nil (25913 19225 477008 411000) 0 nil])
([nil nil ((5799 . 5802)) nil (25913 19225 477007 489000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5811) (5811 . 5812) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5811) (5811 . 5812) (5802 . 5812)) nil (25913 19225 477006 868000) 0 nil])
([nil nil ((5767 . 5770)) nil (25913 19225 477006 147000) 0 nil])
([nil nil ((5797 . 5800)) nil (25913 19225 477005 566000) 0 nil])
([nil nil ((#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5845) (undo-tree-id2569 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5846) (undo-tree-id2570 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5847) (undo-tree-id2571 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5848) (undo-tree-id2572 . -1) (#("." 0 1 (fontified t)) . -5849) (undo-tree-id2573 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5850) (undo-tree-id2574 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5851) (undo-tree-id2575 . -1) (#("w" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5852) (undo-tree-id2576 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5853) (undo-tree-id2577 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5854) (undo-tree-id2578 . -1) (undo-tree-id2579 . 1) (undo-tree-id2580 . -1) 5855) nil (25913 19225 477004 404000) 0 nil])
([nil nil ((5845 . 5850)) nil (25913 19225 476997 250000) 0 nil])
([nil nil ((apply yas--snippet-revive 5845 5852 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (5845 . 5852) (#("timeObj" 0 7 (fontified nil)) . 5845) (5845 . 5852) (#("timeO" 0 5 (fontified nil)) . 5845) (5845 . 5850) (#("timeObj" 0 7 (fontified nil)) . -5845) (5845 . 5852) (#("timeO" 0 5 (face tree-sitter-hl-face:variable fontified t)) . -5845) (undo-tree-id2567 . -5) (undo-tree-id2568 . -5) 5850) nil (25913 19225 476994 846000) 0 nil])
([nil nil ((#("1" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7510) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -7511) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) 7512 (t 25913 19225 494889 617000)) nil (25913 19414 605066 722000) 0 nil])
([nil nil ((7510 . 7511)) nil (25913 19414 605064 698000) 0 nil])
([nil nil ((7493 . 7496)) nil (25913 19414 605064 378000) 0 nil])
([nil nil ((7496 . 7497)) nil (25913 19414 605064 97000) 0 nil])
([nil nil ((7497 . 7500)) nil (25913 19414 605063 496000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7493) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7494) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7495) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (#(" " 0 1 (fontified t)) . -7496) (undo-tree-id2708 . -1) (#(":" 0 1 (fontified t)) . -7497) (undo-tree-id2709 . -1) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -7498) (undo-tree-id2710 . -1) (#(" " 0 1 (fontified t)) . -7499) (undo-tree-id2711 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7500) (undo-tree-id2712 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -7501) (undo-tree-id2713 . -1) (#(" " 0 1 (fontified t)) . -7502) (undo-tree-id2714 . -1) 7503) nil (25913 19414 605062 23000) 0 nil])
([nil nil ((7493 . 7496)) nil (25913 19414 604976 583000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5296) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (#("e" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5297) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5298) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5299) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (#("o" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5300) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5301) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) 5302) nil (25913 19414 604974 950000) 0 nil])
([nil nil ((#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5563) (undo-tree-id2674 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5564) (undo-tree-id2675 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5565) (undo-tree-id2676 . -1) 5566) nil (25913 19414 604964 671000) 0 nil])
([nil nil ((5563 . 5569)) nil (25913 19414 604963 248000) 0 nil])
([nil nil ((#("P" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5568) (undo-tree-id2673 . -1) 5569) nil (25913 19414 604962 867000) 0 nil])
([nil nil ((5568 . 5571)) nil (25913 19414 604962 266000) 0 nil])
([nil nil ((5568 . 5569)) nil (25913 19414 604962 26000) 0 nil])
([nil nil ((5572 . 5573)) nil (25913 19414 604961 795000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5575 5586 nil nil nil nil #s(yas--field 2 5588 5601 nil nil nil nil #s(yas--field 3 5603 5611 nil nil nil nil nil))) #s(yas--field 2 5588 5601 nil nil nil nil #s(yas--field 3 5603 5611 nil nil nil nil nil)) #s(yas--field 3 5603 5611 nil nil nil nil nil)) nil 47 nil #s(yas--field 1 5575 5586 nil nil nil nil #s(yas--field 2 5588 5601 nil nil nil nil #s(yas--field 3 5603 5611 nil nil nil nil nil))) nil nil)) (5567 . 5612) (#("Fprintf(${1:w io.Writer}, ${2:format string}, ${3:a ...any})" 0 60 (fontified nil)) . 5567) (5567 . 5627) (#("Fprint" 0 6 (fontified nil)) . 5567) (5567 . 5573) (#("Fprintf" 0 7 (fontified nil)) . -5567) (5567 . 5574) (#("Fprint" 0 6 (face tree-sitter-hl-face:property fontified t)) . -5567) (undo-tree-id2671 . -6) (undo-tree-id2672 . -6) 5573) nil (25913 19414 604961 114000) 0 nil])
([nil nil ((apply yas--snippet-revive 5567 5612 #s(yas--snippet nil (#s(yas--field 1 5575 5586 nil nil nil nil #s(yas--field 2 5588 5601 nil nil nil nil #s(yas--field 3 5603 5611 nil nil nil nil nil))) #s(yas--field 2 5588 5601 nil nil nil nil #s(yas--field 3 5603 5611 nil nil nil nil nil)) #s(yas--field 3 5603 5611 nil nil nil nil nil)) nil 47 nil #s(yas--field 1 5575 5586 nil nil nil nil #s(yas--field 2 5588 5601 nil nil nil nil #s(yas--field 3 5603 5611 nil nil nil nil nil))) nil nil))) nil (25913 19414 604959 821000) 0 nil])
([nil nil ((#("F" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5567) (undo-tree-id2670 . -1) 5568) nil (25913 19414 604959 421000) 0 nil])
([nil nil ((#("p" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5567) (undo-tree-id2669 . -1) 5568) nil (25913 19414 604958 689000) 0 nil])
([nil nil ((5567 . 5568)) nil (25913 19414 604957 848000) 0 nil])
([nil nil ((#("r" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -5589) (undo-tree-id2648 . -1) (#("m" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5590) (undo-tree-id2649 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5591) (undo-tree-id2650 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5592) (undo-tree-id2651 . -1) (#(" " 0 1 (fontified t)) . -5593) (undo-tree-id2652 . -1) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5594) (undo-tree-id2653 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -5595) (undo-tree-id2654 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified nil)) . -5596) (undo-tree-id2655 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5597) (undo-tree-id2656 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5598) (undo-tree-id2657 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5599) (undo-tree-id2658 . -1) (#("," 0 1 (fontified t)) . -5600) (undo-tree-id2659 . -1) (#(" " 0 1 (fontified t)) . -5601) (undo-tree-id2660 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5602) (undo-tree-id2661 . -1) (#(" " 0 1 (fontified t)) . -5603) (undo-tree-id2662 . -1) (#("." 0 1 (fontified t)) . -5604) (undo-tree-id2663 . -1) (#("." 0 1 (fontified t)) . -5605) (undo-tree-id2664 . -1) (#("." 0 1 (face tree-sitter-hl-face:operator fontified t)) . -5606) (undo-tree-id2665 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5607) (undo-tree-id2666 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5608) (undo-tree-id2667 . -1) (#("y" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5609) (undo-tree-id2668 . -1) 5610) nil (25913 19414 604955 493000) 0 nil])
([nil nil ((#("w" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5574) (undo-tree-id2633 . -1) (#(" " 0 1 (fontified t)) . -5575) (undo-tree-id2634 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5576) (undo-tree-id2635 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5577) (undo-tree-id2636 . -1) (#("." 0 1 (fontified t)) . -5578) (undo-tree-id2637 . -1) (#("W" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5579) (undo-tree-id2638 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5580) (undo-tree-id2639 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5581) (undo-tree-id2640 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5582) (undo-tree-id2641 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5583) (undo-tree-id2642 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5584) (undo-tree-id2643 . -1) (#("," 0 1 (fontified t)) . -5585) (undo-tree-id2644 . -1) (#(" " 0 1 (fontified t)) . -5586) (undo-tree-id2645 . -1) (#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5587) (undo-tree-id2646 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5588) (undo-tree-id2647 . -1) 5589) nil (25913 19414 604944 212000) 0 nil])
([nil nil ((5575 . 5579) (5574 . 5576) (#("\"" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . -5574) (5574 . 5575)) nil (25913 19414 604930 516000) 0 nil])
([nil nil ((5580 . 5584)) nil (25913 19414 604929 795000) 0 nil])
([nil nil ((5584 . 5586)) nil (25913 19414 604929 114000) 0 nil])
([nil nil ((apply yas--snippet-revive 5586 5593 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (5586 . 5593) (#("Error()" 0 7 (fontified nil)) . 5586) (5586 . 5593) (#("Error" 0 5 (fontified nil)) . -5586) (5586 . 5591)) nil (25913 19414 604925 427000) 0 nil])
([nil nil ((#("fmt.Printf(\"%s\\n\", err.Error())" 0 3 (face tree-sitter-hl-face:variable fontified t) 3 4 (fontified t) 4 5 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 5 10 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 14 (face tree-sitter-hl-face:string fontified t) 14 15 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) syntax-table (9) fontified t) 15 16 (face (tree-sitter-hl-face:string tree-sitter-hl-face:escape) fontified t) 16 17 (face tree-sitter-hl-face:string fontified t) 17 19 (fontified t) 19 22 (face tree-sitter-hl-face:variable fontified t) 22 23 (fontified t) 23 28 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t) 28 29 (face (rainbow-delimiters-depth-5-face) fontified t) 29 30 (face (rainbow-delimiters-depth-5-face) fontified t) 30 31 (face (rainbow-delimiters-depth-4-face) fontified t)) . 5563) (undo-tree-id2724 . -30) (undo-tree-id2725 . 31) (undo-tree-id2726 . -30) (undo-tree-id2727 . -30) (undo-tree-id2728 . -18) (undo-tree-id2729 . -30) (undo-tree-id2730 . -30) (undo-tree-id2731 . -30) (undo-tree-id2732 . 1) (undo-tree-id2733 . -31) (undo-tree-id2734 . 21) (undo-tree-id2735 . -11) 5593 (t 25913 19414 623643 452000)) nil (25913 19440 627546 717000) 0 nil])
([nil nil ((5550 . 5551)) nil (25913 19440 627540 25000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5550) (undo-tree-id2723 . -1) 5551) nil (25913 19440 627539 223000) 0 nil])
([nil nil ((5552 . 5556)) nil (25913 19440 627537 560000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5586 . 5587) (nil fontified nil 5556 . 5587) (5556 . 5587) 5555) nil (25913 19440 627536 769000) 0 nil])
([nil nil ((#("	return nil
" 0 1 (fontified t) 1 7 (face tree-sitter-hl-face:keyword fontified t) 7 8 (fontified t) 8 11 (face tree-sitter-hl-face:constant\.builtin fontified t) 11 12 (fontified t)) . 5952) (undo-tree-id2719 . -11) (undo-tree-id2720 . -10) (undo-tree-id2721 . -8) (undo-tree-id2722 . -11) 5962) nil (25913 19440 627534 23000) 0 nil])
([nil nil ((5298 . 5300) (t 25913 19440 646598 884000)) nil (25913 19483 364507 238000) 0 nil])
([nil nil ((5300 . 5308)) nil (25913 19483 364506 747000) 0 nil])
([nil nil ((#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5306) (undo-tree-id2761 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5307) (undo-tree-id2762 . -1) 5308) nil (25913 19483 364506 236000) 0 nil])
([nil nil ((5306 . 5308)) nil (25913 19483 364504 583000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5312 5320 nil nil nil t nil)) nil 49 nil #s(yas--field 1 5312 5320 nil nil nil t nil) nil nil)) (5304 . 5321) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 5304) (5304 . 5326) (#("Prin" 0 4 (fontified nil)) . 5304) (5304 . 5308) (#("Println" 0 7 (fontified nil)) . -5304) (5304 . 5311) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -5304) (undo-tree-id2759 . -4) (undo-tree-id2760 . -4) 5308) nil (25913 19483 364503 651000) 0 nil])
([nil nil ((5313 . 5319) (5312 . 5314) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -5312) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 5313) (5312 . 5313)) nil (25913 19483 364501 527000) 0 nil])
([nil nil ((apply yas--snippet-revive 5304 5321 #s(yas--snippet nil (#s(yas--field 1 5312 5320 nil nil nil t nil)) nil 49 nil #s(yas--field 1 5312 5320 nil nil nil t nil) nil nil))) nil (25913 19483 364501 26000) 0 nil])
([nil nil ((5370 . 5373)) nil (25913 19483 364500 535000) 0 nil])
([nil nil ((5373 . 5381)) nil (25913 19483 364500 285000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5385 5391 nil nil nil t nil)) nil 50 nil #s(yas--field 1 5385 5391 nil nil nil t nil) nil nil)) (5377 . 5394) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 5377) (5377 . 5399) (#("Prin" 0 4 (fontified nil)) . 5377) (5377 . 5381) (#("Println" 0 7 (fontified nil)) . -5377) (5377 . 5384) (#("Prin" 0 4 (face tree-sitter-hl-face:property fontified t)) . -5377) (undo-tree-id2742 . -4) (undo-tree-id2743 . -4) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -2) (undo-tree-id2747 . -3) (undo-tree-id2748 . -4) (undo-tree-id2749 . -4) (undo-tree-id2750 . -4) (undo-tree-id2751 . -4) (undo-tree-id2752 . -4) (undo-tree-id2753 . -4) (undo-tree-id2754 . -4) (undo-tree-id2755 . -4) (undo-tree-id2756 . -4) (undo-tree-id2757 . -4) (undo-tree-id2758 . -4) 5381) nil (25913 19483 364499 73000) 0 nil])
([nil nil ((5386 . 5390) (5385 . 5387) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -5385) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 5386) (undo-tree-id2739 . -8) (undo-tree-id2740 . -5) (undo-tree-id2741 . -6) (5385 . 5386)) nil (25913 19483 364491 368000) 0 nil])
([nil nil ((apply yas--snippet-revive 5377 5392 #s(yas--snippet nil (#s(yas--field 1 5385 5391 nil nil nil t nil)) nil 50 nil #s(yas--field 1 5385 5391 nil nil nil t nil) nil nil))) nil (25913 19483 364479 526000) 0 nil])
([nil nil ((5714 . 5715) (t 25913 19483 382520 962000)) nil (25913 19656 27035 714000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5714) (undo-tree-id2780 . -1) 5715) nil (25913 19656 27034 922000) 0 nil])
([nil nil ((5714 . 5718)) nil (25913 19656 27034 61000) 0 nil])
([nil nil ((5718 . 5725)) nil (25913 19656 27033 500000) 0 nil])
([nil nil ((5987 . 5996)) nil (25913 19656 27033 119000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5993) (undo-tree-id2777 . -1) (#("I" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5994) (undo-tree-id2778 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5995) (undo-tree-id2779 . -1) 5996) nil (25913 19656 27032 287000) 0 nil])
([nil nil ((5993 . 5994)) nil (25913 19656 27030 314000) 0 nil])
([nil nil ((apply yas--snippet-revive 6001 6004 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (5989 . 5996) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (5994 . 5997) (#("ID)" 0 3 (fontified nil)) . 5994) (5994 . 5997) (#("ID" 0 2 (fontified nil)) . -5994) (5994 . 5996)) nil (25913 19656 27029 542000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5989) (undo-tree-id2770 . -1) (#("t" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5990) (undo-tree-id2771 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5991) (undo-tree-id2772 . -1) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5992) (undo-tree-id2773 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5993) (undo-tree-id2774 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5994) (undo-tree-id2775 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -5995) (undo-tree-id2776 . -1) 5996) nil (25913 19656 27028 300000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -5996) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . 1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) 5997) nil (25913 19656 27024 122000) 0 nil])
([nil nil ((5996 . 5997)) nil (25913 19656 27014 163000) 0 nil])
([nil nil ((apply yas--snippet-revive 5997 6005 #s(yas--snippet nil nil nil 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 52 nil nil nil nil)) (5997 . 6005) (#("String()" 0 8 (fontified nil)) . 5997) (5997 . 6005) (#("String" 0 6 (fontified nil)) . -5997) (5997 . 6003)) nil (25913 19656 27010 526000) 0 nil])
([nil nil ((#("f" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5833) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5834) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5835) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5836) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (#("." 0 1 (fontified t)) . -5837) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (#("I" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5838) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (#("D" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5839) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) 5840 (t 25913 19656 46154 888000)) nil (25913 19661 553883 379000) 0 nil])
([nil nil ((5833 . 5835)) nil (25913 19661 553837 553000) 0 nil])
([nil nil ((#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5719) (undo-tree-id2913 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5720) (undo-tree-id2914 . -1) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5721) (undo-tree-id2915 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5722) (undo-tree-id2916 . -1) (#("n" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5723) (undo-tree-id2917 . -1) (#("g" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5724) (undo-tree-id2918 . -1) 5725 (t 25913 19661 575141 985000)) nil (25913 19680 627306 64000) 0 nil])
([nil nil ((5719 . 5722)) nil (25913 19680 627302 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 5719 5723 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (5719 . 5723) (#("uuid" 0 4 (fontified nil)) . 5719) (5719 . 5723) (#("uui" 0 3 (fontified nil)) . 5719) (5719 . 5722) (#("uuid" 0 4 (fontified nil)) . -5719) (5719 . 5723) (#("uui" 0 3 (face tree-sitter-hl-face:type fontified t)) . -5719) (undo-tree-id2911 . -3) (undo-tree-id2912 . -3) 5722) nil (25913 19680 627301 406000) 0 nil])
([nil nil ((5723 . 5724)) nil (25913 19680 627299 913000) 0 nil])
([nil nil ((apply yas--snippet-revive 5724 5728 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (5724 . 5728) (#("UUID" 0 4 (fontified nil)) . 5724) (5724 . 5728) (#("UUID" 0 4 (fontified nil)) . -5724) (5724 . 5728)) nil (25913 19680 627299 242000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -6002) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . 1) (undo-tree-id2910 . -1) 6003) nil (25913 19680 627297 979000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -6001) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 6002)) nil (25913 19680 627291 898000) 0 nil])
([nil nil ((#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5999) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (#("g" 0 1 (face tree-sitter-hl-face:property fontified t)) . -6000) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) 6001) nil (25913 19680 627290 235000) 0 nil])
([nil nil ((#("D" 0 1 (face tree-sitter-hl-face:type fontified t)) . -5993) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (#("." 0 1 (fontified t)) . -5994) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (#("S" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5995) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -5996) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property fontified nil)) . -5997) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property fontified t)) . -5998) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) 5999) nil (25913 19680 627286 838000) 0 nil])
([nil nil ((5994 . 5995) (#(")" 0 1 (face tree-sitter-hl-face:type fontified nil)) . -5994) (5993 . 5995)) nil (25913 19680 627033 813000) 0 nil])
([nil nil ((5932 . 5937) (t 25913 19680 647096 994000)) nil (25913 19834 459388 861000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5949) (5949 . 5950) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5949) (5949 . 5950) (5937 . 5950)) nil (25913 19834 459388 401000) 0 nil])
([nil nil ((5949 . 5950)) nil (25913 19834 459387 980000) 0 nil])
([nil nil ((#("\303\241" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5949) (undo-tree-id2946 . -1) 5950) nil (25913 19834 459387 629000) 0 nil])
([nil nil ((5949 . 5951) (#("'" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5949) (5949 . 5950)) nil (25913 19834 459386 577000) 0 nil])
([nil nil ((5950 . 5955)) nil (25913 19834 459386 36000) 0 nil])
([nil nil ((#("k" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5952) (undo-tree-id2943 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5953) (undo-tree-id2944 . -1) (#("\303\263" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5954) (undo-tree-id2945 . -1) 5955) nil (25913 19834 459385 325000) 0 nil])
([nil nil ((5952 . 5955)) nil (25913 19834 459383 922000) 0 nil])
([nil nil ((#("d" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -5954) (undo-tree-id2942 . -1) 5955) nil (25913 19834 459383 561000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -5949) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) 5950) nil (25913 19834 459382 700000) 0 nil])
([nil nil ((5949 . 5951) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil)) . -5949) (5949 . 5950)) nil (25913 19834 459381 257000) 0 nil])
([nil nil ((#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . -5950) (undo-tree-id2939 . -1) 5951) nil (25913 19834 459380 776000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -5954) (undo-tree-id2938 . -1) 5955) nil (25913 19834 459379 955000) 0 nil])
([nil nil ((5954 . 5955) (#("\"" 0 1 (fontified nil)) . -5954) (5954 . 5955)) nil (25913 19834 459379 133000) 0 nil])
([nil nil ((5954 . 5960)) nil (25913 19834 459378 672000) 0 nil])
([nil nil ((5960 . 5969)) nil (25913 19834 459378 392000) 0 nil])
([nil nil ((#("c" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5937) (undo-tree-id2927 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5938) (undo-tree-id2928 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5939) (undo-tree-id2929 . -1) (#("s" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5940) (undo-tree-id2930 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5941) (undo-tree-id2931 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5942) (undo-tree-id2932 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:function\.call tree-sitter-hl-face:variable) fontified t)) . -5943) (undo-tree-id2933 . -1) (#("." 0 1 (fontified t)) . -5944) (undo-tree-id2934 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5945) (undo-tree-id2935 . -1) (#("o" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5946) (undo-tree-id2936 . -1) (#("g" 0 1 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5947) (undo-tree-id2937 . -1) 5948) nil (25913 19834 459376 859000) 0 nil])
([nil nil ((5937 . 5941)) nil (25913 19834 459372 150000) 0 nil])
([nil nil ((5941 . 5942)) nil (25913 19834 459371 870000) 0 nil])
([nil nil ((5942 . 5945)) nil (25913 19834 459371 509000) 0 nil])
([nil nil ((apply yas--snippet-revive 5941 5948 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (5941 . 5948) (#("Println" 0 7 (fontified nil)) . 5941) (5941 . 5948) (#("Prin" 0 4 (fontified nil)) . 5941) (5941 . 5945) (#("Println" 0 7 (fontified nil)) . -5941) (5941 . 5948) (#("Prin" 0 4 (face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property) fontified t)) . -5941) (undo-tree-id2919 . -4) (undo-tree-id2920 . -4) (undo-tree-id2921 . -4) (undo-tree-id2922 . -4) (undo-tree-id2923 . -4) (undo-tree-id2924 . -4) (undo-tree-id2925 . -4) (undo-tree-id2926 . -4) 5945) nil (25913 19834 459368 583000) 0 nil])
([nil nil ((6050 . 6053) (t 25913 19834 478709 328000)) nil (25913 19845 608335 349000) 0 nil])
([nil nil ((6053 . 6057)) nil (25913 19845 608335 18000) 0 nil])
([nil nil ((6057 . 6058)) nil (25913 19845 608334 607000) 0 nil])
([nil nil ((6058 . 6062)) nil (25913 19845 608334 277000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6065 6075 nil nil nil t nil)) nil 56 nil #s(yas--field 1 6065 6075 nil nil nil t nil) nil nil)) (6057 . 6074) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 6057) (6057 . 6079) (#("Print" 0 5 (fontified nil)) . 6057) (6057 . 6062) (#("Println" 0 7 (fontified nil)) . -6057) (6057 . 6064) (#("Print" 0 5 (face tree-sitter-hl-face:property fontified t)) . -6057) (undo-tree-id2947 . -5) (undo-tree-id2948 . -5) 6062) nil (25913 19845 608333 325000) 0 nil])
([nil nil ((6066 . 6074) (6065 . 6067) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -6065) (#("a ...any" 0 1 (face tree-sitter-hl-face:variable fontified nil) 1 2 (fontified nil) 2 5 (face tree-sitter-hl-face:operator fontified nil) 5 8 (face tree-sitter-hl-face:variable fontified nil)) . 6066) (6065 . 6066)) nil (25913 19845 608320 822000) 0 nil])
([nil nil ((apply yas--snippet-revive 6057 6076 #s(yas--snippet nil (#s(yas--field 1 6065 6075 nil nil nil t nil)) nil 56 nil #s(yas--field 1 6065 6075 nil nil nil t nil) nil nil))) nil (25913 19845 608316 874000) 0 nil])
([nil nil ((#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -5352) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) 5353 (t 25913 19845 633679 682000)) nil (25913 19860 656698 762000) 0 nil])
([nil nil ((#("		fmt.Println(\"finished\")
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 13 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 13 14 (fontified t face (rainbow-delimiters-depth-3-face)) 14 24 (fontified t face tree-sitter-hl-face:string) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t)) . 6050) (undo-tree-id0 . -23) (undo-tree-id1 . -23) (undo-tree-id2 . -23) (undo-tree-id3 . -23) (undo-tree-id4 . -23) (undo-tree-id5 . -23) (undo-tree-id6 . -23) (undo-tree-id7 . -23) (undo-tree-id8 . -23) (undo-tree-id9 . -26) (undo-tree-id10 . -25) 6073 (t 25913 19860 769639 171000)) nil (25917 19695 234481 826000) 0 nil])
([nil nil ((5755 . 5758) (t 25917 19695 252229 288000)) nil (25917 20566 290516 398000) 0 nil])
([nil nil ((6426 . 6429) (t 25917 20566 307629 447000)) nil (25917 21292 874813 208000) 0 nil])
([nil nil ((6429 . 6432)) nil (25917 21292 874812 386000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6429) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6430) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6431) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 6432) nil (25917 21292 874811 433000) 0 nil])
([nil nil ((6429 . 6433)) nil (25917 21292 874808 938000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6429) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6430) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6431) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6432) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 6433) nil (25917 21292 874807 624000) 0 nil])
([nil nil ((6088 . 6099)) nil (25917 21292 874804 36000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6093) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6094) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6095) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6096) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6097) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6098) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 6099) nil (25917 21292 874802 542000) 0 nil])
([nil nil ((6093 . 6095)) nil (25917 21292 874793 411000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6093) (undo-tree-id14 . -1) (#("." 0 1 (fontified t)) . -6094) (undo-tree-id15 . -1) 6095) nil (25917 21292 874792 318000) 0 nil])
([nil nil ((6093 . 6097)) nil (25917 21292 874790 343000) 0 nil])
([nil nil ((apply yas--snippet-revive 6094 6103 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (6094 . 6103) (#("apiConfig" 0 9 (fontified nil)) . 6094) (6094 . 6103) (#("api" 0 3 (fontified nil)) . 6094) (6094 . 6097) (#("apiConfig" 0 9 (fontified nil)) . -6094) (6094 . 6103) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -6094) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) 6097) nil (25917 21292 874787 797000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -6090) (undo-tree-id138 . -1) (#("b" 0 1 (fontified t face (tree-sitter-hl-face:variable\.parameter tree-sitter-hl-face:variable))) . -6091) (undo-tree-id139 . -1) 6092 (t 25917 21292 894492 13000)) nil (25917 21764 563053 657000) 0 nil])
([nil nil ((6090 . 6091)) nil (25917 21764 563050 911000) 0 nil])
([nil nil ((6443 . 6446)) nil (25917 21764 563050 10000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6444) (undo-tree-id136 . -1) (#("," 0 1 (fontified t)) . -6445) (undo-tree-id137 . -1) 6446) nil (25917 21764 563048 787000) 0 nil])
([nil nil ((6444 . 6445)) nil (25917 21764 563046 563000) 0 nil])
([nil nil ((6445 . 6448)) nil (25917 21764 563045 741000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6459 6464 nil nil nil t #s(yas--field 2 6466 6466 nil nil nil t nil)) #s(yas--field 2 6466 6466 nil nil nil t nil)) nil 1 nil #s(yas--field 2 6466 6466 nil nil nil t nil) nil nil)) (6445 . 6510) (#("DB.CreatePost(${1:ctx context.Context}, ${2:arg database.CreatePostParams})" 0 75 (fontified nil)) . 6445) (6445 . 6520) (#("Cre" 0 3 (fontified nil)) . 6445) (6445 . 6448) (#("DB.CreatePost" 0 13 (fontified nil)) . -6445) (6445 . 6458) (#("Cre" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6445) (undo-tree-id134 . -3) (undo-tree-id135 . -3) 6448) nil (25917 21764 563044 128000) 0 nil])
([nil nil ((6460 . 6461) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 6460) (6459 . 6460)) nil (25917 21764 563036 443000) 0 nil])
([nil nil ((apply yas--snippet-revive 6461 6464 #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 1 6459 6464 nil nil nil t #s(yas--field 2 6466 6466 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil #s(yas--field 1 6459 6464 nil nil nil t #s(yas--field 2 6466 6466 nil nil nil t nil)) nil)) (6461 . 6464) (#("ctx" 0 3 (fontified nil)) . 6461) (6461 . 6464) (#("ctx" 0 3 (fontified nil)) . -6461) (6461 . 6464)) nil (25917 21764 563034 680000) 0 nil])
([nil nil ((#("arg database.CreatePostParams" 0 3 (fontified t face tree-sitter-hl-face:variable) 3 4 (fontified t) 4 12 (fontified t face tree-sitter-hl-face:variable) 12 13 (fontified t) 13 29 (fontified t face tree-sitter-hl-face:property)) . 6466)) nil (25917 21764 563033 547000) 0 nil])
([nil nil ((apply yas--snippet-revive 6445 6467 #s(yas--snippet nil (#s(yas--field 1 6459 6464 nil nil nil t #s(yas--field 2 6466 6466 nil nil nil t nil)) #s(yas--field 2 6466 6466 nil nil nil t nil)) nil 1 nil #s(yas--field 2 6466 6466 nil nil nil t nil) nil nil))) nil (25917 21764 563033 87000) 0 nil])
([nil nil ((6440 . 6443)) nil (25917 21764 563032 495000) 0 nil])
([nil nil ((6443 . 6447)) nil (25917 21764 563031 904000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6443) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6444) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6445) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6446) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 6447) nil (25917 21764 563030 381000) 0 nil])
([nil nil ((6443 . 6445)) nil (25917 21764 563025 402000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6443) (undo-tree-id124 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6444) (undo-tree-id125 . -1) 6445) nil (25917 21764 563024 790000) 0 nil])
([nil nil ((6443 . 6446)) nil (25917 21764 563022 686000) 0 nil])
([nil nil ((6446 . 6461)) nil (25917 21764 563022 225000) 0 nil])
([nil nil ((apply yas--snippet-revive 6452 6477 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (6452 . 6477) (#("database.CreatePostParams" 0 25 (fontified nil)) . 6452) (6452 . 6477) (#("CreatePos" 0 9 (fontified nil)) . 6452) (6452 . 6461) (#("database.CreatePostParams" 0 25 (fontified nil)) . -6452) (6452 . 6477) (#("CreatePos" 0 9 (fontified t face tree-sitter-hl-face:variable)) . -6452) (undo-tree-id122 . -9) (undo-tree-id123 . -9) 6461) nil (25917 21764 563021 3000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6478) (6478 . 6479) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6478) (6478 . 6479) (6477 . 6479)) nil (25917 21764 563017 506000) 0 nil])
([nil nil ((6479 . 6482)) nil (25917 21764 563016 53000) 0 nil])
([nil nil ((6482 . 6485)) nil (25917 21764 563015 232000) 0 nil])
([nil nil ((apply yas--snippet-revive 6482 6487 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (6482 . 6487) (#("dbObj" 0 5 (fontified nil)) . 6482) (6482 . 6487) (#("dbO" 0 3 (fontified nil)) . 6482) (6482 . 6485) (#("dbObj" 0 5 (fontified nil)) . -6482) (6482 . 6487) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6482) (undo-tree-id120 . -3) (undo-tree-id121 . -3) 6485) nil (25917 21764 563013 759000) 0 nil])
([nil nil ((6487 . 6489)) nil (25917 21764 563009 430000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6488) (undo-tree-id119 . -1) 6489) nil (25917 21764 563003 579000) 0 nil])
([nil nil ((6488 . 6489)) nil (25917 21764 563001 966000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6487) (undo-tree-id117 . -1) (#("." 0 1 (fontified t)) . -6488) (undo-tree-id118 . -1) 6489) nil (25917 21764 563000 984000) 0 nil])
([nil nil ((6487 . 6488)) nil (25917 21764 562998 609000) 0 nil])
([nil nil ((apply yas--snippet-revive 6488 6490 #s(yas--snippet nil nil nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil nil nil)) (6488 . 6490) (#("ID" 0 2 (fontified nil)) . 6488) (6488 . 6490) (#("ID" 0 2 (fontified nil)) . -6488) (6488 . 6490)) nil (25917 21764 562997 136000) 0 nil])
([nil nil ((6490 . 6491)) nil (25917 21764 562995 433000) 0 nil])
([nil nil ((6491 . 6496)) nil (25917 21764 562994 682000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6495) (undo-tree-id116 . -1) 6496) nil (25917 21764 562993 640000) 0 nil])
([nil nil ((6495 . 6497)) nil (25917 21764 562992 27000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6493) (undo-tree-id112 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6494) (undo-tree-id113 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6495) (undo-tree-id114 . -1) (#(" " 0 1 (fontified t)) . -6496) (undo-tree-id115 . -1) 6497) nil (25917 21764 562990 624000) 0 nil])
([nil nil ((6493 . 6501)) nil (25917 21764 562987 397000) 0 nil])
([nil nil ((#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6493) (undo-tree-id104 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6494) (undo-tree-id105 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6495) (undo-tree-id106 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6496) (undo-tree-id107 . -1) (#("." 0 1 (fontified t)) . -6497) (undo-tree-id108 . -1) (#("N" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6498) (undo-tree-id109 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6499) (undo-tree-id110 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6500) (undo-tree-id111 . -1) 6501) nil (25917 21764 562985 644000) 0 nil])
([nil nil ((6493 . 6496)) nil (25917 21764 562794 161000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6501 6501 nil nil nil t #s(yas--field 2 6503 6512 nil nil nil nil nil)) #s(yas--field 2 6503 6512 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 6501 6501 nil nil nil t #s(yas--field 2 6503 6512 nil nil nil nil nil)) nil nil)) (6493 . 6529) (#("uuid.Must(${1:uuid uuid.UUID}, ${2:err error})" 0 46 (fontified nil)) . 6493) (6493 . 6539) (#("uui" 0 3 (fontified nil)) . 6493) (6493 . 6496) (#("uuid.Must" 0 9 (fontified nil)) . -6493) (6493 . 6502) (#("uui" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6493) (undo-tree-id102 . -3) (undo-tree-id103 . -3) 6496) nil (25917 21764 562792 908000) 0 nil])
([nil nil ((#("uuid uuid.UUID" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 14 (fontified t face tree-sitter-hl-face:property)) . 6503)) nil (25917 21764 562790 383000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6501) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6502) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . 1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 6503) nil (25917 21764 562789 522000) 0 nil])
([nil nil ((apply yas--snippet-revive 6493 6513 #s(yas--snippet nil (#s(yas--field 1 6501 6501 nil nil nil t #s(yas--field 2 6503 6512 nil nil nil nil nil)) #s(yas--field 2 6503 6512 nil nil nil nil nil)) nil 6 nil #s(yas--field 1 6501 6501 nil nil nil t #s(yas--field 2 6503 6512 nil nil nil nil nil)) nil nil))) nil (25917 21764 562782 939000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6497) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("M" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6498) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6499) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6500) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("," 0 1 (fontified t)) . -6501) (undo-tree-id79 . -1) (#(" " 0 1 (fontified t)) . -6502) (undo-tree-id80 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6503) (undo-tree-id81 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6504) (undo-tree-id82 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6505) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -6506) (undo-tree-id84 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6507) (undo-tree-id85 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6508) (undo-tree-id86 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6509) (undo-tree-id87 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6510) (undo-tree-id88 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6511) (undo-tree-id89 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -6512) (undo-tree-id90 . -1) (undo-tree-id91 . 1) (undo-tree-id92 . -1) 6513) nil (25917 21764 562779 522000) 0 nil])
([nil nil ((6497 . 6499)) nil (25917 21764 562763 230000) 0 nil])
([nil nil ((6499 . 6501)) nil (25917 21764 562762 800000) 0 nil])
([nil nil ((apply yas--snippet-revive 6498 6503 #s(yas--snippet nil nil nil 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 7 nil nil nil nil)) (6498 . 6503) (#("New()" 0 5 (fontified nil)) . 6498) (6498 . 6503) (#("New" 0 3 (fontified nil)) . 6498) (6498 . 6501) (#("New" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6498) (undo-tree-id69 . -3) (undo-tree-id70 . -3) 6501) nil (25917 21764 562761 898000) 0 nil])
([nil nil ((6503 . 6506)) nil (25917 21764 562759 663000) 0 nil])
([nil nil ((6506 . 6509)) nil (25917 21764 562758 842000) 0 nil])
([nil nil ((apply yas--snippet-revive 6506 6514 #s(yas--snippet nil nil nil 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 8 nil nil nil nil)) (6506 . 6514) (#("dbObj.ID" 0 8 (fontified nil)) . 6506) (6506 . 6514) (#("dbO" 0 3 (fontified nil)) . 6506) (6506 . 6509) (#("dbObj.ID" 0 8 (fontified nil)) . -6506) (6506 . 6514) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6506) (undo-tree-id67 . -3) (undo-tree-id68 . -3) 6509) nil (25917 21764 562757 259000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6511) (undo-tree-id64 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6512) (undo-tree-id65 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6513) (undo-tree-id66 . -1) 6514) nil (25917 21764 562752 930000) 0 nil])
([nil nil ((6511 . 6512)) nil (25917 21764 562749 794000) 0 nil])
([nil nil ((apply yas--snippet-revive 6512 6518 #s(yas--snippet nil nil nil 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 9 nil nil nil nil)) (6512 . 6518) (#("FeedID" 0 6 (fontified nil)) . 6512) (6512 . 6518) (#("FeedID" 0 6 (fontified nil)) . -6512) (6512 . 6518)) nil (25917 21764 562748 622000) 0 nil])
([nil nil ((6518 . 6521)) nil (25917 21764 562747 49000) 0 nil])
([nil nil ((6089 . 6102)) nil (25917 21764 562746 197000) 0 nil])
([nil nil ((6101 . 6105)) nil (25917 21764 562745 366000) 0 nil])
([nil nil ((apply yas--snippet-revive 6102 6106 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (6102 . 6106) (#("UUID" 0 4 (fontified nil)) . 6102) (6102 . 6106) (#("UUI" 0 3 (fontified nil)) . 6102) (6102 . 6105) (#("UUID" 0 4 (fontified nil)) . -6102) (6102 . 6106) (#("UUI" 0 3 (fontified t face tree-sitter-hl-face:type)) . -6102) (undo-tree-id62 . -3) (undo-tree-id63 . -3) 6105) nil (25917 21764 562744 133000) 0 nil])
([nil nil ((5775 . 5781)) nil (25917 21764 562740 726000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5778) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5779) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5780) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 5781) nil (25917 21764 562739 324000) 0 nil])
([nil nil ((5778 . 5781)) nil (25917 21764 562733 773000) 0 nil])
([nil nil ((apply yas--snippet-revive 5777 5784 #s(yas--snippet nil nil nil 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 11 nil nil nil nil)) (5777 . 5784) (#("feed.ID" 0 7 (fontified nil)) . 5777) (5777 . 5784) (#("feed" 0 4 (fontified nil)) . 5777) (5777 . 5781) (#("feed.ID" 0 7 (fontified nil)) . -5777) (5777 . 5784) (#("feed" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -5777) (undo-tree-id54 . -4) (undo-tree-id55 . -4) 5781) nil (25917 21764 562731 198000) 0 nil])
([nil nil ((5784 . 5787)) nil (25917 21764 562717 451000) 0 nil])
([nil nil ((6551 . 6554) (t 25917 21764 595901 435000)) nil (25917 22050 539950 764000) 0 nil])
([nil nil ((apply yas--snippet-revive 6551 6557 #s(yas--snippet nil nil nil 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 12 nil nil nil nil)) (6551 . 6557) (#("feedId" 0 6 (fontified nil)) . 6551) (6551 . 6557) (#("fee" 0 3 (fontified nil)) . 6551) (6551 . 6554) (#("feedId" 0 6 (fontified nil)) . -6551) (6551 . 6557) (#("fee" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6551) (undo-tree-id208 . -3) (undo-tree-id209 . -3) 6554) nil (25917 22050 539949 632000) 0 nil])
([nil nil ((6557 . 6560)) nil (25917 22050 539946 917000) 0 nil])
([nil nil ((6560 . 6563)) nil (25917 22050 539946 506000) 0 nil])
([nil nil ((apply yas--snippet-revive 6560 6565 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (6560 . 6565) (#("dbObj" 0 5 (fontified nil)) . 6560) (6560 . 6565) (#("dbO" 0 3 (fontified nil)) . 6560) (6560 . 6563) (#("dbObj" 0 5 (fontified nil)) . -6560) (6560 . 6565) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6560) (undo-tree-id206 . -3) (undo-tree-id207 . -3) 6563) nil (25917 22050 539945 625000) 0 nil])
([nil nil ((6565 . 6566)) nil (25917 22050 539944 212000) 0 nil])
([nil nil ((apply yas--snippet-revive 6566 6571 #s(yas--snippet nil nil nil 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 14 nil nil nil nil)) (6566 . 6571) (#("Title" 0 5 (fontified nil)) . 6566) (6566 . 6571) (#("Title" 0 5 (fontified nil)) . -6566) (6566 . 6571)) nil (25917 22050 539943 771000) 0 nil])
([nil nil ((6571 . 6572)) nil (25917 22050 539943 280000) 0 nil])
([nil nil ((6572 . 6574)) nil (25917 22050 539943 120000) 0 nil])
([nil nil ((6574 . 6583)) nil (25917 22050 539942 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 6579 6584 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (6579 . 6584) (#("Title" 0 5 (fontified nil)) . 6579) (6579 . 6584) (#("Titl" 0 4 (fontified nil)) . 6579) (6579 . 6583) (#("Title" 0 5 (fontified nil)) . -6579) (6579 . 6584) (#("Titl" 0 4 (fontified t face tree-sitter-hl-face:property)) . -6579) (undo-tree-id204 . -4) (undo-tree-id205 . -4) 6583) nil (25917 22050 539942 138000) 0 nil])
([nil nil ((6584 . 6587)) nil (25917 22050 539940 185000) 0 nil])
([nil nil ((6587 . 6590)) nil (25917 22050 539939 503000) 0 nil])
([nil nil ((apply yas--snippet-revive 6587 6592 #s(yas--snippet nil nil nil 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 16 nil nil nil nil)) (6587 . 6592) (#("dbObj" 0 5 (fontified nil)) . 6587) (6587 . 6592) (#("dbO" 0 3 (fontified nil)) . 6587) (6587 . 6590) (#("dbObj" 0 5 (fontified nil)) . -6587) (6587 . 6592) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6587) (undo-tree-id202 . -3) (undo-tree-id203 . -3) 6590) nil (25917 22050 539938 672000) 0 nil])
([nil nil ((6592 . 6593)) nil (25917 22050 539936 718000) 0 nil])
([nil nil ((apply yas--snippet-revive 6593 6604 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (6593 . 6604) (#("PublishedAt" 0 11 (fontified nil)) . 6593) (6593 . 6604) (#("PublishedAt" 0 11 (fontified nil)) . -6593) (6593 . 6604)) nil (25917 22050 539936 167000) 0 nil])
([nil nil ((6604 . 6612)) nil (25917 22050 539935 586000) 0 nil])
([nil nil ((apply yas--snippet-revive 6612 6619 #s(yas--snippet nil nil nil 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 18 nil nil nil nil)) (6612 . 6619) (#("PubDate" 0 7 (fontified nil)) . 6612) (6612 . 6619) (#("PubDate" 0 7 (fontified nil)) . -6612) (6612 . 6619)) nil (25917 22050 539935 175000) 0 nil])
([nil nil ((6607 . 6618)) nil (25917 22050 539934 394000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6617) (undo-tree-id199 . -1) (undo-tree-id200 . 1) (undo-tree-id201 . -1) 6618) nil (25917 22050 539933 843000) 0 nil])
([nil nil ((6629 . 6630) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -6629) (6629 . 6630)) nil (25917 22050 539931 719000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6616) (undo-tree-id183 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6617) (undo-tree-id184 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6618) (undo-tree-id185 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6619) (undo-tree-id186 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6620) (undo-tree-id187 . -1) (#("." 0 1 (fontified t)) . -6621) (undo-tree-id188 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6622) (undo-tree-id189 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6623) (undo-tree-id190 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6624) (undo-tree-id191 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6625) (undo-tree-id192 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6626) (undo-tree-id193 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6627) (undo-tree-id194 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6628) (undo-tree-id195 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6629) (undo-tree-id196 . -1) (undo-tree-id197 . 1) (undo-tree-id198 . -1) 6630) nil (25917 22050 539929 615000) 0 nil])
([nil nil ((6616 . 6619)) nil (25917 22050 539922 632000) 0 nil])
([nil nil ((6619 . 6620)) nil (25917 22050 539922 201000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6616) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6617) (undo-tree-id180 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6618) (undo-tree-id181 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6619) (undo-tree-id182 . -1) 6620) nil (25917 22050 539921 409000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6612) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6613) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6614) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6615) (undo-tree-id176 . -1) (undo-tree-id177 . -1) 6616) nil (25917 22050 539919 65000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6618) (6618 . 6619) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6618) (6618 . 6619) (6612 . 6619)) nil (25917 22050 539915 488000) 0 nil])
([nil nil ((6618 . 6623)) nil (25917 22050 539914 296000) 0 nil])
([nil nil ((apply yas--snippet-revive 6623 6630 #s(yas--snippet nil nil nil 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 19 nil nil nil nil)) (6623 . 6630) (#("PubDate" 0 7 (fontified nil)) . 6623) (6623 . 6630) (#("PubDate" 0 7 (fontified nil)) . -6623) (6623 . 6630)) nil (25917 22050 539913 434000) 0 nil])
([nil nil ((6604 . 6609)) nil (25917 22050 539912 282000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6604) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#(" " 0 1 (fontified t)) . -6605) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6606) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6607) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6608) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#(" " 0 1 (fontified t)) . -6609) (undo-tree-id169 . -1) 6610) nil (25917 22050 539911 310000) 0 nil])
([nil nil ((#("time.Parse(item.PubDate)" 0 4 (fontified t face tree-sitter-hl-face:variable) 4 5 (fontified t) 5 10 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 15 (fontified t face tree-sitter-hl-face:variable) 15 16 (fontified t) 16 23 (fontified t face tree-sitter-hl-face:property) 23 24 (fontified t face (rainbow-delimiters-depth-3-face))) . 6606) (undo-tree-id148 . -23) (undo-tree-id149 . -23) (undo-tree-id150 . 24) (undo-tree-id151 . -23) (undo-tree-id152 . -11) (undo-tree-id153 . -23) (undo-tree-id154 . -23) (undo-tree-id155 . 1) (undo-tree-id156 . -24) (undo-tree-id157 . 14) (undo-tree-id158 . -11) 6629) nil (25917 22050 539907 72000) 0 nil])
([nil nil ((6470 . 6473)) nil (25917 22050 539817 454000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -6471) (undo-tree-id147 . -2) 6473) nil (25917 22050 539816 653000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6494 . 6495) (nil fontified nil 6471 . 6495) (6471 . 6495)) nil (25917 22050 539815 591000) 0 nil])
([nil nil ((6472 . 6473)) nil (25917 22050 539814 939000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6472) (undo-tree-id146 . -1) 6473) nil (25917 22050 539813 928000) 0 nil])
([nil nil ((6471 . 6488)) nil (25917 22050 539813 216000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6486) (undo-tree-id144 . -1) (#(":" 0 1 (fontified t)) . -6487) (undo-tree-id145 . -1) 6488) nil (25917 22050 539812 555000) 0 nil])
([nil nil ((6486 . 6491)) nil (25917 22050 539811 22000) 0 nil])
([nil nil ((6491 . 6495)) nil (25917 22050 539810 762000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6475) (undo-tree-id143 . -1) 6476) nil (25917 22050 539810 331000) 0 nil])
([nil nil ((6475 . 6476)) nil (25917 22050 539809 720000) 0 nil])
([nil nil ((6519 . 6522)) nil (25917 22050 539809 359000) 0 nil])
([nil nil ((6522 . 6527)) nil (25917 22050 539808 798000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6525) (undo-tree-id141 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6526) (undo-tree-id142 . -1) 6527) nil (25917 22050 539807 756000) 0 nil])
([nil nil ((6525 . 6528)) nil (25917 22050 539806 3000) 0 nil])
([nil nil ((6528 . 6529)) nil (25917 22050 539805 341000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6537) (6537 . 6538) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6537) (6537 . 6538) (6529 . 6538)) nil (25917 22050 539804 670000) 0 nil])
([nil nil ((6538 . 6541) (6539 . 6541) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 6538) (6538 . 6541) (6537 . 6539)) nil (25917 22050 539803 338000) 0 nil])
([nil nil ((6541 . 6548)) nil (25917 22050 539802 226000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6547) (undo-tree-id140 . -1) 6548) nil (25917 22050 539801 414000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6539 . 6540) (#("
" 0 1 (fontified nil)) . -6577) (6537 . 6578) 6529) nil (25917 22050 539793 329000) 0 nil])
([nil nil ((6540 . 6542)) nil (25917 22050 539789 662000) 0 nil])
([nil nil ((6727 . 6728) (t 25917 22050 653618 19000)) nil (25917 22200 775868 291000) 0 nil])
([nil nil ((6730 . 6732)) nil (25917 22200 775867 820000) 0 nil])
([nil nil ((6732 . 6733)) nil (25917 22200 775867 79000) 0 nil])
([nil nil ((apply yas--snippet-revive 6730 6741 #s(yas--snippet nil nil nil 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 20 nil nil nil nil)) (6730 . 6741) (#("publishDate" 0 11 (fontified nil)) . 6730) (6730 . 6741) (#("pub" 0 3 (fontified nil)) . 6730) (6730 . 6733) (#("publishDate" 0 11 (fontified nil)) . -6730) (6730 . 6741) (#("pub" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6730) (undo-tree-id270 . -3) (undo-tree-id271 . -3) 6733) nil (25917 22200 775866 97000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6566) (undo-tree-id269 . -1) 6567) nil (25917 22200 775863 592000) 0 nil])
([nil nil ((6740 . 6743)) nil (25917 22200 775862 450000) 0 nil])
([nil nil ((6743 . 6747)) nil (25917 22200 775861 879000) 0 nil])
([nil nil ((apply yas--snippet-revive 6743 6748 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (6743 . 6748) (#("dbObj" 0 5 (fontified nil)) . 6743) (6743 . 6748) (#("dbOb" 0 4 (fontified nil)) . 6743) (6743 . 6747) (#("dbObj" 0 5 (fontified nil)) . -6743) (6743 . 6748) (#("dbOb" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6743) (undo-tree-id267 . -4) (undo-tree-id268 . -4) 6747) nil (25917 22200 775860 847000) 0 nil])
([nil nil ((6748 . 6749)) nil (25917 22200 775859 434000) 0 nil])
([nil nil ((apply yas--snippet-revive 6749 6752 #s(yas--snippet nil nil nil 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 22 nil nil nil nil)) (6749 . 6752) (#("Url" 0 3 (fontified nil)) . 6749) (6749 . 6752) (#("Url" 0 3 (fontified nil)) . -6749) (6749 . 6752)) nil (25917 22200 775859 13000) 0 nil])
([nil nil ((6752 . 6753)) nil (25917 22200 775858 81000) 0 nil])
([nil nil ((6753 . 6760)) nil (25917 22200 775857 811000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6755) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6756) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6757) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6758) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("." 0 1 (fontified t)) . -6759) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 6760) nil (25917 22200 775856 829000) 0 nil])
([nil nil ((6755 . 6758)) nil (25917 22200 775852 561000) 0 nil])
([nil nil ((6758 . 6761)) nil (25917 22200 775852 170000) 0 nil])
([nil nil ((6761 . 6765)) nil (25917 22200 775851 569000) 0 nil])
([nil nil ((apply yas--snippet-revive 6761 6766 #s(yas--snippet nil nil nil 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 23 nil nil nil nil)) (6761 . 6766) (#("dbObj" 0 5 (fontified nil)) . 6761) (6761 . 6766) (#("dbOb" 0 4 (fontified nil)) . 6761) (6761 . 6765) (#("dbObj" 0 5 (fontified nil)) . -6761) (6761 . 6766) (#("dbOb" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6761) (undo-tree-id255 . -4) (undo-tree-id256 . -4) 6765) nil (25917 22200 775850 637000) 0 nil])
([nil nil ((6766 . 6767)) nil (25917 22200 775848 533000) 0 nil])
([nil nil ((apply yas--snippet-revive 6767 6778 #s(yas--snippet nil nil nil 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 24 nil nil nil nil)) (6767 . 6778) (#("Description" 0 11 (fontified nil)) . 6767) (6767 . 6778) (#("Description" 0 11 (fontified nil)) . -6767) (6767 . 6778)) nil (25917 22200 775847 631000) 0 nil])
([nil nil ((6778 . 6785)) nil (25917 22200 775846 689000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6784) (undo-tree-id254 . -1) 6785) nil (25917 22200 775846 28000) 0 nil])
([nil nil ((6784 . 6786)) nil (25917 22200 775845 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 6786 6790 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (6786 . 6790) (#("Desc" 0 4 (fontified nil)) . 6786) (6786 . 6790) (#("Desc" 0 4 (fontified nil)) . -6786) (6786 . 6790)) nil (25917 22200 775844 646000) 0 nil])
([nil nil ((6790 . 6793)) nil (25917 22200 775843 684000) 0 nil])
([nil nil ((6790 . 6793)) nil (25917 22200 775843 443000) 0 nil])
([nil nil ((6793 . 6796)) nil (25917 22200 775843 42000) 0 nil])
([nil nil ((apply yas--snippet-revive 6793 6798 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (6793 . 6798) (#("dbObj" 0 5 (fontified nil)) . 6793) (6793 . 6798) (#("dbO" 0 3 (fontified nil)) . 6793) (6793 . 6796) (#("dbObj" 0 5 (fontified nil)) . -6793) (6793 . 6798) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6793) (undo-tree-id252 . -3) (undo-tree-id253 . -3) 6796) nil (25917 22200 775842 411000) 0 nil])
([nil nil ((6798 . 6799)) nil (25917 22200 775840 898000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6793) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6794) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6795) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6796) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6797) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("." 0 1 (fontified t)) . -6798) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 6799) nil (25917 22200 775839 616000) 0 nil])
([nil nil ((6793 . 6804)) nil (25917 22200 775835 538000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6803) (undo-tree-id239 . -1) 6804) nil (25917 22200 775835 248000) 0 nil])
([nil nil ((6803 . 6814)) nil (25917 22200 775834 696000) 0 nil])
([nil nil ((apply yas--snippet-revive 6811 6816 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (6811 . 6816) (#("Now()" 0 5 (fontified nil)) . 6811) (6811 . 6816) (#("Now" 0 3 (fontified nil)) . 6811) (6811 . 6814) (#("Now" 0 3 (fontified t face tree-sitter-hl-face:property)) . -6811) (undo-tree-id237 . -3) (undo-tree-id238 . -3) 6814) nil (25917 22200 775834 5000) 0 nil])
([nil nil ((6816 . 6819)) nil (25917 22200 775831 881000) 0 nil])
([nil nil ((6819 . 6825)) nil (25917 22200 775831 160000) 0 nil])
([nil nil ((apply yas--snippet-revive 6825 6834 #s(yas--snippet nil nil nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 28 nil nil nil nil)) (6825 . 6834) (#("CreatedAt" 0 9 (fontified nil)) . 6825) (6825 . 6834) (#("CreatedAt" 0 9 (fontified nil)) . -6825) (6825 . 6834)) nil (25917 22200 775830 579000) 0 nil])
([nil nil ((6834 . 6841)) nil (25917 22200 775829 697000) 0 nil])
([nil nil ((apply yas--snippet-revive 6837 6846 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (6837 . 6846) (#("timeStamp" 0 9 (fontified nil)) . 6837) (6837 . 6846) (#("time" 0 4 (fontified nil)) . 6837) (6837 . 6841) (#("timeStamp" 0 9 (fontified nil)) . -6837) (6837 . 6846) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6837) (undo-tree-id235 . -4) (undo-tree-id236 . -4) 6841) nil (25917 22200 775828 815000) 0 nil])
([nil nil ((6846 . 6849)) nil (25917 22200 775826 461000) 0 nil])
([nil nil ((6849 . 6852)) nil (25917 22200 775825 930000) 0 nil])
([nil nil ((apply yas--snippet-revive 6849 6854 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (6849 . 6854) (#("dbObj" 0 5 (fontified nil)) . 6849) (6849 . 6854) (#("dbO" 0 3 (fontified nil)) . 6849) (6849 . 6852) (#("dbObj" 0 5 (fontified nil)) . -6849) (6849 . 6854) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6849) (undo-tree-id233 . -3) (undo-tree-id234 . -3) 6852) nil (25917 22200 775824 457000) 0 nil])
([nil nil ((6854 . 6857)) nil (25917 22200 775822 162000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6855) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("p" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6856) (undo-tree-id232 . -1) 6857) nil (25917 22200 775821 641000) 0 nil])
([nil nil ((6855 . 6859)) nil (25917 22200 775819 968000) 0 nil])
([nil nil ((apply yas--snippet-revive 6855 6864 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (6855 . 6864) (#("UpdatedAt" 0 9 (fontified nil)) . 6855) (6855 . 6864) (#("Upda" 0 4 (fontified nil)) . 6855) (6855 . 6859) (#("UpdatedAt" 0 9 (fontified nil)) . -6855) (6855 . 6864) (#("Upda" 0 4 (fontified t face tree-sitter-hl-face:property)) . -6855) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) 6859) nil (25917 22200 775818 886000) 0 nil])
([nil nil ((6864 . 6871)) nil (25917 22200 775703 605000) 0 nil])
([nil nil ((apply yas--snippet-revive 6867 6876 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (6867 . 6876) (#("timeStamp" 0 9 (fontified nil)) . 6867) (6867 . 6876) (#("time" 0 4 (fontified nil)) . 6867) (6867 . 6871) (#("timeStamp" 0 9 (fontified nil)) . -6867) (6867 . 6876) (#("time" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -6867) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -1) (undo-tree-id213 . -2) (undo-tree-id214 . -3) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) 6871) nil (25917 22200 775701 842000) 0 nil])
([nil nil ((6905 . 6910)) nil (25917 22200 775686 372000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 6877) (undo-tree-id272 . -2) (undo-tree-id273 . 1) (undo-tree-id274 . -2) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -3) 6878 (t 25917 22200 795881 41000)) nil (25917 22203 124844 135000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6755) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6756) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6757) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) 6758 (t 25917 22203 147971 301000)) nil (25917 22425 890113 531000) 0 nil])
([nil nil ((6755 . 6760)) nil (25917 22425 890090 809000) 0 nil])
([nil nil ((apply yas--snippet-revive 6760 6764 #s(yas--snippet nil nil nil 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 33 nil nil nil nil)) (6760 . 6764) (#("Link" 0 4 (fontified nil)) . 6760) (6760 . 6764) (#("Link" 0 4 (fontified nil)) . -6760) (6760 . 6764)) nil (25917 22425 890082 622000) 0 nil])
([nil nil ((6882 . 6885) (t 25917 22426 7052 838000)) nil (25917 22448 900116 390000) 0 nil])
([nil nil ((6885 . 6888)) nil (25917 22448 900115 318000) 0 nil])
([nil nil ((apply yas--snippet-revive 6885 6888 #s(yas--snippet nil nil nil 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 34 nil nil nil nil)) (6885 . 6888) (#("fmt" 0 3 (fontified nil)) . 6885) (6885 . 6888) (#("fmt" 0 3 (fontified nil)) . 6885) (6885 . 6888) (#("fmt" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6885) (undo-tree-id303 . -3) (undo-tree-id304 . -3) 6888) nil (25917 22448 900113 987000) 0 nil])
([nil nil ((6888 . 6889)) nil (25917 22448 900109 672000) 0 nil])
([nil nil ((6889 . 6893)) nil (25917 22448 900109 271000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6897 6898 nil nil nil t nil)) nil 35 nil #s(yas--field 1 6897 6898 nil nil nil t nil) nil nil)) (6889 . 6906) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 6889) (6889 . 6911) (#("Prin" 0 4 (fontified nil)) . 6889) (6889 . 6893) (#("Println" 0 7 (fontified nil)) . -6889) (6889 . 6896) (#("Prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -6889) (undo-tree-id301 . -4) (undo-tree-id302 . -4) 6893) nil (25917 22448 900108 110000) 0 nil])
([nil nil ((#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 6898) (undo-tree-id300 . -8) (6897 . 6898)) nil (25917 22448 900103 205000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face tree-sitter-hl-face:number)) . -6897) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) 6898) nil (25917 22448 900100 261000) 0 nil])
([nil nil ((6897 . 6898)) nil (25917 22448 900087 617000) 0 nil])
([nil nil ((apply yas--snippet-revive 6889 6899 #s(yas--snippet nil (#s(yas--field 1 6897 6898 nil nil nil t nil)) nil 35 nil #s(yas--field 1 6897 6898 nil nil nil t nil) nil nil))) nil (25917 22448 900081 520000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6901 . 6902) (#("
" 0 1 (fontified nil)) . -6951) (6899 . 6952) 6898 (t 25917 22448 927909 752000)) nil (25917 22466 754269 516000) 0 nil])
([nil nil ((#("		fmt.Println(i)
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 13 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 13 14 (fontified t face (rainbow-delimiters-depth-3-face)) 14 15 (fontified t face tree-sitter-hl-face:variable) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 17 (fontified t)) . 6883) (undo-tree-id305 . -16) (undo-tree-id306 . -14) (undo-tree-id307 . -15) (undo-tree-id308 . -2) 6885) nil (25917 22466 754264 259000) 0 nil])
([nil nil ((#("		fmt.Printf(\"%v. item title: %v\\n\", i, item.Title)
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 12 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 32 (fontified t face tree-sitter-hl-face:string) 32 33 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 33 34 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 34 35 (fontified t face tree-sitter-hl-face:string) 35 37 (fontified t) 37 38 (fontified t face tree-sitter-hl-face:variable) 38 40 (fontified t) 40 44 (fontified t face tree-sitter-hl-face:variable) 44 45 (fontified t) 45 50 (fontified t face tree-sitter-hl-face:property) 50 51 (fontified t face (rainbow-delimiters-depth-3-face)) 51 52 (fontified t)) . 6883) (undo-tree-id309 . -51) (undo-tree-id310 . 2) (undo-tree-id311 . -52) (undo-tree-id312 . -45) (undo-tree-id313 . -50) (undo-tree-id314 . -49) (undo-tree-id315 . -49) (undo-tree-id316 . -49) (undo-tree-id317 . -49) (undo-tree-id318 . -49) (undo-tree-id319 . -49) (undo-tree-id320 . -49) (undo-tree-id321 . -49) (undo-tree-id322 . -49) (undo-tree-id323 . -49) (undo-tree-id324 . -49) (undo-tree-id325 . -52) 6932 (t 25917 22466 774784 487000)) nil (25917 22469 1038 423000) 0 nil])
([nil nil ((6518 . 6525) (t 25917 22469 26391 371000)) nil (25917 22716 570184 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 6525 6532 #s(yas--snippet nil nil nil 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 36 nil nil nil nil)) (6525 . 6532) (#("PubDate" 0 7 (fontified nil)) . 6525) (6525 . 6532) (#("PubDate" 0 7 (fontified nil)) . -6525) (6525 . 6532)) nil (25917 22716 570176 399000) 0 nil])
([nil nil ((6470 . 6473) (t 25917 22716 597417 160000)) nil (25917 23174 2798 511000) 0 nil])
([nil nil ((6483 . 6485) (#("\"" 0 1 (fontified nil)) . -6483) (6473 . 6484)) nil (25917 23174 2798 50000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6514 . 6515) (nil fontified nil 6484 . 6515) (6484 . 6515) 6483) nil (25917 23174 2797 87000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6566) (undo-tree-id326 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6567) (undo-tree-id327 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6568) (undo-tree-id328 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6569) (undo-tree-id329 . -1) (#("." 0 1 (fontified t)) . -6570) (undo-tree-id330 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6571) (undo-tree-id331 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6572) (undo-tree-id332 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6573) (undo-tree-id333 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6574) (undo-tree-id334 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6575) (undo-tree-id335 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6576) (undo-tree-id336 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6577) (undo-tree-id337 . -1) 6578) nil (25917 23174 2793 226000) 0 nil])
([nil nil ((6566 . 6572)) nil (25917 23174 2769 738000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6552) (undo-tree-id340 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6553) (undo-tree-id341 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6554) (undo-tree-id342 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6555) (undo-tree-id343 . -1) (#("." 0 1 (fontified t)) . -6556) (undo-tree-id344 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6557) (undo-tree-id345 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6558) (undo-tree-id346 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6559) (undo-tree-id347 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6560) (undo-tree-id348 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6561) (undo-tree-id349 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6562) (undo-tree-id350 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6563) (undo-tree-id351 . -1) 6564 (t 25917 23174 124129 67000)) nil (25917 23235 371200 79000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6552) (undo-tree-id338 . -1) (#(" " 0 1 (fontified t)) . -6553) (undo-tree-id339 . -1) 6554) nil (25917 23235 371190 357000) 0 nil])
([nil nil ((6558 . 6565)) nil (25917 23235 371176 986000) 0 nil])
([nil nil ((apply yas--snippet-revive 6565 6572 #s(yas--snippet nil nil nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 37 nil nil nil nil)) (6565 . 6572) (#("PubDate" 0 7 (fontified nil)) . 6565) (6565 . 6572) (#("PubDate" 0 7 (fontified nil)) . -6565) (6565 . 6572)) nil (25917 23235 371170 982000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6552) (undo-tree-id354 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6553) (undo-tree-id355 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6554) (undo-tree-id356 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6555) (undo-tree-id357 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6556) (undo-tree-id358 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6557) (undo-tree-id359 . -1) 6558 (t 25917 23235 494299 150000)) nil (25917 23513 760087 282000) 0 nil])
([nil nil ((6552 . 6553)) nil (25917 23513 760081 832000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6552) (undo-tree-id352 . -1) (undo-tree-id353 . -1) 6553) nil (25917 23513 760080 570000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6559 . 6560) (nil fontified nil 6552 . 6560) (6552 . 6560) 6551) nil (25917 23513 760064 388000) 0 nil])
([nil nil ((6552 . 6557)) nil (25917 23513 760051 904000) 0 nil])
([nil nil ((#("		layout := \"Fri, 06 Oct 2023 00:00:00 +0000\"
" 0 2 (fontified t) 2 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 11 (fontified t face tree-sitter-hl-face:operator) 11 12 (fontified t) 12 13 (fontified t face tree-sitter-hl-face:string) 13 43 (fontified t face tree-sitter-hl-face:string) 43 44 (fontified t rear-nonsticky t face tree-sitter-hl-face:string) 44 45 (fontified t face tree-sitter-hl-face:string) 45 46 (fontified t)) . 6471) (undo-tree-id360 . -45) (undo-tree-id361 . -13) (undo-tree-id362 . -42) (undo-tree-id363 . -2) (undo-tree-id364 . -8) (undo-tree-id365 . -42) (undo-tree-id366 . -42) (undo-tree-id367 . -42) (undo-tree-id368 . -46) 6513 (t 25917 23513 787218 365000)) nil (25917 23515 904276 328000) 0 nil])
([nil nil ((6900 . 6910) (t 25917 23515 927310 123000)) nil (25917 23964 876399 159000) 0 nil])
([nil nil ((6939 . 6942)) nil (25917 23964 876398 197000) 0 nil])
([nil nil ((6942 . 6946)) nil (25917 23964 876397 325000) 0 nil])
([nil nil ((6946 . 6948)) nil (25917 23964 876396 284000) 0 nil])
([nil nil ((apply yas--snippet-revive 6945 6948 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (6945 . 6948) (#("err" 0 3 (fontified nil)) . 6945) (6945 . 6948) (#("err" 0 3 (fontified nil)) . 6945) (6945 . 6948) (#("err" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -6945) (undo-tree-id506 . -3) (undo-tree-id507 . -3) 6948) nil (25917 23964 876394 450000) 0 nil])
([nil nil ((6950 . 6952) (6949 . 6951) (#("'" 0 1 (fontified nil)) . -6949) (6948 . 6950)) nil (25917 23964 876390 423000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6950) (undo-tree-id504 . -1) (#(" " 0 1 (fontified t)) . -6951) (undo-tree-id505 . -1) 6952) nil (25917 23964 876388 179000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -6949) (undo-tree-id503 . -1) (#("'" 0 1 (fontified t)) . 6950)) nil (25917 23964 876384 713000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -6957) (6957 . 6958) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6957) (6957 . 6958) (6949 . 6958)) nil (25917 23964 876382 629000) 0 nil])
([nil nil ((6958 . 6961) (6959 . 6961) (#("			" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 6958) (6958 . 6961) (6957 . 6959)) nil (25917 23964 876381 627000) 0 nil])
([nil nil ((6903 . 6904)) nil (25917 23964 876381 86000) 0 nil])
([nil nil ((6946 . 6947)) nil (25917 23964 876380 645000) 0 nil])
([nil nil ((6963 . 6970)) nil (25917 23964 876380 305000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6969) (undo-tree-id502 . -1) 6970) nil (25917 23964 876379 453000) 0 nil])
([nil nil ((6959 . 6963)) nil (25917 23964 876378 381000) 0 nil])
([nil nil ((6963 . 6967)) nil (25917 23964 876377 9000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6966) (undo-tree-id500 . -1) (undo-tree-id501 . -1) 6967) nil (25917 23964 876375 766000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6963) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6964) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6965) (undo-tree-id498 . -1) (undo-tree-id499 . -1) 6966) nil (25917 23964 876373 292000) 0 nil])
([nil nil ((6963 . 6966)) nil (25917 23964 876369 765000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6963) (undo-tree-id491 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:keyword)) . -6964) (undo-tree-id492 . -1) (#(" " 0 1 (fontified t)) . -6965) (undo-tree-id493 . -1) 6966) nil (25917 23964 876368 523000) 0 nil])
([nil nil ((6963 . 6966)) nil (25917 23964 876366 249000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6959) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("	" 0 1 (fontified t)) . -6960) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("	" 0 1 (fontified t)) . -6961) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (#("	" 0 1 (fontified t)) . -6962) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6963) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6964) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6965) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) 6966) nil (25917 23964 876359 877000) 0 nil])
([nil nil ((#("		_, derr := a.DB.CreatePost(a.ctx, dbObj)
		if derr != nil {
			return
		}
" 0 2 (fontified t) 2 3 (fontified t face tree-sitter-hl-face:variable) 3 5 (fontified t) 5 6 (fontified t face tree-sitter-hl-face:variable) 6 9 (fontified t face tree-sitter-hl-face:variable) 9 10 (fontified t) 10 12 (fontified t face tree-sitter-hl-face:operator) 12 13 (fontified t) 13 14 (fontified t face tree-sitter-hl-face:variable) 14 15 (fontified t) 15 17 (fontified t face tree-sitter-hl-face:property) 17 18 (fontified t) 18 28 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 30 (fontified t face tree-sitter-hl-face:variable) 30 31 (fontified t) 31 34 (fontified t face tree-sitter-hl-face:property) 34 36 (fontified t) 36 41 (fontified t face tree-sitter-hl-face:variable) 41 42 (fontified t face (rainbow-delimiters-depth-3-face)) 42 43 (fontified t) 43 45 (fontified t) 45 47 (fontified t face tree-sitter-hl-face:keyword) 47 48 (fontified t) 48 49 (fontified t face tree-sitter-hl-face:variable) 49 52 (fontified t face tree-sitter-hl-face:variable) 52 53 (fontified t) 53 55 (fontified t face tree-sitter-hl-face:operator) 55 56 (fontified t) 56 59 (fontified t face tree-sitter-hl-face:constant\.builtin) 59 60 (fontified t) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 62 (fontified t) 62 65 (fontified t) 65 71 (fontified t face tree-sitter-hl-face:keyword) 71 72 (fontified t) 72 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-3-face)) 75 76 (fontified t)) . 6898) (undo-tree-id563 . -74) (undo-tree-id564 . -75) (undo-tree-id565 . 15) (undo-tree-id566 . -42) (undo-tree-id567 . -74) (undo-tree-id568 . -2) (undo-tree-id569 . -9) (undo-tree-id570 . -9) (undo-tree-id571 . -60) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -74) 6900 (t 25917 23964 903707 80000)) nil (25917 24000 1297 656000) 0 nil])
([nil nil ((6898 . 6974)) nil (25917 24000 1282 889000) 0 nil])
([nil nil ((6959 . 6963) (t 25917 23964 903707 80000)) nil (25917 24000 1281 446000) 0 nil])
([nil nil ((6963 . 6968)) nil (25917 24000 1279 983000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6967) (undo-tree-id562 . -1) 6968) nil (25917 24000 1278 120000) 0 nil])
([nil nil ((6967 . 6971)) nil (25917 24000 1276 377000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6967 6995 nil nil nil t nil)) nil 39 nil #s(yas--field 1 6967 6995 nil nil nil t nil) nil nil)) (6967 . 6984) (#("Println(${1:a ...any})" 0 22 (fontified nil)) . 6967) (6967 . 6989) (#("prin" 0 4 (fontified nil)) . 6967) (6967 . 6971) (#("Println" 0 7 (fontified nil)) . -6967) (6967 . 6974) (#("prin" 0 4 (fontified t face tree-sitter-hl-face:property)) . -6967) (undo-tree-id560 . -4) (undo-tree-id561 . -4) 6971) nil (25917 24000 1274 113000) 0 nil])
([nil nil ((6975 . 6977) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6975) (undo-tree-id558 . -1) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 6976) (undo-tree-id559 . -8) (6975 . 6976)) nil (25917 24000 1270 716000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -6975) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -6976) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 6977) nil (25917 24000 1268 262000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6974) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6975) (undo-tree-id552 . 1)) nil (25917 24000 1265 36000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6968) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6969) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6970) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6971) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6972) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6973) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) 6974) nil (25917 24000 1259 957000) 0 nil])
([nil nil ((6968 . 6969)) nil (25917 24000 1246 11000) 0 nil])
([nil nil ((6969 . 6972)) nil (25917 24000 1244 659000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6974 6980 nil nil nil t #s(yas--field 2 6982 6984 nil nil nil t nil)) #s(yas--field 2 6982 6984 nil nil nil t nil)) nil 40 nil #s(yas--field 2 6982 6984 nil nil nil t nil) #s(yas--field 1 6967 6995 nil nil nil t nil) nil)) (6967 . 6998) (#("Printf(${1:format string}, ${2:a ...any})" 0 41 (fontified nil)) . 6967) (undo-tree-id509 . -41) (6967 . 7008) (#("Print" 0 5 (fontified nil)) . 6967) (undo-tree-id510 . -5) (6967 . 6972) (#("Printf" 0 6 (fontified nil)) . -6967) (undo-tree-id511 . -6) (6967 . 6973) (#("Print" 0 5 (fontified t face tree-sitter-hl-face:property)) . -6967) (undo-tree-id512 . -5) (undo-tree-id513 . -5) (undo-tree-id514 . -1) (undo-tree-id515 . -5) (undo-tree-id516 . -1) 6972) nil (25917 24000 1242 976000) 0 nil])
([nil nil ((6975 . 6979) (6974 . 6976) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6974) (#("format string" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 13 (fontified nil face tree-sitter-hl-face:variable)) . 6975) (6974 . 6975)) nil (25917 24000 1226 996000) 0 nil])
([nil nil ((6982 . 6984) (#("\"" 0 1 (fontified nil)) . -6982) (#("a ...any" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 5 (fontified nil face tree-sitter-hl-face:operator) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 6983) (6982 . 6983)) nil (25917 24000 1225 183000) 0 nil])
([nil nil ((apply yas--snippet-revive 6967 6985 #s(yas--snippet nil (#s(yas--field 1 6974 6980 nil nil nil t #s(yas--field 2 6982 6984 nil nil nil t nil)) #s(yas--field 2 6982 6984 nil nil nil t nil)) nil 40 nil #s(yas--field 2 6982 6984 nil nil nil t nil) #s(yas--field 1 6967 6995 nil nil nil t nil) nil))) nil (25917 24000 1224 181000) 0 nil])
([nil nil ((6975 . 6982)) nil (25917 24000 1223 710000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face tree-sitter-hl-face:string)) . -6989) (undo-tree-id508 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 6990)) nil (25917 24000 1222 358000) 0 nil])
([nil nil ((6989 . 6993)) nil (25917 24000 1210 847000) 0 nil])
([nil nil ((6994 . 6995)) nil (25917 24000 1204 475000) 0 nil])
([nil nil ((apply yas--snippet-revive 6967 6995 #s(yas--snippet nil (#s(yas--field 1 6967 6995 nil nil nil t nil)) nil 39 nil #s(yas--field 1 6967 6995 nil nil nil t nil) nil nil))) nil (25917 24045 63986 134000) 0 nil])
([nil nil ((6910 . 6913) (t 25917 24000 28748 159000)) nil (25917 24045 63984 961000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6910) (undo-tree-id578 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6911) (undo-tree-id579 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6912) (undo-tree-id580 . -1) 6913) nil (25917 24045 63982 647000) 0 nil])
([nil nil ((6900 . 6903)) nil (25917 24045 63978 359000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6900) (undo-tree-id575 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6901) (undo-tree-id576 . -1) (#(" " 0 1 (fontified t)) . -6902) (undo-tree-id577 . -1) 6903) nil (25917 24045 63973 390000) 0 nil])
([nil nil ((6897 . 6900) (t 25917 24045 91925 612000)) nil (25917 24147 342436 738000) 0 nil])
([nil nil ((6900 . 6903)) nil (25917 24147 342435 756000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6900) (undo-tree-id590 . -1) (#("-" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6901) (undo-tree-id591 . -1) (#(" " 0 1 (fontified t)) . -6902) (undo-tree-id592 . -1) 6903) nil (25917 24147 342433 812000) 0 nil])
([nil nil ((6900 . 6903)) nil (25917 24147 342429 865000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -6900) (undo-tree-id587 . -1) (#("/" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6901) (undo-tree-id588 . -1) (#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6902) (undo-tree-id589 . -1) 6903) nil (25917 24147 342428 332000) 0 nil])
([nil nil ((6900 . 6902)) nil (25917 24147 342423 964000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6901) (undo-tree-id586 . -1) 6902) nil (25917 24147 342422 531000) 0 nil])
([nil nil ((6901 . 6911)) nil (25917 24147 342420 97000) 0 nil])
([nil nil ((6911 . 6932)) nil (25917 24147 342419 215000) 0 nil])
([nil nil ((6932 . 6947)) nil (25917 24147 342418 173000) 0 nil])
([nil nil ((6947 . 6950)) nil (25917 24147 342417 81000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6947) (undo-tree-id583 . -1) (#("-" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6948) (undo-tree-id584 . -1) (#("y" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6949) (undo-tree-id585 . -1) 6950) nil (25917 24147 342415 338000) 0 nil])
([nil nil ((6947 . 6953)) nil (25917 24147 342411 70000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6951) (undo-tree-id581 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:comment)) . -6952) (undo-tree-id582 . -1) 6953) nil (25917 24147 342409 477000) 0 nil])
([nil nil ((6951 . 6972)) nil (25917 24147 342396 593000) 0 nil])
([nil nil ((6972 . 6979)) nil (25917 24147 342389 239000) 0 nil])
([nil nil ((#("		fmt.Printf(\"%v. item title: %v\\n\", i, item.Title)
" 0 2 (fontified t) 2 5 (fontified t face tree-sitter-hl-face:variable) 5 6 (fontified t) 6 12 (fontified t face (tree-sitter-hl-face:function\.method\.call tree-sitter-hl-face:property)) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 32 (fontified t face tree-sitter-hl-face:string) 32 33 (fontified t syntax-table (9) face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 33 34 (fontified t face (tree-sitter-hl-face:string tree-sitter-hl-face:escape)) 34 35 (fontified t face tree-sitter-hl-face:string) 35 37 (fontified t) 37 38 (fontified t face tree-sitter-hl-face:variable) 38 40 (fontified t) 40 44 (fontified t face tree-sitter-hl-face:variable) 44 45 (fontified t) 45 50 (fontified t face tree-sitter-hl-face:property) 50 51 (fontified t face (rainbow-delimiters-depth-3-face)) 51 52 (fontified t)) . 6419) (undo-tree-id638 . -42) (undo-tree-id639 . -51) (undo-tree-id640 . -51) (undo-tree-id641 . -51) (undo-tree-id642 . -52) (undo-tree-id643 . -42) 6461 (t 25917 24147 363070 574000)) nil (25917 25359 899458 912000) 0 nil])
([nil nil ((6419 . 6471)) nil (25917 25359 899455 195000) 0 nil])
([nil nil ((5259 . 5261) (t 25917 24147 363070 574000)) nil (25917 25359 899454 884000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5267) (5267 . 5268) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -5267) (5267 . 5268) (5261 . 5268)) nil (25917 25359 899453 973000) 0 nil])
([nil nil ((5267 . 5273)) nil (25917 25359 899453 31000) 0 nil])
([nil nil ((apply yas--snippet-revive 5270 5279 #s(yas--snippet nil nil nil 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 41 nil nil nil nil)) (5270 . 5279) (#("apiConfig" 0 9 (fontified nil)) . 5270) (5270 . 5279) (#("api" 0 3 (fontified nil)) . 5270) (5270 . 5273) (#("apiConfig" 0 9 (fontified nil)) . -5270) (5270 . 5279) (#("api" 0 3 (fontified t face tree-sitter-hl-face:type)) . -5270) (undo-tree-id636 . -3) (undo-tree-id637 . -3) 5273) nil (25917 25359 899451 568000) 0 nil])
([nil nil ((5280 . 5287)) nil (25917 25359 899450 145000) 0 nil])
([nil nil ((5287 . 5301)) nil (25917 25359 899449 905000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5294) (undo-tree-id629 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5295) (undo-tree-id630 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5296) (undo-tree-id631 . -1) (#("l" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5297) (undo-tree-id632 . -1) (#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5298) (undo-tree-id633 . -1) (#("w" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5299) (undo-tree-id634 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5300) (undo-tree-id635 . -1) 5301) nil (25917 25359 899448 843000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5301) (5301 . 5302) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -5301) (5301 . 5302) (5294 . 5302)) nil (25917 25359 899445 607000) 0 nil])
([nil nil ((5301 . 5311)) nil (25917 25359 899445 196000) 0 nil])
([nil nil ((5311 . 5317)) nil (25917 25359 899444 946000) 0 nil])
([nil nil ((apply yas--snippet-revive 5308 5322 #s(yas--snippet nil nil nil 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 42 nil nil nil nil)) (5308 . 5322) (#("ResponseWriter" 0 14 (fontified nil)) . 5308) (5308 . 5322) (#("ResponseW" 0 9 (fontified nil)) . 5308) (5308 . 5317) (#("ResponseWriter" 0 14 (fontified nil)) . -5308) (5308 . 5322) (#("ResponseW" 0 9 (fontified t face tree-sitter-hl-face:type)) . -5308) (undo-tree-id627 . -9) (undo-tree-id628 . -9) 5317) nil (25917 25359 899443 994000) 0 nil])
([nil nil ((5322 . 5335)) nil (25917 25359 899441 619000) 0 nil])
([nil nil ((apply yas--snippet-revive 5332 5339 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (5332 . 5339) (#("Request" 0 7 (fontified nil)) . 5332) (5332 . 5339) (#("Req" 0 3 (fontified nil)) . 5332) (5332 . 5335) (#("Request" 0 7 (fontified nil)) . -5332) (5332 . 5339) (#("Req" 0 3 (fontified t face tree-sitter-hl-face:type)) . -5332) (undo-tree-id625 . -3) (undo-tree-id626 . -3) 5335) nil (25917 25359 899440 828000) 0 nil])
([nil nil ((5339 . 5342)) nil (25917 25359 899438 694000) 0 nil])
([nil nil ((5342 . 5359)) nil (25917 25359 899438 33000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5362) (5362 . 5363) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -5362) (5362 . 5363) (5360 . 5363)) nil (25917 25359 899437 111000) 0 nil])
([nil nil ((5363 . 5364) (#("	" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 5363) (5363 . 5364) (5362 . 5364)) nil (25917 25359 899435 899000) 0 nil])
([nil nil ((5364 . 5369)) nil (25917 25359 899435 157000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5367) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5368) (undo-tree-id624 . -1) 5369) nil (25917 25359 899433 825000) 0 nil])
([nil nil ((5367 . 5388)) nil (25917 25359 899432 42000) 0 nil])
([nil nil ((5388 . 5389)) nil (25917 25359 899431 581000) 0 nil])
([nil nil ((5389 . 5392)) nil (25917 25359 899431 320000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5389) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5390) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5391) (undo-tree-id620 . -1) (undo-tree-id621 . -1) 5392) nil (25917 25359 899430 469000) 0 nil])
([nil nil ((5389 . 5390)) nil (25917 25359 899427 964000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5389) (undo-tree-id615 . -1) 5390) nil (25917 25359 899427 293000) 0 nil])
([nil nil ((5389 . 5392)) nil (25917 25359 899425 980000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5404 5409 nil nil nil t #s(yas--field 2 5411 5418 nil nil nil t nil)) #s(yas--field 2 5411 5418 nil nil nil t nil)) nil 44 nil #s(yas--field 2 5411 5418 nil nil nil t nil) nil nil)) (5389 . 5442) (#("GetPostsByUser(${1:ctx context.Context}, ${2:userID uuid.UUID})" 0 63 (fontified nil)) . 5389) (5389 . 5452) (#("Get" 0 3 (fontified nil)) . 5389) (5389 . 5392) (#("GetPostsByUser" 0 14 (fontified nil)) . -5389) (5389 . 5403) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5389) (undo-tree-id613 . -3) (undo-tree-id614 . -3) 5392) nil (25917 25359 899425 9000) 0 nil])
([nil nil ((5405 . 5406) (#("ctx context.Context" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 19 (fontified nil face tree-sitter-hl-face:property)) . 5405) (5404 . 5405)) nil (25917 25359 899423 25000) 0 nil])
([nil nil ((apply yas--snippet-revive 5406 5409 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 5404 5409 nil nil nil t #s(yas--field 2 5411 5418 nil nil nil t nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 5404 5409 nil nil nil t #s(yas--field 2 5411 5418 nil nil nil t nil)) nil)) (5406 . 5409) (#("ctx" 0 3 (fontified nil)) . 5406) (5406 . 5409) (#("ctx" 0 3 (fontified nil)) . -5406) (5406 . 5409)) nil (25917 25359 899422 193000) 0 nil])
([nil nil ((5412 . 5416) (#("userID uuid.UUID" 0 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 11 (fontified nil face tree-sitter-hl-face:variable) 11 12 (fontified nil) 12 16 (fontified nil face tree-sitter-hl-face:property)) . 5412) (5411 . 5412)) nil (25917 25359 899421 111000) 0 nil])
([nil nil ((apply yas--snippet-revive 5416 5418 #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 2 5411 5418 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 2 5411 5418 nil nil nil t nil) nil)) (5416 . 5418) (#("ID" 0 2 (fontified nil)) . 5416) (5416 . 5418) (#("ID" 0 2 (fontified nil)) . -5416) (5416 . 5418)) nil (25917 25359 899420 290000) 0 nil])
([nil nil ((apply yas--snippet-revive 5389 5419 #s(yas--snippet nil (#s(yas--field 1 5404 5409 nil nil nil t #s(yas--field 2 5411 5418 nil nil nil t nil)) #s(yas--field 2 5411 5418 nil nil nil t nil)) nil 44 nil #s(yas--field 2 5411 5418 nil nil nil t nil) nil nil))) nil (25917 25359 899418 927000) 0 nil])
([nil nil ((5419 . 5421)) nil (25917 25359 899418 406000) 0 nil])
([nil nil ((5421 . 5427)) nil (25917 25359 899417 935000) 0 nil])
([nil nil ((5428 . 5430) (#("'" 0 1 (fontified nil)) . -5428) (5427 . 5429)) nil (25917 25359 899417 444000) 0 nil])
([nil nil ((#("'" 0 1 (fontified nil)) . -5428) (undo-tree-id612 . -1) (#("'" 0 1 (fontified t)) . 5429)) nil (25917 25359 899416 413000) 0 nil])
([nil nil ((5428 . 5434)) nil (25917 25359 899415 341000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5431) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5432) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5433) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 5434) nil (25917 25359 899414 259000) 0 nil])
([nil nil ((5431 . 5434)) nil (25917 25359 899410 952000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5431) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5432) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5433) (undo-tree-id604 . -1) (undo-tree-id605 . -1) 5434) nil (25917 25359 899409 740000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5436) (5436 . 5437) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5436) (5436 . 5437) (5431 . 5437)) nil (25917 25359 899406 13000) 0 nil])
([nil nil ((5437 . 5439) (5438 . 5439) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5437) (5437 . 5439) (5436 . 5438)) nil (25917 25359 899404 330000) 0 nil])
([nil nil ((5439 . 5446)) nil (25917 25359 899402 917000) 0 nil])
([nil nil ((5438 . 5440) (#("		" 0 2 (fontified nil)) . 5437) (undo-tree-id599 . -2) (5439 . 5440)) nil (25917 25359 899401 966000) 0 nil])
([nil nil ((5437 . 5439)) nil (25917 25359 899400 513000) 0 nil])
([nil nil ((5439 . 5445)) nil (25917 25359 899399 862000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5462 5463 nil nil nil t #s(yas--field 2 5465 5468 nil nil nil t #s(yas--field 3 5470 5493 nil nil nil t nil))) #s(yas--field 2 5465 5468 nil nil nil t #s(yas--field 3 5470 5493 nil nil nil t nil)) #s(yas--field 3 5470 5493 nil nil nil t nil)) nil 47 nil #s(yas--field 3 5470 5493 nil nil nil t nil) nil nil)) (5445 . 5506) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 5445) (5445 . 5521) (#("RespondWithError" 0 16 (fontified nil)) . -5445) (5445 . 5461)) nil (25917 25359 899399 110000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5463) (5462 . 5463)) nil (25917 25359 899397 698000) 0 nil])
([nil nil ((5466 . 5468) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5466) (5465 . 5466)) nil (25917 25359 899396 776000) 0 nil])
([nil nil ((5471 . 5491) (5470 . 5472) (#("\"" 0 1 (fontified nil)) . -5470) (#("msg string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 5471) (5470 . 5471)) nil (25917 25359 899395 634000) 0 nil])
([nil nil ((5491 . 5492)) nil (25917 25359 899394 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 5445 5494 #s(yas--snippet nil (#s(yas--field 1 5462 5463 nil nil nil t #s(yas--field 2 5465 5468 nil nil nil t #s(yas--field 3 5470 5493 nil nil nil t nil))) #s(yas--field 2 5465 5468 nil nil nil t #s(yas--field 3 5470 5493 nil nil nil t nil)) #s(yas--field 3 5470 5493 nil nil nil t nil)) nil 47 nil #s(yas--field 3 5470 5493 nil nil nil t nil) nil nil))) nil (25917 25359 899394 211000) 0 nil])
([nil nil ((5507 . 5509)) nil (25917 25359 899393 560000) 0 nil])
([nil nil ((5509 . 5518)) nil (25917 25359 899393 29000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5531 5532 nil nil nil t #s(yas--field 2 5534 5537 nil nil nil t #s(yas--field 3 5539 5543 nil nil nil t nil))) #s(yas--field 2 5534 5537 nil nil nil t #s(yas--field 3 5539 5543 nil nil nil t nil)) #s(yas--field 3 5539 5543 nil nil nil t nil)) nil 48 nil #s(yas--field 3 5539 5543 nil nil nil t nil) nil nil)) (5515 . 5584) (#("RespondWithJSON(${1:w http.ResponseWriter}, ${2:code int}, ${3:payload interface{\\}})" 0 85 (fontified nil)) . 5515) (5515 . 5600) (#("Res" 0 3 (fontified nil)) . 5515) (5515 . 5518) (#("RespondWithJSON" 0 15 (fontified nil)) . -5515) (5515 . 5530) (#("Res" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5515) (undo-tree-id597 . -3) (undo-tree-id598 . -3) 5518) nil (25917 25359 899391 827000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5532) (undo-tree-id596 . -21) (5531 . 5532)) nil (25917 25359 899389 92000) 0 nil])
([nil nil ((5535 . 5537) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5535) (undo-tree-id595 . -8) (5534 . 5535)) nil (25917 25359 899387 799000) 0 nil])
([nil nil ((5540 . 5542) (5539 . 5541) (#("\"" 0 1 (fontified nil)) . -5539) (undo-tree-id593 . -1) (#("payload interface{}" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 16 (fontified nil face tree-sitter-hl-face:keyword) 16 17 (fontified nil face tree-sitter-hl-face:keyword) 17 18 (fontified nil face (rainbow-delimiters-depth-3-face)) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face))) . 5540) (undo-tree-id594 . -19) (5539 . 5540)) nil (25917 25359 899386 26000) 0 nil])
([nil nil ((apply yas--snippet-revive 5515 5544 #s(yas--snippet nil (#s(yas--field 1 5531 5532 nil nil nil t #s(yas--field 2 5534 5537 nil nil nil t #s(yas--field 3 5539 5543 nil nil nil t nil))) #s(yas--field 2 5534 5537 nil nil nil t #s(yas--field 3 5539 5543 nil nil nil t nil)) #s(yas--field 3 5539 5543 nil nil nil t nil)) nil 48 nil #s(yas--field 3 5539 5543 nil nil nil t nil) nil nil))) nil (25917 25359 899371 238000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5541) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 5542 (t 25917 25359 915866 491000)) nil (25917 25363 817715 902000) 0 nil])
([nil nil ((5541 . 5542)) nil (25917 25363 817703 819000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t)) . -5539) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (#("O" 0 1 (fontified t)) . -5540) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (#("K" 0 1 (fontified t)) . -5541) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . -5542) (undo-tree-id659 . -1) (undo-tree-id660 . -1) 5543 (t 25917 25363 834801 442000)) nil (25917 25374 663370 195000) 0 nil])
([nil nil ((5539 . 5543)) nil (25917 25374 663365 296000) 0 nil])
([nil nil ((apply yas--snippet-revive 5539 5550 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (5539 . 5550) (#("postsByUser" 0 11 (fontified nil)) . 5539) (5539 . 5550) (#("post" 0 4 (fontified nil)) . 5539) (5539 . 5543) (#("postsByUser" 0 11 (fontified nil)) . -5539) (5539 . 5550) (#("post" 0 4 (fontified t face tree-sitter-hl-face:variable)) . -5539) (undo-tree-id650 . -4) (undo-tree-id651 . -4) (undo-tree-id652 . -4) 5543) nil (25917 25374 663362 591000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t face tree-sitter-hl-face:number)) . -8587) (undo-tree-id690 . -1) 8588 (t 25917 25374 683633 36000)) nil (25917 25509 349119 487000) 0 nil])
([nil nil ((8587 . 8589)) nil (25917 25509 349117 974000) 0 nil])
([nil nil ((8569 . 8570) (#("	" 0 1 (fontified nil)) . 8568) (undo-tree-id689 . -1) (8567 . 8570)) nil (25917 25509 349116 982000) 0 nil])
([nil nil ((8570 . 8572)) nil (25917 25509 349115 189000) 0 nil])
([nil nil ((8572 . 8573)) nil (25917 25509 349114 507000) 0 nil])
([nil nil ((apply yas--snippet-revive 8570 8578 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (8570 . 8578) (#("v1Router" 0 8 (fontified nil)) . 8570) (8570 . 8578) (#("v1R" 0 3 (fontified nil)) . 8570) (8570 . 8573) (#("v1Router" 0 8 (fontified nil)) . -8570) (8570 . 8578) (#("v1R" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -8570) (undo-tree-id687 . -3) (undo-tree-id688 . -3) 8573) nil (25917 25509 349113 95000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -8583) (8583 . 8584) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -8583) (8583 . 8584) (8578 . 8584)) nil (25917 25509 349110 279000) 0 nil])
([nil nil ((8584 . 8590) (8583 . 8585) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -8583) (8583 . 8584)) nil (25917 25509 349108 626000) 0 nil])
([nil nil ((8591 . 8596)) nil (25917 25509 349106 893000) 0 nil])
([nil nil ((apply yas--snippet-revive 8593 8610 #s(yas--snippet nil nil nil 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 51 nil nil nil nil)) (8593 . 8610) (#("apiCfg.createUser" 0 17 (fontified nil)) . 8593) (8593 . 8610) (#("api" 0 3 (fontified nil)) . 8593) (8593 . 8596) (#("apiCfg.createUser" 0 17 (fontified nil)) . -8593) (8593 . 8610) (#("api" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -8593) (undo-tree-id685 . -3) (undo-tree-id686 . -3) 8596) nil (25917 25509 349105 721000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8600) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8601) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8602) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("a" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8603) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8604) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8605) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("U" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8606) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8607) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8608) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:property)) . -8609) (undo-tree-id683 . -1) (undo-tree-id684 . -1) 8610) nil (25917 25509 349102 264000) 0 nil])
([nil nil ((8600 . 8604)) nil (25917 25509 349092 386000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 8613 8639 nil nil nil t nil)) nil 52 nil #s(yas--field 1 8613 8639 nil nil nil t nil) nil nil)) (8600 . 8635) (#("authenticate(${1:handler authedHandler})" 0 40 (fontified nil)) . 8600) (8600 . 8640) (#("auth" 0 4 (fontified nil)) . 8600) (8600 . 8604) (#("authenticate" 0 12 (fontified nil)) . -8600) (8600 . 8612) (#("auth" 0 4 (fontified t face tree-sitter-hl-face:property)) . -8600) (undo-tree-id663 . -4) (undo-tree-id664 . -4) 8604) nil (25917 25509 349090 873000) 0 nil])
([nil nil ((#("handler authedHandler" 0 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 21 (fontified nil face tree-sitter-hl-face:variable)) . 8614) (8613 . 8614)) nil (25917 25509 349087 597000) 0 nil])
([nil nil ((8614 . 8623)) nil (25917 25509 349086 645000) 0 nil])
([nil nil ((apply yas--snippet-revive 8620 8639 #s(yas--snippet nil nil nil 53 nil nil #s(yas--field 1 8613 8639 nil nil nil t nil) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil #s(yas--field 1 8613 8639 nil nil nil t nil) nil)) (8620 . 8639) (#("GetAllPostsByUserId" 0 19 (fontified nil)) . 8620) (8620 . 8639) (#("Get" 0 3 (fontified nil)) . 8620) (8620 . 8623) (#("GetAllPostsByUserId" 0 19 (fontified nil)) . -8620) (8620 . 8639) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -8620) (undo-tree-id661 . -3) (undo-tree-id662 . -3) 8623) nil (25917 25509 349084 802000) 0 nil])
([nil nil ((apply yas--snippet-revive 8600 8640 #s(yas--snippet nil (#s(yas--field 1 8613 8639 nil nil nil t nil)) nil 52 nil #s(yas--field 1 8613 8639 nil nil nil t nil) nil nil))) nil (25917 25509 349073 430000) 0 nil])
([nil nil ((6021 . 6027) (t 25917 25509 368727 209000)) nil (25917 25937 792953 524000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6025) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6026) (undo-tree-id727 . -1) (undo-tree-id728 . -1) 6027) nil (25917 25937 792952 392000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6024) (undo-tree-id723 . -1) (undo-tree-id724 . -1) 6025) nil (25917 25937 792949 726000) 0 nil])
([nil nil ((6024 . 6026)) nil (25917 25937 792948 113000) 0 nil])
([nil nil ((6026 . 6029)) nil (25917 25937 792947 432000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -6083) (undo-tree-id720 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6084) (undo-tree-id721 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -6085) (undo-tree-id722 . -1) 6086) nil (25917 25937 792946 440000) 0 nil])
([nil nil ((6083 . 6085)) nil (25917 25937 792944 747000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6079) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6080) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6081) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6082) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6083) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -6084) (undo-tree-id718 . -1) (undo-tree-id719 . -1) 6085) nil (25917 25937 792943 154000) 0 nil])
([nil nil ((6079 . 6081)) nil (25917 25937 792938 405000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6021) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#(" " 0 1 (fontified nil)) . -6022) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("f" 0 1 (fontified nil face tree-sitter-hl-face:type)) . -6023) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6024) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6025) (undo-tree-id704 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6026) (undo-tree-id705 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6027) (undo-tree-id706 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:type)) . -6028) (undo-tree-id707 . -1) 6029) nil (25917 25937 792934 898000) 0 nil])
([nil nil ((5362 . 5364) (t 25917 25937 809421 737000)) nil (25917 26349 980735 620000) 0 nil])
([nil nil ((5364 . 5368)) nil (25917 26349 980734 878000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5364) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5365) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5366) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("P" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5367) (undo-tree-id813 . -1) (undo-tree-id814 . -1) 5368) nil (25917 26349 980733 796000) 0 nil])
([nil nil ((5364 . 5369)) nil (25917 26349 980730 89000) 0 nil])
([nil nil ((5369 . 5371)) nil (25917 26349 980729 107000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5370) (undo-tree-id806 . -1) 5371) nil (25917 26349 980728 496000) 0 nil])
([nil nil ((5370 . 5385)) nil (25917 26349 980727 364000) 0 nil])
([nil nil ((apply yas--snippet-revive 5382 5402 #s(yas--snippet nil nil nil 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 54 nil nil nil nil)) (5382 . 5402) (#("GetPostsByUserParams" 0 20 (fontified nil)) . 5382) (5382 . 5402) (#("Get" 0 3 (fontified nil)) . 5382) (5382 . 5385) (#("GetPostsByUserParams" 0 20 (fontified nil)) . -5382) (5382 . 5402) (#("Get" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5382) (undo-tree-id804 . -3) (undo-tree-id805 . -3) 5385) nil (25917 26349 980726 472000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5403) (5403 . 5404) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5403) (5403 . 5404) (5402 . 5404)) nil (25917 26349 980723 877000) 0 nil])
([nil nil ((5404 . 5406)) nil (25917 26349 980722 705000) 0 nil])
([nil nil ((5406 . 5409)) nil (25917 26349 980721 964000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5406) (undo-tree-id801 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5407) (undo-tree-id802 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5408) (undo-tree-id803 . -1) 5409) nil (25917 26349 980720 852000) 0 nil])
([nil nil ((5406 . 5409)) nil (25917 26349 980718 758000) 0 nil])
([nil nil ((apply yas--snippet-revive 5406 5411 #s(yas--snippet nil nil nil 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 55 nil nil nil nil)) (5406 . 5411) (#("dbObj" 0 5 (fontified nil)) . 5406) (5406 . 5411) (#("dbO" 0 3 (fontified nil)) . 5406) (5406 . 5409) (#("dbObj" 0 5 (fontified nil)) . -5406) (5406 . 5411) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5406) (undo-tree-id799 . -3) (undo-tree-id800 . -3) 5409) nil (25917 26349 980717 686000) 0 nil])
([nil nil ((5411 . 5412)) nil (25917 26349 980714 900000) 0 nil])
([nil nil ((apply yas--snippet-revive 5412 5417 #s(yas--snippet nil nil nil 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 56 nil nil nil nil)) (5412 . 5417) (#("Limit" 0 5 (fontified nil)) . 5412) (5412 . 5417) (#("Limit" 0 5 (fontified nil)) . -5412) (5412 . 5417)) nil (25917 26349 980713 948000) 0 nil])
([nil nil ((5417 . 5421)) nil (25917 26349 980712 315000) 0 nil])
([nil nil ((5362 . 5364)) nil (25917 26349 980711 624000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5362) (undo-tree-id797 . -1) (#("	" 0 1 (fontified t)) . -5363) (undo-tree-id798 . -1) 5364) nil (25917 26349 980710 913000) 0 nil])
([nil nil ((5362 . 5364)) nil (25917 26349 980709 370000) 0 nil])
([nil nil ((5364 . 5376)) nil (25917 26349 980708 708000) 0 nil])
([nil nil ((5376 . 5377)) nil (25917 26349 980708 418000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5373) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (#("h" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5374) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5375) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("." 0 1 (fontified t)) . -5376) (undo-tree-id795 . -1) (undo-tree-id796 . -1) 5377) nil (25917 26349 980707 757000) 0 nil])
([nil nil ((5373 . 5379)) nil (25917 26349 980705 342000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5378) (undo-tree-id788 . -1) 5379) nil (25917 26349 980704 961000) 0 nil])
([nil nil ((5378 . 5380)) nil (25917 26349 980704 240000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5386 5387 nil nil nil t #s(yas--field 2 5389 5396 nil nil nil t nil)) #s(yas--field 2 5389 5396 nil nil nil t nil)) nil 57 nil #s(yas--field 2 5389 5396 nil nil nil t nil) nil nil)) (5377 . 5414) (#("URLParam(${1:r *http.Request}, ${2:key string})" 0 47 (fontified nil)) . 5377) (5377 . 5424) (#("Url" 0 3 (fontified nil)) . 5377) (5377 . 5380) (#("URLParam" 0 8 (fontified nil)) . -5377) (5377 . 5385) (#("Url" 0 3 (fontified t face tree-sitter-hl-face:property)) . -5377) (undo-tree-id786 . -3) (undo-tree-id787 . -3) 5380) nil (25917 26349 980703 539000) 0 nil])
([nil nil ((#("r *http.Request" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 3 (fontified nil face tree-sitter-hl-face:operator) 3 7 (fontified nil face tree-sitter-hl-face:variable) 7 8 (fontified nil) 8 15 (fontified nil face tree-sitter-hl-face:property)) . 5387) (5386 . 5387)) nil (25917 26349 980702 156000) 0 nil])
([nil nil ((5390 . 5395) (5389 . 5391) (#("\"" 0 1 (fontified nil)) . -5389) (#("key string" 0 3 (fontified nil face tree-sitter-hl-face:variable) 3 4 (fontified nil) 4 10 (fontified nil face tree-sitter-hl-face:variable)) . 5390) (5389 . 5390)) nil (25917 26349 980701 795000) 0 nil])
([nil nil ((apply yas--snippet-revive 5377 5397 #s(yas--snippet nil (#s(yas--field 1 5386 5387 nil nil nil t #s(yas--field 2 5389 5396 nil nil nil t nil)) #s(yas--field 2 5389 5396 nil nil nil t nil)) nil 57 nil #s(yas--field 2 5389 5396 nil nil nil t nil) nil nil))) nil (25917 26349 980701 334000) 0 nil])
([nil nil ((5456 . 5461)) nil (25917 26349 980701 94000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face tree-sitter-hl-face:operator)) . -5453) (undo-tree-id785 . -1) 5454) nil (25917 26349 980700 733000) 0 nil])
([nil nil ((5455 . 5458)) nil (25917 26349 980700 102000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5455) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5456) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5457) (undo-tree-id783 . -1) (undo-tree-id784 . -1) 5458) nil (25917 26349 980699 351000) 0 nil])
([nil nil ((5455 . 5458)) nil (25917 26349 980697 46000) 0 nil])
([nil nil ((5458 . 5463)) nil (25917 26349 980696 806000) 0 nil])
([nil nil ((5463 . 5464)) nil (25917 26349 980696 555000) 0 nil])
([nil nil ((5464 . 5469)) nil (25917 26349 980696 295000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -5468) (undo-tree-id776 . -1) (undo-tree-id777 . 1) (undo-tree-id778 . -1) 5469) nil (25917 26349 980695 924000) 0 nil])
([nil nil ((5473 . 5474) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -5473) (5473 . 5474)) nil (25917 26349 980694 41000) 0 nil])
([nil nil ((187 . 189)) nil (25917 26349 980693 530000) 0 nil])
([nil nil ((190 . 197) (189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190)) nil (25917 26349 980693 69000) 0 nil])
([nil nil ((5463 . 5469)) nil (25917 26349 980692 468000) 0 nil])
([nil nil ((5491 . 5493)) nil (25917 26349 980691 706000) 0 nil])
([nil nil ((5493 . 5500)) nil (25917 26349 980691 185000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5497) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5498) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5499) (undo-tree-id774 . -1) (undo-tree-id775 . -1) 5500) nil (25917 26349 980690 544000) 0 nil])
([nil nil ((5497 . 5501)) nil (25917 26349 980688 29000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5509) (5509 . 5510) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -5509) (5509 . 5510) (5501 . 5510)) nil (25917 26349 980687 378000) 0 nil])
([nil nil ((5510 . 5512) (5511 . 5512) (#("		" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 5510) (5510 . 5512) (5509 . 5511)) nil (25917 26349 980686 807000) 0 nil])
([nil nil ((5512 . 5518)) nil (25917 26349 980686 236000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5535 5536 nil nil nil t #s(yas--field 2 5538 5541 nil nil nil t #s(yas--field 3 5543 5566 nil nil nil t nil))) #s(yas--field 2 5538 5541 nil nil nil t #s(yas--field 3 5543 5566 nil nil nil t nil)) #s(yas--field 3 5543 5566 nil nil nil t nil)) nil 58 nil #s(yas--field 3 5543 5566 nil nil nil t nil) nil nil)) (5518 . 5579) (#("RespondWithError(${1:w http.ResponseWriter}, ${2:code int}, ${3:msg string})" 0 76 (fontified nil)) . 5518) (5518 . 5594) (#("RespondWithError" 0 16 (fontified nil)) . -5518) (5518 . 5534)) nil (25917 26349 980685 504000) 0 nil])
([nil nil ((#("w http.ResponseWriter" 0 1 (fontified nil face tree-sitter-hl-face:variable) 1 2 (fontified nil) 2 6 (fontified nil face tree-sitter-hl-face:variable) 6 7 (fontified nil) 7 21 (fontified nil face tree-sitter-hl-face:property)) . 5536) (5535 . 5536)) nil (25917 26349 980684 783000) 0 nil])
([nil nil ((5539 . 5541) (#("code int" 0 4 (fontified nil face tree-sitter-hl-face:variable) 4 5 (fontified nil) 5 8 (fontified nil face tree-sitter-hl-face:variable)) . 5539) (5538 . 5539)) nil (25917 26349 980684 52000) 0 nil])
([nil nil ((5544 . 5546) (#("\"" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -5544) (5544 . 5545)) nil (25917 26349 980683 471000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5543) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (#("\"" 0 1 (fontified t)) . -5544) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("\"" 0 1 (fontified t)) . -5545) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5546) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5547) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (#(" " 0 1 (fontified t)) . -5548) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5549) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5550) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5551) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5552) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("n" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5553) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5554) (undo-tree-id768 . -1) (undo-tree-id769 . -1) 5555) nil (25917 26349 980681 938000) 0 nil])
([nil nil ((5544 . 5564) (5543 . 5545) (#("\"" 0 1 (fontified nil)) . -5543) (5543 . 5544)) nil (25917 26349 980672 951000) 0 nil])
([nil nil ((5564 . 5565)) nil (25917 26349 980672 540000) 0 nil])
([nil nil ((apply yas--snippet-revive 5518 5567 #s(yas--snippet nil (#s(yas--field 1 5535 5536 nil nil nil t #s(yas--field 2 5538 5541 nil nil nil t #s(yas--field 3 5543 5566 nil nil nil t nil))) #s(yas--field 2 5538 5541 nil nil nil t #s(yas--field 3 5543 5566 nil nil nil t nil)) #s(yas--field 3 5543 5566 nil nil nil t nil)) nil 58 nil #s(yas--field 3 5543 5566 nil nil nil t nil) nil nil))) nil (25917 26349 980672 119000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5618) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (#("u" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5619) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (#("s" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5620) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5621) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5622) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (#("." 0 1 (fontified t)) . -5623) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#("I" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5624) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (#("D" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5625) (undo-tree-id745 . -1) 5626) nil (25917 26349 980670 836000) 0 nil])
([nil nil ((5618 . 5622)) nil (25917 26349 980664 494000) 0 nil])
([nil nil ((apply yas--snippet-revive 5619 5624 #s(yas--snippet nil nil nil 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 59 nil nil nil nil)) (5619 . 5624) (#("dbObj" 0 5 (fontified nil)) . 5619) (5619 . 5624) (#("dbO" 0 3 (fontified nil)) . 5619) (5619 . 5622) (#("dbObj" 0 5 (fontified nil)) . -5619) (5619 . 5624) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5619) (undo-tree-id729 . -3) (undo-tree-id730 . -3) 5622) nil (25917 26349 980662 400000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5397) (undo-tree-id834 . -1) 5398 (t 25917 26350 2373 463000)) nil (25917 26416 660911 90000) 0 nil])
([nil nil ((5397 . 5398)) nil (25917 26416 660910 128000) 0 nil])
([nil nil ((5470 . 5471)) nil (25917 26416 660909 868000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5452) (undo-tree-id823 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5453) (undo-tree-id824 . -1) (#("O" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5454) (undo-tree-id825 . -1) (#("b" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5455) (undo-tree-id826 . -1) (#("j" 0 1 (fontified t face tree-sitter-hl-face:variable)) . -5456) (undo-tree-id827 . -1) (#("." 0 1 (fontified t)) . -5457) (undo-tree-id828 . -1) (#("L" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5458) (undo-tree-id829 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5459) (undo-tree-id830 . -1) (#("m" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5460) (undo-tree-id831 . -1) (#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5461) (undo-tree-id832 . -1) (#("t" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5462) (undo-tree-id833 . -1) 5463) nil (25917 26416 660908 455000) 0 nil])
([nil nil ((5380 . 5383)) nil (25917 26416 660902 915000) 0 nil])
([nil nil ((5455 . 5459)) nil (25917 26416 660902 313000) 0 nil])
([nil nil ((5458 . 5459)) nil (25917 26416 660901 692000) 0 nil])
([nil nil ((5568 . 5570)) nil (25917 26416 660901 201000) 0 nil])
([nil nil ((5570 . 5575)) nil (25917 26416 660900 750000) 0 nil])
([nil nil ((apply yas--snippet-revive 5570 5581 #s(yas--snippet nil nil nil 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 60 nil nil nil nil)) (5570 . 5581) (#("dbObj.Limit" 0 11 (fontified nil)) . 5570) (5570 . 5581) (#("dbObj" 0 5 (fontified nil)) . 5570) (5570 . 5575) (#("dbObj.Limit" 0 11 (fontified nil)) . -5570) (5570 . 5581) (#("dbObj" 0 5 (fontified t face tree-sitter-hl-face:variable)) . -5570) (undo-tree-id821 . -5) (undo-tree-id822 . -5) 5575) nil (25917 26416 660899 568000) 0 nil])
([nil nil ((5581 . 5589)) nil (25917 26416 660896 883000) 0 nil])
([nil nil ((5584 . 5591)) nil (25917 26416 660895 971000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -5590) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . 1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) 5591) nil (25917 26416 660894 929000) 0 nil])
([nil nil ((5595 . 5596) (#(")" 0 1 (fontified nil face tree-sitter-hl-face:variable)) . -5595) (5595 . 5596)) nil (25917 26416 660881 13000) 0 nil])
([nil nil ((5488 . 5491) (t 25917 26416 681744 875000)) nil (25917 26470 582600 353000) 0 nil])
([nil nil ((5599 . 5601) (t 25917 26470 599861 720000)) nil (25917 26522 228132 729000) 0 nil])
([nil nil ((5601 . 5604)) nil (25917 26522 228132 168000) 0 nil])
([nil nil ((apply yas--snippet-revive 5601 5613 #s(yas--snippet nil nil nil 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 61 nil nil nil nil)) (5601 . 5613) (#("dbObj.UserID" 0 12 (fontified nil)) . 5601) (5601 . 5613) (#("dbO" 0 3 (fontified nil)) . 5601) (5601 . 5604) (#("dbObj.UserID" 0 12 (fontified nil)) . -5601) (5601 . 5613) (#("dbO" 0 3 (fontified t face tree-sitter-hl-face:variable)) . -5601) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) 5604) nil (25917 26522 228131 6000) 0 nil])
([nil nil ((5613 . 5621)) nil (25917 26522 227984 988000) 0 nil])
([nil nil ((5621 . 5623)) nil (25917 26522 227984 237000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5621) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("d" 0 1 (fontified t face tree-sitter-hl-face:property)) . -5622) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) 5623) nil (25917 26522 227983 34000) 0 nil])
([nil current ((5621 . 5623)) nil (25917 26522 227968 717000) 0 nil])
nil
